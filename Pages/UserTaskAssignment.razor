@page "/user_task_assignment/{email}/{userName}/{userClass}"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Calendars
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject SfDialogService DialogService
@inject NavigationManager NavManager
@inject State State

@namespace NissayaEditor_Web.Data
@using Tipitaka_DBTables
@using Tipitaka_DB

@* *************************************************************************** *@
@* ********************* Entry Point to TaskAssignments ********************** *@
@* *************************************************************************** *@
@code {
    [Parameter]
    public string email { get; set; } = "";
    [Parameter]
    public string userName { get; set; } = "";
    [Parameter]
    public string userClass { get; set; } = "";

    public class DataItem
    {
        public string ID { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }
    /************************************************************************************/
    //***********************************************************************
    //***************************** Initialize ******************************
    //***********************************************************************
    protected override async Task OnInitializedAsync()
    // protected override void OnInitialized()
    {
        State.screenID = 4; // UserTaskAssignment screen
        if (State.dataFile != null)
        {
            foreach (string item in State.dataFile.listTaskSearchTypes)
            {
                docSearchTypes.Add(new DataItem()
                {
                    ID = item,
                    Text = item
                });
            }
        }
    }
}
@* *************************************************************************** *@
@* https://blazor.syncfusion.com/documentation/datagrid/template-editing  *@
@* https://blazor.syncfusion.com/documentation/treegrid/editing/template-editing *@
@* https://blazor.syncfusion.com/documentation/dialog/template *@
@* https://blazor.syncfusion.com/documentation/datagrid/template-editing *@
@* *************************************************************************** *@
<div id="ControlRegion" style="background-color: #f7f0df; width: 100%;">
    <div class="menu-control">
        <SfMenu Items="@MenuData">
            <MenuEvents TValue="MenuItem" ItemSelected="menuitemSelected"></MenuEvents>
        </SfMenu>
    </div>
</div>
@* Menu style
https://www.syncfusion.com/forums/173054/menu-bar-font-color-and-vertical-align-for-sub-items
*@
<style>
    .menu-control, .e-menu-container, .e-menu-container.e-menu-popup,
    .e-menu-container ul .e-menu-item, .e-menu-container .e-ul .e-menu-item {
        background-color: #ded8ca;
        font-size: 18px;
    }
</style>
@code{
    #pragma warning disable
    private List<MenuItem> MenuData = new List<MenuItem>
    {
        new MenuItem
        {
            Text = "DataPage"
        },
        new MenuItem
        {
            Text = "Logout",
        }
    };
    private async Task menuitemSelected(MenuEventArgs<MenuItem> args)
    {
        switch(args.Item.Text)
        {
            case "Logout": NavManager.NavigateTo("/"); 
                break;
            case "DataPage":
                State.screenID = 4;
                NavManager.NavigateTo(String.Format("/nissayaeditor/{0}/{1}/{2}", email, userName, userClass)); 
            break;
        }
    }
}
<br/>
<label style="font-size:20px"><strong>Task Assignments</strong></label>
<label style="width:800px;text-align:right;">User: @userName</label>
<div>
    <div style="width:200px" class="form-group col-md-2 column">
        <label class="col-form-label">Search Type</label>
        <SfDropDownList TValue="string" TItem="DataItem" @bind-Value="searchTypeValue"
                        MultiSelectMode="None" PopupHeight="325px" DataSource="@docSearchTypes">
            <DropDownListEvents TItem="DataItem" TValue="string" ValueChange="@SearhTypeValueChangeHandler"></DropDownListEvents>
            <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div style="width:200px" class="form-group col-md-2 column">
        <label class="col-form-label">Search Text</label>
        <SfTextBox TValue="string" @bind-Value="@pattern"></SfTextBox>
    </div>
</div>
<br />
<div style="width:180px;height:32px; padding-top:23px; padding-left:11px" class="form-group col-md-2 column">
    <SfButton IsPrimary="true" CssClass="e-custom2" OnClick="@ShowTasks"> Show Tasks </SfButton>
</div>
<div style="width:180px;height:32px; padding-top:23px; padding-left:11px" class="form-group col-md-2 column">
    <SfButton CssClass="e-custom3" OnClick="@ShowNextTasks"> Show Next @nextCount </SfButton>
    </div>
<br />
<br />
<label style="margin-left:385px;width:200px;text-align: right;"><strong>Total : </strong>@totalCount</label>
<br />
@***************************************************************************************@
@****************************** Task Assignments DataGrid ******************************@
@***************************************************************************************@
<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@TaskInfoRecords" @ref="sfgrid" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowExcelExport="false" AllowSelection="true"
            AllowSorting="true" AllowTextWrap="false" Height="180" Width="1000">
            @* Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Search" })" AllowTextWrap="false" Height="380" Width="1000"> *@
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog='true'
                          NewRowPosition="NewRowPosition.Bottom" Mode="Syncfusion.Blazor.Grids.EditMode.Normal">
        </GridEditSettings>
        <GridPageSettings PageSize="5"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridEvents TValue="TaskInfo" RowSelected="RowSelectHandler"></GridEvents>
        @* <GridEvents RowSelected="RowSelectHandler" OnActionBegin="ActionBeginUser" OnActionComplete="ActionCompleteUser" OnToolbarClick="ToolbarClick" TValue="DocInfo"></GridEvents> *@
        <GridColumns>
            <GridColumn Field=@nameof(TaskInfo.SrNo) HeaderText="Sr No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        IsPrimaryKey="true" AllowEditing="false" Width="8%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(TaskInfo.DocNo) HeaderText="Doc No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        AllowEditing="false" Width="12%" Type="ColumnType.String" TextAlign="TextAlign.Left"></GridColumn>
            <GridColumn Field=@nameof(TaskInfo.DocTitle) HeaderText="Title" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left" AllowEditing="false" Width="28%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(TaskInfo.Pages) HeaderText="Pages" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Center" AllowEditing="false" Width="10%" Type="ColumnType.Integer"></GridColumn>
            <GridColumn Field=@nameof(TaskInfo.PagesSubmitted) HeaderText="Submitted" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        AllowEditing="false" Width="10%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(TaskInfo.Status) HeaderText="Status" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Center" AllowEditing="false" Width="9%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(TaskInfo.Team) HeaderText="Team" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left" AllowEditing="false" Type="ColumnType.String"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
@***************************************************************************************@
@************************** Task Assignment Detailed DataGrid **************************@
@***************************************************************************************@
<hr style="width:1000px" />
<label style="font-size:21px"><strong>Task Details</strong></label>
<label style="margin-left:160px;width:700px;text-align: right;"><strong>@SourceBookLabel</strong>@sourcePDF</label>
<label style="margin-left:285px;width:700px;text-align: right;"><strong>@overdueLabel</strong>@overdueDay</label>
<br />
<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@TaskDetailedInfoRecords" @ref="sfgrid1" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowExcelExport="false" AllowSelection="true"
            AllowSorting="true" AllowTextWrap="false" Height="180" Width="1000">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog='true'
                          NewRowPosition="NewRowPosition.Bottom" Mode="Syncfusion.Blazor.Grids.EditMode.Normal">
        </GridEditSettings>
        <GridPageSettings PageSize="5"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridEvents TValue="TaskDetailedInfo" RowSelected="RowSelectHandlerTaskAssignment"></GridEvents>
        @* <GridEvents RowSelected="RowSelectHandler" OnActionBegin="ActionBeginUser" OnActionComplete="ActionCompleteUser" OnToolbarClick="ToolbarClick" TValue="DocInfo"></GridEvents> *@
        <GridColumns>
            <GridColumn Field=@nameof(TaskDetailedInfo.SrNo) HeaderText="Sr No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        IsPrimaryKey="true" AllowEditing="false" Width="7%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>

            <GridColumn Field=@nameof(TaskDetailedInfo.UserName) HeaderText="User Name" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        AllowEditing="false" Width="15%" Type="ColumnType.String" TextAlign="TextAlign.Left"></GridColumn>

            <GridColumn Field=@nameof(TaskDetailedInfo.NoPages) HeaderText="Pages" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Center" AllowEditing="false" Width="9%" Type="ColumnType.String"></GridColumn>

            <GridColumn Field=@nameof(TaskDetailedInfo.PagesSubmitted) HeaderText="Submitted" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Center" AllowEditing="false" Width="10%" Type="ColumnType.Integer"></GridColumn>

            <GridColumn Field=@nameof(TaskDetailedInfo.CorrectionCount) HeaderText="Corrections" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        IsPrimaryKey="true" AllowEditing="false" Width="10%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>

            <GridColumn Field=@nameof(TaskDetailedInfo.Task) HeaderText="Task" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        AllowEditing="false" Width="9%" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>

            <GridColumn Field=@nameof(TaskInfo.StartDate) HeaderText="StartDate" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Center" AllowEditing="false" Width="8%" Type="ColumnType.String"></GridColumn>

            <GridColumn Field=@nameof(TaskInfo.LastUpdate) HeaderText="LastUpdate" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Center" AllowEditing="false" Width="9%" Type="ColumnType.String"></GridColumn>

            <GridColumn Field=@nameof(TaskDetailedInfo.Status) HeaderText="Status" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Center" AllowEditing="false" Width="12%" Type="ColumnType.String"></GridColumn>

        </GridColumns>
    </SfGrid>
</div>
<br />
<div id="ControlRegion">
    <div class="form-row">
        <div style="width:200px;height:32px; padding-top:0px; padding-bottom:15px; margin-left:200px" class="column-dialog left-dialog" hidden="@hideButton">
            <SfButton OnClick="@OnImportData"> Import Data From File </SfButton>
        </div>
        <div style="width:200px;height:32px; padding-top:0px; padding-bottom:15px;margin-left:150px" class="column-dialog right-dialog" hidden="@hideButton">
            <SfButton OnClick="@OnRetrieveData"> Retrieve Data From Server </SfButton>
        </div>
    </div>
</div>
<br />
@***************************************************************************************@
@***************************** Correction Detailed DataGrid ****************************@
@***************************************************************************************@
<hr style="width:1000px" />
@* <h5><strong>Correction Details</strong></h5> *@
<label style="font-size:21px"><strong>Correction Details</strong></label>
<br/>
<label style="margin-left:287px;width:700px;text-align: right;"><strong>Total : </strong>@nCorrections</label>
<br/>
<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@CorrectionInfoRecords" @ref="sfgrid2" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowExcelExport="false" AllowSelection="true"
            AllowSorting="true" AllowTextWrap="false" Height="180" Width="1000">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog='true'
                          NewRowPosition="NewRowPosition.Bottom" Mode="Syncfusion.Blazor.Grids.EditMode.Normal">
        </GridEditSettings>
        <GridPageSettings PageSize="5"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridEvents TValue="CorrectionInfo" RowSelected="RowSelectHandlerCorrectionGrid"></GridEvents>
        @* <GridEvents RowSelected="RowSelectHandler" OnActionBegin="ActionBeginUser" OnActionComplete="ActionCompleteUser" OnToolbarClick="ToolbarClick" TValue="DocInfo"></GridEvents> *@
        <GridColumns>
            <GridColumn Field=@nameof(CorrectionInfo.SrNo) HeaderText="Sr No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        IsPrimaryKey="true" AllowEditing="false" Width="8%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>

            <GridColumn Field=@nameof(CorrectionInfo.AssignedTo) HeaderText="Name" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left" AllowEditing="false" Width="18%" Type="ColumnType.String"></GridColumn>

            <GridColumn Field=@nameof(CorrectionInfo.Task) HeaderText="Task" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        AllowEditing="false" Width="10%" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>

            <GridColumn Field=@nameof(CorrectionInfo.PageNo) HeaderText="Page" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Center" AllowEditing="false" Width="7%" Type="ColumnType.Integer"></GridColumn>

            <GridColumn Field=@nameof(CorrectionInfo.NISField ) HeaderText="NIS" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        IsPrimaryKey="true" AllowEditing="false" Width="7%" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>

            <GridColumn Field=@nameof(CorrectionInfo.BeforeEdit) HeaderText="Before Edit" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left" AllowEditing="false" Width="28%" Type="ColumnType.String"></GridColumn>

            <GridColumn Field=@nameof(CorrectionInfo.AfterEdit) HeaderText="After Edit" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left" AllowEditing="false" Width="28%" Type="ColumnType.String"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
<br />
<label style="width:100px;"><strong>Before Edit</strong></label>
<label><strong>:&nbsp&nbsp&nbsp</strong>@beforeEdit</label>
<br/>
<label style="width:100px;"><strong>After Edit</strong></label>
<label><strong>:&nbsp&nbsp&nbsp</strong>@afterEdit</label>
<br/><br/>
@* *************************************************************************** *@
@* ************************ New doc info dialog Style ************************ *@
@* *************************************************************************** *@
<style>
    .column {
        float: left;
        padding: 9px;
        width: 250px;
        /* height: 530px; /* should be removed. only for demonstration */
    }
    .column-dialog {
        float: left;
        padding: 10px;
    }

    .left-col2-dialog {
        width: 50%;
    }

    .right-col2-dialog {
        width: 50%;
    }

    .left-dialog {
        padding: 10px;
        width: 180px;
    }

    .middle-dialog {
        padding: 10px;
        width: 180px;
    }

    .right-dialog {
        padding: 10px;
        width: 180px;
    }

    .e-custom {
        /* border-radius: 0; */
        height: 32px;
        width: 100px;
    }

    .e-custom, .e-custom:hover, .e-custom:focus, .e-custom:active {
        background-color: #ff6e40;
        color: #fff;
    }

    .e-custom1 {
        margin-top: 15px;
        margin-left: 10px;
        border-radius: 0;
        height: 30px;
        width: 90px;
    }

    .e-custom2 {
        /* border-radius: 25px; */
        height: 32px;
        width: 140px;
    }

    .e-custom3 {
        display: @showNextButton;
        /* border-radius: 25px; */
        height: 32px;
        width: 140px;
        background-color: white;
    }
</style>
@********************************* Grid styles **********************************@
<style>
    .e-grid {
        line-height: 20px;
    }

    .e-headercell.e-attr1 {
        background: #cfcfcf;
    }

    .e-grid .e-altrow {
        background-color: #F3F2F1;
    }

    .e-grid .e-rowcell.e-selectionbackground {
        background-color: lightsteelblue !important;
    }

    .e-grid tr.e-row:hover .e-rowcell:not(.e-cellselectionbackground):not(.e-active):not(.e-updatedtd):not(.e-indentcell) {
        border-block-color: black;
        border-block-start-color: black;
        /* border-bottom-color: black; */
    }
</style>
@****************************** End of Grid styles ******************************@
@* *************************************************************************** *@
@* ************************ New doc info dialog Code ************************* *@
@* *************************************************************************** *@
@code {
    /************************************************************************************/
    //******** Classes and variables
    /************************************************************************************/
    public class TaskInfo()
    {
        public int SrNo { get; set; }
        public string DocNo { get; set; }
        public string DocTitle { get; set; }
        public string Task { get; set; }
        public string Pages { get; set; }
        public int PagesSubmitted { get; set; }
        public string StartDate { get; set; }
        public string LastUpdate { get; set; }
        public int CorrectionCount { get; set; }
        public string Status { get; set; }
        public string Team { get; set; }
    };
    public class TaskDetailedInfo()
    {
        public int SrNo { get; set; }
        public string DocNo { get; set; }
        public string UserName { get; set; }
        public string UserID { get; set; }
        public string NoPages { get; set; }
        public int? PagesSubmitted { get; set; }
        public string Task { get; set; }
        public string StartDate { get; set; }
        public string LastUpdate { get; set; }
        public int? CorrectionCount { get; set; }
        public string Status { get; set; }
    };
    public class CorrectionInfo()
    {
        public int SrNo { get; set; }
        public string DocNo { get; set; }
        public string AssignedTo { get; set; }
        public string Task { get; set; }
        public int PageNo { get; set; }
        public string NISField { get; set; }
        public string BeforeEdit { get; set; }
        public string AfterEdit { get; set; }
        public string Date { get; set; }
    }
    public DateTime? DateValue { get; set; }
    private List<DataItem> docSearchTypes = new List<DataItem>();
    List<TaskInfo> TaskInfoRecords = new List<TaskInfo>();
    List<TaskDetailedInfo> TaskDetailedInfoRecords = new List<TaskDetailedInfo>();
    List<CorrectionInfo> CorrectionInfoRecords = new List<CorrectionInfo>();

    SfGrid<TaskInfo> sfgrid;
    SfGrid<TaskDetailedInfo> sfgrid1;
    SfGrid<CorrectionInfo> sfgrid2;

    bool hideButton = true;
    // SfDropDownList<string, DataItem> taskDropdown;

    /************************************************************************************/
    //******** Variables
    /************************************************************************************/
    string searchTypeValue = "", searchType = "", pattern = "";
    string userDropDownValue = "", taskDropDownValue = "";

    List<string> docTypes, docSubTypes;
    List<DataItem> listDocs = new List<DataItem>();
    List<DataItem> listPDFItems = new List<DataItem>();
    List<DataItem> listUsers = new List<DataItem>();
    List<DataItem> listTasks = new List<DataItem>();
    List<SuttaInfo> newSuttaList = new List<SuttaInfo>();

    Dictionary<string, int> dictPDFPageCount = new Dictionary<string, int>();
    public SfDropDownList<string, DataItem> docDropdown;
    public SfDropDownList<string, DataItem> srcPDFDropdown;
    public SfComboBox<string, DataItem> docSubTypeCombo;
    private TaskInfo? rowSelectedTaskInfo = null;
    string formattedDocNo = "";
    string doc_No = "", doc_Title = "", doc_SubTitle = "", pages_Count = "";
    string sourcePDF = "", SourceBookLabel = "";
    string beforeEdit = "", afterEdit = "";
    string loadedDocType = "";
    string showNextButton = "none";
    string overdueLabel = "";
    string overdueDay = "";
    
    int selectedBookPages = 0;
    int idxTaskAssignmentRowSelect = -1;
    int idxTaskRowSelect = -1;
    int nextCount = 0, totalCount = 0;
    int nCorrections = 0;

    //************************************************************************************/
    //******** AlertBtn
    /************************************************************************************/
    public async Task AlertBtn(string msg, string warn)
    {
        await DialogService.AlertAsync(msg, warn, new DialogOptions()
            {
                PrimaryButtonOptions = new DialogButtonOptions() { Content = "Ok" }
            });
    }
    //************************************************************************************/
    //******** Search value change events
    /************************************************************************************/
    private void SearhTypeValueChangeHandler(ChangeEventArgs<string, DataItem> args)
    {
        if (args != null && args.ItemData != null)
            searchType = args.ItemData.Text;
        else searchType = String.Empty;
    }
    /************************************************************************************/
    //******** ShowTasks
    /************************************************************************************/
    private void ShowTasks()
    {
        if (searchTypeValue == null || searchTypeValue.Length == 0)
        {
            AlertBtn("Please select search type first.", "Warning");
            return;
        }
        if (State.dataFile == null) return;

        List<SuttaInfo> listSuttaInfo = State.dataFile.GetSuttaList(searchTypeValue, pattern, userClass);
        totalCount = State.dataFile.GetSearchResultCount();

        TaskInfoRecords = new List<TaskInfo>();
        //showNextButton = "none";
        if (totalCount == 0)
            AlertBtn(String.Format("No tasks found for {0}.", userName), "Alert");

        int n = 0;
        List<TaskInfo> listTaskInfo = new List<TaskInfo>();
        foreach (SuttaInfo suttaInfo in listSuttaInfo)
        {
            listTaskInfo.Add(new TaskInfo()
                {
                    SrNo = listTaskInfo.Count + 1,
                    DocNo = suttaInfo.RowKey,
                    DocTitle = suttaInfo.Title,
                    Pages = String.Format("{0}-{1} ({2})", suttaInfo.StartPage, suttaInfo.EndPage, suttaInfo.EndPage - suttaInfo.StartPage + 1),
                    PagesSubmitted = suttaInfo.PagesSubmitted,
                    Status = suttaInfo.Status,
                    Team = suttaInfo.Team
                });
        }

        TaskInfoRecords = listTaskInfo;
        idxTaskRowSelect = -1;
        idxTaskAssignmentRowSelect = -1;
        hideButton = true;
        TaskDetailedInfoRecords = new List<TaskDetailedInfo>();
        if (TaskInfoRecords.Count < totalCount)
        {
            int remainingCount = totalCount - TaskDetailedInfoRecords.Count;
            if (remainingCount >= 10) nextCount = 10;
            else nextCount = remainingCount;
            showNextButton = "block";
        }
        else showNextButton = "none";
    }
    private void ShowNextTasks()
    {
        List<SuttaInfo> listSuttaInfo = State.dataFile.GetNextBatchSearchedSuttas();
        List<TaskInfo> listTaskInfo = TaskInfoRecords.ToList();

        foreach (SuttaInfo suttaInfo in listSuttaInfo)
        {
            listTaskInfo.Add(new TaskInfo()
                {
                    SrNo = listTaskInfo.Count + 1,
                    DocNo = suttaInfo.RowKey,
                    DocTitle = suttaInfo.Title,
                    Pages = String.Format("{0}-{1} ({2})", suttaInfo.StartPage, suttaInfo.EndPage, suttaInfo.EndPage - suttaInfo.StartPage + 1),
                    //Pages = suttaInfo.EndPage - suttaInfo.StartPage + 1,
                    PagesSubmitted = suttaInfo.PagesSubmitted,
                    Status = suttaInfo.Status,
                    Team = suttaInfo.Team
                });
        }
        TaskInfoRecords = listTaskInfo;
        if (TaskInfoRecords.Count < totalCount)
        {
            int remainingCount = totalCount - TaskInfoRecords.Count;
            if (remainingCount >= 10) nextCount = 10;
            else nextCount = remainingCount;
            showNextButton = "block";
        }
        else showNextButton = "none";
    }
    private void OnImportData()
    {
        if (idxTaskRowSelect == -1 || TaskDetailedInfoRecords.Count == 0)
        {
            AlertBtn("No task has been selected.", "Error");
            return;
        }
        string errMsg = "";
        // check if the user is allowed to import data at this point
        var taskList = (from item in TaskDetailedInfoRecords
                        where item.UserID == email
                        select item).ToList();
        if (taskList.Count > 0)
        {
            if (taskList[0].Status == "Created") errMsg = "You are not assigned to import data.";
            if (taskList[0].Status == "Not Ready") errMsg = "You are not ready to import data yet.";
            if (taskList[0].Status == "Completed" || taskList[0].Status == "Uploaded") 
                errMsg = "You have completed data import.";
            if (errMsg.Length > 0)
            {
                AlertBtn(errMsg, "Alert"); 
                return;
            }
        }
        else
        {
            errMsg = "You currently have no assigned task to import data.";
            AlertBtn(errMsg, "Notice"); 
            return;
        }
        State.dataFile.AddDocNoToRecent();
        if (rowSelectedTaskInfo != null)
        {
            State.dataFile.DocID = State.doc_ID = rowSelectedTaskInfo.DocNo;
            State.doc_Title = rowSelectedTaskInfo.DocTitle;
        }
        //State.doc_Title = TaskInfoRecords[idxTaskRowSelect].DocTitle;
        State.page_No = GetTaskStartPageNo();
        AlertBtn("Click \"Choose File\" and import data.", "Alert");
        State.screenID = 5; // screenID to Open file for import on MainPage.
        SaveUserTaskInfoInState();
        NavManager.NavigateTo(String.Format("/nissayaeditor/{0}/{1}/{2}", email, userName, userClass));
    }
    private void OnRetrieveData()
    {
        if (idxTaskRowSelect == -1 || TaskDetailedInfoRecords.Count == 0)
        {
            AlertBtn("No task has been selected.", "Error");
            return;
        }
        // check if the user is allowed to import data at this point
        var taskList = (from item in TaskDetailedInfoRecords
                        where item.UserID == email
                        select item).ToList();
        if (taskList.Count > 0)
        {
            string errMsg = "";
            if (taskList[0].Status == "Not Ready") errMsg = "You are not ready to retrieve data yet.";
            if (errMsg.Length > 0)
            {
                AlertBtn(errMsg, "Alert"); return;
            }
        }
        //State.dataFile.DocID = TaskInfoRecords[idxTaskRowSelect].DocNo;
        if (rowSelectedTaskInfo.PagesSubmitted == 0 && rowSelectedTaskInfo.Status == "Assigned")
        {
            AlertBtn(String.Format("The data for {0} has never been saved on the server", rowSelectedTaskInfo.DocNo), "Retrieve Doc");
            return;
        }
        if (rowSelectedTaskInfo != null)
        {
            State.dataFile.DocID = State.doc_ID = rowSelectedTaskInfo.DocNo;
            State.doc_Title = rowSelectedTaskInfo.DocTitle;
        }
        State.dataFile.AddDocNoToRecent();
        State.screenID = 6; // screenID to Retrieve doc from server on MainPage.
        //State.doc_ID = TaskInfoRecords[idxTaskRowSelect].DocNo;
        //State.doc_Title = TaskInfoRecords[idxTaskRowSelect].DocTitle;
        // the following data will be used in DataFile::LogTaskStartDate()
        State.UserTaskInfo.Add(email + "-Task", taskList[0].Task);
        string pages = "0";
        string[] f = taskList[0].NoPages.Split(' ');
        if (f.Length == 2) pages = f[1].Replace("(", "").Replace(")", "");
        State.UserTaskInfo.Add(email + "-NoPages", pages);
        string msg = String.Format("Please confirm to retrieve {0} document from the server", State.doc_ID);
        string warn = "Retrieve Doc";
        ConfirmBtn(msg, warn, ProceedAfterConfirmation);

    }
    string GetTaskStartPageNo()
    {
        string pgno = "";
        if (TaskDetailedInfoRecords.Count > 0)
        {
            pgno = TaskDetailedInfoRecords[0].NoPages.Split('-')[0];
        }
        return pgno;
    }
    private void ProceedAfterConfirmation(bool flag)
    {
        if (flag) 
        {
            SaveUserTaskInfoInState();
            NavManager.NavigateTo(String.Format("/nissayaeditor/{0}/{1}/{2}", email, userName, userClass));
        }
    }
    private async Task ConfirmBtn(string msg, string warn, Action<bool>? callback = null)
    {
        var result = await DialogService.ConfirmAsync(msg, warn, new DialogOptions()
            {
                PrimaryButtonOptions = new DialogButtonOptions() {  }
            });
            bool res = (bool)result;
            ProceedAfterConfirmation(res);
    }
    private void SaveUserTaskInfoInState()
    {
        // idxTaskRowSelect = -1;
        // idxTaskAssignmentRowSelect = -1;
        // pass user task info via State.UserTaskInfo dictionary
        // find the user in the list
        var userTaskList = (from item in TaskDetailedInfoRecords
                            where item.UserName == userName
                            select item).ToList();
        if (userTaskList.Count > 0)
        {
            State.UserTaskInfo[email + "-UserName"] = userTaskList[0].UserName;
            State.UserTaskInfo[email + "-Task"] = userTaskList[0].Task;
        }

    }
    //********************************
    //******** RowSelectHandler()
    //********************************
    public void RowSelectHandler(RowSelectEventArgs<TaskInfo> args)
    {
        if (State.dataFile == null) return;
        rowSelectedTaskInfo = args.Data;
        TaskInfo taskInfo = args.Data;
        idxTaskRowSelect = args.RowIndex;
        //TaskInfo taskInfo = listTaskInfo[taskInfo.SrNo];
        TaskAssignmentInfo taskAssignmentInfo = State.dataFile.GetTaskAssignmentInfo(taskInfo.DocNo);
        if (taskAssignmentInfo.LastDate.Length > 0) 
        {
            string[] dd = taskAssignmentInfo.LastDate.Split('/');
            DateValue = new DateTime(Int32.Parse(dd[2]), Int32.Parse(dd[1]), Int32.Parse(dd[0]));
        }
        List<TaskDetailedInfo> taskDetailedInfo = new List<TaskDetailedInfo>();
        string[] f = taskAssignmentInfo.AssigneeProgress.Split('|');
        //**********************************************************/
        //**** Parse Assignee Progress using Json Method ***********/
        var listUserTaskInfo = JsonConvert.DeserializeObject<List<UserTaskProgressInfo>>(taskAssignmentInfo.AssigneeProgress);
        //**********************************************************/
        int reviewNo = 0; string status = "";
        int n = 0;
        string prevStatus = "";
        int correctionCount = 0;
        overdueLabel = "";
        overdueDay = "";
        foreach (UserTaskProgressInfo t in listUserTaskInfo)
        {
            status = State.dataFile.GetTaskStatus(taskAssignmentInfo, t);
            if (status == "Review") status = String.Format("Review{0}", ++reviewNo);
            if (status == "Assigned")
            {
                // if not row 0, if the task has not started yet and prev task is 'Completed' or 'Created'
                // the current task is Ready to work on
                // if (++n >= 1 && t.startDate.Length == 0 && (prevStatus == "Completed" || prevStatus == "Created"))
                if (++n >= 1 && t.lastDate.Length == 0 && (prevStatus == "Completed" || prevStatus == "Created"))
                {
                    status = "Ready";
                }
                else status = "Not Ready";
            }
            taskDetailedInfo.Add(new TaskDetailedInfo()
                {
                    SrNo = taskDetailedInfo.Count + 1,
                    DocNo = taskInfo.DocNo,
                    UserID = t.userID,
                    UserName = State.dataFile.GetUserName(t.userID),
                    NoPages = taskAssignmentInfo.PageNos,
                    Task = t.task,
                    StartDate = t.startDate,
                    LastUpdate = t.lastDate,
                    PagesSubmitted = t.submitted,
                    CorrectionCount = t.corrections,
                    Status = status
                });
            correctionCount += t.corrections;
            prevStatus = status;
        }
        // retrieve SuttaInfo to get page numbers
        SourceBookLabel = "Source Book : ";
        sourcePDF = State.dataFile.GetSourceBook(taskInfo.DocNo);
        taskDetailedInfo[0].LastUpdate = taskAssignmentInfo.LastDate;
        taskDetailedInfo[0].PagesSubmitted = null;
        taskDetailedInfo[0].CorrectionCount = (correctionCount > 0) ? correctionCount : null;
        TaskDetailedInfoRecords = taskDetailedInfo;
        CalculateDaysFromDueDate();
        hideButton = false;

        ClientCorrectionLog clientCorrectionLog = State.dataFile.GetClientCorrectionLog();
        List<CorrectionInfo> corrections = new List<CorrectionInfo>();
        List<CorrectionLog> correctionLog = new List<CorrectionLog>();
        CorrectionInfoRecords.Clear();
        if (clientCorrectionLog != null)
        {
            correctionLog = clientCorrectionLog.QueryCorrections(taskInfo.DocNo);
            if (correctionLog != null)
            {
                int srno = 0;
                foreach(CorrectionLog item in correctionLog)
                {
                    corrections.Add(new CorrectionInfo()
                    {
                        SrNo = ++srno,
                        DocNo = taskInfo.DocNo,
                        AssignedTo = State.dataFile.GetUserName(item.UserID),
                        Task = item.Task,
                        PageNo = item.PageNo,
                        NISField = item.NISRec,
                        BeforeEdit = item.OrigText,
                        AfterEdit = item.EditedText,
                        //Date = item.Timestamp.ToString("d'/'M'/'yyyy")
                    });
                }
                CorrectionInfoRecords = corrections;
                nCorrections = corrections.Count;
            }
        }
        beforeEdit = "";
        afterEdit = "";
    }
    void CalculateDaysFromDueDate()
    {
        if (TaskDetailedInfoRecords.Count == 0 || TaskDetailedInfoRecords[0].LastUpdate.Length == 0) return;
        DateTime? dt1 = null, dt2 = null;
        int days = 0;
        string[] f1 = TaskDetailedInfoRecords[0].LastUpdate.Split("/");
        if (f1.Length == 3)
        {
            dt1 = new DateTime(Int32.Parse(f1[2]), Int32.Parse(f1[1]), Int32.Parse(f1[0]), 0, 0, 0);
        }
        TaskDetailedInfo lastTaskDetailedInfo = TaskDetailedInfoRecords[TaskDetailedInfoRecords.Count - 1];
        if (lastTaskDetailedInfo.Status == "Completed")
        {
            string[] f2 = lastTaskDetailedInfo.LastUpdate.Split("/");
            dt2 = new DateTime(Int32.Parse(f2[2]), Int32.Parse(f2[1]), Int32.Parse(f2[0]), 0, 0, 0);
        }
        else 
        {
            dt2 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        }
        if (dt1 != null && dt2 != null)
        {
            if (dt2 < dt1)
            {
                days = (int)((DateTime)dt1 - (DateTime)dt2).TotalDays;
                overdueLabel = "Days to due date : ";
                overdueDay = String.Format("{0}", days);
            }
            else
            {
                days = (int)((DateTime)dt2 - (DateTime)dt1).TotalDays;
                overdueLabel = "Days past due date : ";
                overdueDay = String.Format("{0}{1}", (days > 0) ? "+" : "", days);
            }
        }
        return;
    }
    //********************************
    //******** RowSelectHandlerTaskAssignment()
    //********************************
    public void RowSelectHandlerTaskAssignment(RowSelectEventArgs<TaskDetailedInfo> args)
    {
        if (State.dataFile == null) return;
        TaskDetailedInfo taskDetailedInfo = args.Data;
        idxTaskAssignmentRowSelect = args.RowIndex;
    }
    public void RowSelectHandlerCorrectionGrid(RowSelectEventArgs<CorrectionInfo> args)
    {
        CorrectionInfo correctionInfo = args.Data;
        beforeEdit = correctionInfo.BeforeEdit;
        afterEdit = correctionInfo.AfterEdit;
    }
}