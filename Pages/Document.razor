@page "/document/{email}/{userName}/{userClass}"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Diagnostics;

@inject SfDialogService DialogService
@inject NavigationManager NavManager
@inject State State

@namespace NissayaEditor_Web.Data
@using Tipitaka_DBTables
@using Tipitaka_DB

@* *************************************************************************** *@
@* ********************* Entry Point to TaskAssignments ********************** *@
@* *************************************************************************** *@
@code {
    [Parameter]
    public string email { get; set; } = "";
    [Parameter]
    public string userName { get; set; } = "";
    [Parameter]
    public string userClass { get; set; } = "";

    // **************************************************
    // *** class ImportDocInfo
    // **************************************************
    public class ImportDocInfo()
    {
        public int srNo { get; set; }
        public string docNo { get; set; }
        public string docTitle { get; set; }
        public string startPage { get; set; }
        public string endPage { get; set; }
        public string sourceFileCode { get; set; }
        public string status { get; set; }
        public ImportDocInfo(ImportDocInfo d) : this()
        {
            this.srNo = d.srNo; this.docNo = d.docNo; this.docTitle = d.docTitle;
            this.startPage = d.startPage; this.endPage = d.endPage; 
            this.sourceFileCode = d.sourceFileCode; this.status = d.status;
        }
    };
    protected override async Task OnInitializedAsync()
    {
        while (State.dataFile == null) await Task.Delay(100);
        State.dataFile.GetSourceBookInfo();
        LoadRequiredData();
        // for testing
        // await AdminWork();
    }
    //***********************************************************************
    //*** DisplaySpinner(bool) - turns on Sfspinner on/off
    //***********************************************************************
    private async Task DisplaySpinner(bool isVisible)
    {
        VisibleSpinner = isVisible; // Set to true to make the spinner visible
        StateHasChanged(); // Update the UI
        // Introduce a delay
        await Task.Delay(100);
    }
}

@* https://stackoverflow.com/questions/70509410/how-to-specify-where-html-goes-in-a-blazor-component *@

@*****************************************************************************@
@****************************** Base Document  *******************************@
@*****************************************************************************@
<Administration componentName="Documents" email=@email userName=@userName userClass=@userClass flex_width="1000px">
    <adminMenuItem>Documents</adminMenuItem>
</Administration>

<div>
    <div style="width:200px" class="form-group col-md-2 column">
        <label class="col-form-label">Search Type</label>
        <SfDropDownList TValue="string" TItem="DataItem" @bind-Value="searchTypeValue"
                        MultiSelectMode="None" PopupHeight="335px" DataSource="@searchTypes">
            <DropDownListEvents TItem="DataItem" TValue="string" ValueChange="@SearhTypeValueChangeHandler"></DropDownListEvents>
            <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div style="width:200px" class="form-group col-md-2 column">
        <label class="col-form-label">Search Text</label>
        <SfTextBox TValue="string" @bind-Value="@pattern"></SfTextBox>
        @* <input type="search" id="doc_no" @bind-value="searchDocNo"><br> *@
        @* <input class="col-form-label" type="search" @bind="pattern" /><br/> *@
    </div>
</div>
<br />
<div style="width:180px;height:32px; padding-top:23px; padding-left:11px" class="form-group col-md-2 column">
    <SfButton IsPrimary="true" OnClick="@ShowDocs"> Show Documents </SfButton>
</div>
<div style="width:180px;height:32px; padding-top:23px; padding-left:11px" class=" form-group col-md-2 column">
    <SfButton CssClass="e-custom" OnClick="@ShowNextDocs"> Show Next @nextCount </SfButton>
</div>
<br /><br />
<label style="margin-left:380px;width:200px;text-align: right;"><strong>Total: </strong>@totalCount</label>
<br />
@*******************************************************************************@
@****************************** Document DataGrid ******************************@
@*******************************************************************************@
<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@DocDisplayRecords" @ref="sfgrid" AllowPaging="false" AllowFiltering="true" 
        AllowReordering="true" AllowResizing="true" AllowExcelExport="true" AllowSelection="true"
        AllowSorting="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Reset","ExcelExport", "Search" })"
            AllowTextWrap="false" Height="450" Width="1000">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog='true'
                          NewRowPosition="NewRowPosition.Bottom" Mode="Syncfusion.Blazor.Grids.EditMode.Normal" Dialog="DialogParams">
        </GridEditSettings>
        @* <GridPageSettings PageSize="10"></GridPageSettings> *@
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
        <GridEvents RowSelected="RowSelectHandler" TValue="DocInfo" OnToolbarClick="ToolbarClick" OnActionBegin="ActionBeginUser" OnActionComplete="ActionCompleteUser"></GridEvents>
        @* <GridEvents OnActionBegin="ActionBeginUser" OnActionComplete="ActionCompleteUser" OnToolbarClick="ToolbarClick" TValue="DocInfo"></GridEvents> *@
        <GridColumns>
            <GridColumn Field=@nameof(DocInfo.srNo) HeaderText="Sr No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                IsPrimaryKey="true" AllowEditing="false" Width="7%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.docNo) HeaderText="Doc No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                AllowEditing="false" Width="12%" Type="ColumnType.String" TextAlign="TextAlign.Left"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.docTitle) HeaderText="Title" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                TextAlign="TextAlign.Left" AllowEditing="false" Width="30%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.pages) HeaderText="Pages" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                TextAlign="TextAlign.Center" AllowEditing="false" Width="10%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.pagesSubmitted) HeaderText="Submitted" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                AllowEditing="false" Width="10%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.status) HeaderText="Status" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                TextAlign="TextAlign.Center" AllowEditing="false" Width="9%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.team) HeaderText="Team" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                TextAlign="TextAlign.Left" AllowEditing="false" Type="ColumnType.String"></GridColumn>
        </GridColumns>
        <SfSpinner Type=SpinnerType.Bootstrap4 @bind-Visible="@VisibleSpinner">
        </SfSpinner>
    </SfGrid>
</div>
<br />
<label><strong>Title : </strong>@docTitle</label>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp
<labael><strong>SubTitle : </strong>@docSubTitle</labael>
<br />
<label><strong>Doc No : </strong>@docNo</label>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp
<label><strong>Pages : </strong>@pages</label>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp
<labael><strong>Total Pages : </strong>@nPages.ToString()</labael>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp
<labael><strong>Pages Submitted : </strong>@sPages.ToString()</labael>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp
<labael><strong>Status : </strong>@status</labael>
<br />
<labael><strong>Team Members : </strong>@teamMembers</labael>
<br/>
<labael><strong>Source Book : </strong>@sourceBookPDF</labael>
<br /><br />

@* *************************************************************************** *@
@* ************************* New doc info SfDialog *************************** *@
@* *************************************************************************** *@
<div>
    <SfDialog Width="600px" MinHeight="495px" ShowCloseIcon="false" IsModal="true" @bind-Visible="@IsVisible_NewDocInfo">
        <DialogTemplates>
            <Header> Enter new document information </Header>
            <Content>
                <div>
                    <label style="padding:10px"><strong>Doc No:</strong>&nbsp;&nbsp; @formattedDocNo</label>
                </div>
                <div class="form-row">
                    <div class="column-dialog left-dialog">
                        <SfDropDownList TValue="string" TItem="DataItem" @ref=docTypeDropdown MultiSelectMode="None" PopupHeight="180px"
                                        Placeholder="Doc type" @bind-Value="@docType_DropDownValue" DataSource="@listDocTypes">
                            <DropDownListEvents TItem="DataItem" TValue="string" ValueChange="@docTypeValueChangeHandler"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                    <div class="column-dialog middle-dialog">
                        <SfComboBox TValue="string" TItem="DataItem" @ref=docSubTypeCombo @bind-Value="@docSubType_DropDownValue"
                                    DataSource="@listDocSubTypes" Placeholder="Doc subtype">
                            <ComboBoxEvents TItem="DataItem" TValue="string" ValueChange="@docSubTypeValueChangeHandler"></ComboBoxEvents>
                            <ComboBoxFieldSettings Text="Text" Value="ID"></ComboBoxFieldSettings>
                        </SfComboBox>
                    </div>
                    <div class="column-dialog right-dialog">
                        <SfTextBox ID="docno" Input="@docNoValueChangedHandler" @bind-Value="@doc_No" Placeholder="Number code, e.g 10.1"></SfTextBox>
                    </div>
                </div>

                <div class="form-row">
                    <div class="column-dialog form-group col-md-12">
                        <SfTextBox ID="newDoc" Input="@InputHandler_NewDocInfo" @bind-Value="@doc_Title" Placeholder="ခေါင်းစဉ်ရိုက်ရန်"></SfTextBox>
                    </div>
                </div>
                <div class="form-row">
                    <div class="column-dialog form-group col-md-12">
                        <SfTextBox ID="newDoc" Input="@InputHandler_NewDocInfo" @bind-Value="@doc_SubTitle" Placeholder="ခေါင်းစဉ်ခွဲရိုက်ရန်"></SfTextBox>
                    </div>
                </div>
                <div class="form-row">
                    <div class="column-dialog form-group col-md-12">
                        <SfDropDownList TValue="string" TItem="DataItem" @ref=srcPDFDropdown PopupHeight="300px"
                                        Placeholder="Select PDF file" @bind-Value="@PDF_DropDownValue" DataSource="@listPDFItems">
                            <DropDownListEvents TItem="DataItem" TValue="string" ValueChange="@PDFValueChangeHandler"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="form-row">
                    <div class="column-dialog left-col2-dialog">
                        <SfNumericTextBox TValue="int?" ShowSpinButton="false" @bind-Value="@startPage" @onkeypress="@(() => @ErrMsgNewDocInfo = "")" Placeholder="Start page" Format="###"></SfNumericTextBox>
                    </div>
                    <div class="column-dialog right-col2-dialog">
                        <SfNumericTextBox TValue="int?" ShowSpinButton="false" @bind-Value="@endPage" @onkeypress="@(() => @ErrMsgNewDocInfo = "")" Placeholder="End page" Format="###"></SfNumericTextBox>
                    </div>
                </div>

                <br />
                <div>
                    <p style="padding: 10px;color:brown">@ErrMsgNewDocInfo</p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton style="width:75px" Content="Cancel" OnClick="@onCancelNewDoc" />
            <DialogButton style="width:75px" Content="Ok" IsPrimary="true" OnClick="@onOKNewDoc" />
        </DialogButtons>
    </SfDialog>
</div>

@* <SfButton OnClick="@FileUploadBrowser"> Upload New Doc Info From File </SfButton> *@
<button OnClick="document.getElementById('fileUpload').click();"> Upload New Doc Info From File </button>
<InputFile id="fileUpload" style="display: none;" OnChange="@OnFileUpload" />
<br />
@* https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfUploader.html *@
<div hidden="@hideFileUpload">
    @* <SfUploader AutoUpload="true">
        <UploaderEvents ValueChange="@OnFileUpload"></UploaderEvents>
    </SfUploader> *@
</div>

<div>
    @********************************************************************************************************************************************@
    @************************** Import document status form ****************************@
    @********************************************************************************************************************************************@
    <SfDialog Width="1000px" MinHeight="640px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsImportFormVisible">
        <DialogTemplates>
            <Header> Import Document List </Header>
            <Content>
                <label style="font-size:16px; text-align:center; width:100%;">@labelOkImport (@okCount)&nbsp&nbsp&nbsp&nbsp&nbspErr (@errCount)&nbsp&nbsp&nbsp&nbsp&nbspTotal (@ImportDocDisplayRecords.Count)&nbsp&nbsp&nbsp @importLabel</label>
                <SfGrid ID="ImportSFGrid" DataSource="@ImportDocDisplayRecords" @ref="sfgrid1" AllowPaging="false" AllowFiltering="false" 
                    AllowReordering="true" AllowResizing="true" AllowExcelExport="true" AllowSelection="true"
                    AllowSorting="false" AllowTextWrap="false" Height="450" Width="950">
                    <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false" ShowDeleteConfirmDialog='false'
                                      NewRowPosition="NewRowPosition.Bottom" Mode="Syncfusion.Blazor.Grids.EditMode.Normal" Dialog="DialogParams">
                    </GridEditSettings>
                    <GridEvents OnActionComplete="ActionCompleteImportFile" TValue="ImportDocInfo"></GridEvents>
                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(ImportDocInfo.srNo) HeaderText="Sr No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                            IsPrimaryKey="true" AllowEditing="false" Width="7%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>
                        <GridColumn Field=@nameof(ImportDocInfo.docNo) HeaderText="Doc No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                            AllowEditing="true" Width="18%" Type="ColumnType.String" TextAlign="TextAlign.Left"></GridColumn>
                        <GridColumn Field=@nameof(ImportDocInfo.docTitle) HeaderText="Title" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                            TextAlign="TextAlign.Left" AllowEditing="true" Width="35%" Type="ColumnType.String"></GridColumn>
                        <GridColumn Field=@nameof(ImportDocInfo.startPage) HeaderText="Start" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                            TextAlign="TextAlign.Center" AllowEditing="true" Width="6%" Type="ColumnType.String"></GridColumn>
                        <GridColumn Field=@nameof(ImportDocInfo.endPage) HeaderText="End" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                            TextAlign="TextAlign.Center" AllowEditing="true" Width="6%" Type="ColumnType.String"></GridColumn>
                        <GridColumn Field=@nameof(DocInfo.sourceFileCode) HeaderText="File ID" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                            AllowEditing="true" Width="8%" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
                        <GridColumn Field=@nameof(ImportDocInfo.status) HeaderText="Status" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" 
                            TextAlign="TextAlign.Center" AllowEditing="false" Type="ColumnType.String"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton style="width:75px;" Content="Import" IsPrimary="false" OnClick="@ImportDoc" />
            <DialogButton style="width:75px;" Content="Exit" IsPrimary="true" OnClick="@(() => IsImportFormVisible = false)" />
        </DialogButtons>
@*         <SfSpinner Type=SpinnerType.Bootstrap4 @bind-Visible="@VisibleSpinner">
        </SfSpinner> *@
    </SfDialog>
</div>


@************************* End of User Document DataGrid *************************@
<style>
    .e-headercell.e-attr1 {
        background: #e3e6e8;
    }
    .e-ddl.e-input-group.e-control-wrapper .e-input {
        font-size: 14px;
        background: #32a5ab;
        /* width:150px; */
    }
    .column {
        float: left;
        padding: 9px;
        width:250px;
        /* height: 530px; /* should be removed. only for demonstration */
    }
    .column-dialog {
        float: left;
        padding: 10px;
    }
    .left-dialog {
        width: 33%;
    }
    .middle-dialog {
        width: 33%;
    }
    .right-dialog {
        width: 33%;
    }
    .left-col2-dialog {
        width: 50%;
    }
    .right-col2-dialog {
        width: 50%;
    }
</style>
@******************************* SfComboBox styles ********************************@
<style>
    .e-ddl.e-input-group.e-control-wrapper .e-input {
        background: white;
    }
</style>
@******************************* SfButton styles ********************************@
<style>
    .e-custom {
        display: @showNextButton;
        /* border-radius: 25px; */
        height: 32px;
        width: 150px;
    }
</style>
@********************************** Grid styles **********************************@
<style>
    .e-grid {
        line-height: 20px;
    }

    .e-headercell.e-attr1 {
        background: #cfcfcf;
    }

    .e-grid .e-altrow {
        background-color: #F3F2F1;
    }

    .e-grid .e-rowcell.e-selectionbackground {
        background-color: lightsteelblue !important;
    }

    .e-grid tr.e-row:hover .e-rowcell:not(.e-cellselectionbackground):not(.e-active):not(.e-updatedtd):not(.e-indentcell) {
        border-block-color: black;
        border-block-start-color: black;
        /* border-bottom-color: black; */
    }
</style>
@****************************** End of Grid styles ******************************@
@code {
    string searchTypeValue = "";
    string searchType = "", pattern = "";
    string pages = "", docNo = "", docTitle = "", docSubTitle = "", status = "", teamMembers = "";
    string doc_Type = "", doc_SubType = "", doc_No = "", doc_Title = "", doc_SubTitle = "";
    string doc_TypeID = "", doc_SubTypeID = "", selected_PdfID = "", sourceBookPDF = "";
    string importLabel = "";
    string labelOkImport = "Ok";
    string ErrMsgNewDocInfo = "";
    int nextCount = 10, okCount = 0, errCount = 0;
    int nPages = 0, sPages = 0, totalCount = 0;
    List<int> SelectedRowIndexes { get; set; }
    bool hideFileUpload = true;
    string showNextButton = "none";
    bool IsVisible_NewDocInfo = false;
    bool IsImportFormVisible = false;
    bool VisibleSpinner = false;
    DocInfo DocInfoRec = new DocInfo();
    DocInfo? selectedRowDocInfo = null;
    SuttaInfo SuttaInfoRec = new SuttaInfo();
    SourceBookInfo? selectedSourceBookInfo = null;
    SfGrid<DocInfo>? sfgrid;
    SfGrid<ImportDocInfo>? sfgrid1;
    SfUploader UploadObj;
    /************************************************************************************/
    //******** New Doc Dialog
    /************************************************************************************/
    List<string> docTypes, docSubTypes;
    List<DataItem> listDocTypes = new List<DataItem>();
    List<DataItem> listPDFItems = new List<DataItem>();
    List<DataItem> listDocSubTypes = new List<DataItem>();
    List<DataItem> searchTypes = new List<DataItem>();

    //Dictionary<string, int> dictPDFPageCount = new Dictionary<string, int>();
    public SfDropDownList<string, DataItem> docTypeDropdown;
    public SfDropDownList<string, DataItem> srcPDFDropdown;
    public SfComboBox<string, DataItem> docSubTypeCombo;
    enum DocUserAction { View, Add, Edit, Delete, Reset };
    DocUserAction curDocUserAction  = DocUserAction.View;

    string PDF_DropDownValue = "";
    string docType_DropDownValue = "";
    string docSubType_DropDownValue = "";

    string formattedDocNo = "";
    string oldformattedDocNo = "";
    string selectedPDF = "";
    string loadedDocType = "";
    int selectedBookPages = 0;
    int? startPage = 0, endPage = 0;

    private DialogSettings DialogParams = new DialogSettings { Width = "600px", Height = "500px" };

    public class DocInfo()
    {
        public int srNo { get; set; }
        public string docNo { get; set; } = "";
        public string docTitle { get; set; } = "";
        public string sourceFileCode { get; set; } = "";
        public int startPage { get; set; }
        public int endPage { get; set; }
        public string pages { get; set; }
        public int pageCount { get; set; }
        public int pagesSubmitted { get; set; }
        public string lastUpdate { get; set; } = "";
        public string status { get; set; } = "";
        public string team { get; set; } = "";

        public void Init(int n, SuttaInfo suttaInfo)
        {
            this.srNo = n;
            this.docNo = suttaInfo.RowKey;
            this.docTitle = suttaInfo.Title;
            this.sourceFileCode = suttaInfo.BookID;
            this.startPage = suttaInfo.StartPage;
            this.endPage = suttaInfo.EndPage;
            this.pages = String.Format("{0}-{1} ({2})", suttaInfo.StartPage, suttaInfo.EndPage, suttaInfo.EndPage - suttaInfo.StartPage + 1);
            this.pageCount = suttaInfo.NoPages;
            this.pagesSubmitted = suttaInfo.PagesSubmitted;
            this.lastUpdate = "";// suttaInfo.Timestamp.To
            this.status = suttaInfo.Status;
            this.team = suttaInfo.Team;
        }
    }
    public class DataItem
    {
        public string ID { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }
    List<SuttaInfo> SuttaInfoRecords = new List<SuttaInfo>();
    List<DocInfo> DocDisplayRecords = new List<DocInfo>();
    List<DocInfo> SelectedDocRecords = new List<DocInfo>();
    List<ImportDocInfo> ImportDocDisplayRecords = new List<ImportDocInfo>();
    SortedDictionary<string, SourceBookInfo>? dictSourceBooks = null;
    /************************************************************************************/
    //******** Initialization
    /************************************************************************************/
    private void LoadRequiredData()
    {
        if (State.dataFile == null) return;
        var docTypes = State.dataFile.GetDocTypes();
        int id = 100;
        docTypes = State.dataFile.GetDocTypes();
        docSubTypes = State.dataFile.GetDocSubTypes();
        dictSourceBooks = State.dataFile.GetSourceBookInfo();

        foreach (var item in docTypes)
        {
            listDocTypes.Add(new DataItem()
                {
                    ID = item, //(id++).ToString(),
                    Text = item,
                });
        }
        id = 100;
        foreach (var item in docSubTypes)
        {
            listDocSubTypes.Add(new DataItem()
                {
                    ID = item, //(id++).ToString(),
                    Text = item,
                });
        }
        foreach (var item in dictSourceBooks.Values)
        {
            listPDFItems.Add(new DataItem()
                {
                    ID = item.RowKey,
                    Text = item.BookFilename,
                });
        }
        foreach (var item in State.dataFile.listDocSearchTypes)
        {
            if (item != TaskCategories._Recent_)
            {
                searchTypes.Add(new DataItem()
                {
                    ID = item,
                    Text = item
                });
            }
        }
    }
    /************************************************************************************/
    //******** New Doc Dialog button events
    /************************************************************************************/
    private void onOKNewDoc()
    {
        if (doc_Type.Length == 0)
        {
            ErrMsgNewDocInfo = String.Format("Doc type cannot be empty.");
            return;
        }
        if (doc_No.Length == 0)
        {
            ErrMsgNewDocInfo = String.Format("Number code cannot be empty.");
            return;
        }
        if (doc_No.Contains(doc_Type))
        {
            ErrMsgNewDocInfo = String.Format("Number code cannot include doc type {0} again. Example number codes: \"001\", \"14.01\" ", doc_Type);
            return;
        }        
        if (doc_No.Contains("-"))
        {
            ErrMsgNewDocInfo = "Number code cannot include '-'.";
            return;
        }
        if (doc_No.Contains(","))
        {
            ErrMsgNewDocInfo = "Number code cannot include ','.";
            return;
        }
        if (doc_Title.Length == 0)
        {
            ErrMsgNewDocInfo = String.Format("Title cannot be empty.");
            return;
        }
        if (selectedPDF.Length == 0)
        {
            ErrMsgNewDocInfo = String.Format("Source PDF file is not selected.");
            return;
        }
        if (endPage < startPage || startPage <= 0 || endPage <= 0 ||
            startPage > selectedBookPages || endPage > selectedBookPages)
        {
            ErrMsgNewDocInfo = String.Format("Given page(s) out of range of book's {0} pages.", selectedBookPages);
            return;
        }
        if (doc_SubType.Length > 0)
        {
            var item = (from n in listDocSubTypes
                        where n.Text == doc_SubType
                        select n).ToList();
            if (item.Count == 0)
            {
                listDocSubTypes.Add(new DataItem()
                    {
                        Text = doc_SubType,
                        ID = (100 + listDocSubTypes.Count).ToString()
                    });
                State.dataFile.AddDocSubType(doc_SubType);
            }
        }
        //
        // check if the new DocNo is already created on the server
        //
        if ((curDocUserAction == DocUserAction.Add || 
            (curDocUserAction == DocUserAction.Edit && oldformattedDocNo != formattedDocNo)) && 
            State.dataFile.DocAlreadyExists(formattedDocNo))
        {
            ErrMsgNewDocInfo = String.Format("{0} document already exists on the server.", formattedDocNo);
            return;
        }
        // check if State.dataFile is good
        if (State.dataFile == null) return;

        string docTitle_SubTitle = (doc_SubTitle.Length == 0) ? doc_Title : String.Format("{0}/{1}", doc_Title, doc_SubTitle);

        IsVisible_NewDocInfo = false;

        switch(curDocUserAction)
        {
            case DocUserAction.Edit:
                if (oldformattedDocNo != formattedDocNo)
                {
                    Doc_Delete(oldformattedDocNo);
                    Doc_Insert();
                }
                else
                    Doc_Edit();
                break;
            case DocUserAction.Add:
                Doc_Insert();
                break;
            case DocUserAction.Delete:
                // deletion actually done at ActionComplete
                break;
        }
        curDocUserAction = DocUserAction.View;
    }
    //********************************* Doc_Insert() *************************************/
    private void Doc_Insert()
    {
        //if (curDocUserAction != DocUserAction.Add || State.dataFile == null) return;

        // **************************************************
        // Add new doc to the display
        // **************************************************
        string docTitle_SubTitle = (doc_SubTitle.Length == 0) ? doc_Title : String.Format("{0}/{1}", doc_Title, doc_SubTitle);
        int? nPage = endPage - startPage + 1;
        string pageRange = String.Format("{0}-{1}", startPage, endPage);
        DocDisplayRecords.Clear();
        List<DocInfo> listDocInfoTmp = new List<DocInfo>();
        DocInfo docInfo = new DocInfo()
            {
                srNo = listDocInfoTmp.Count + 1,
                docNo = formattedDocNo,
                docTitle = docTitle_SubTitle,
                sourceFileCode = PDF_DropDownValue,
                pages = String.Format("{0} ({1})", pageRange, nPage),
                pageCount = (int)nPage,
                pagesSubmitted = 0,
                lastUpdate = "",
                status = "Created",
                team = userName,
            };
        listDocInfoTmp.Add(docInfo);            

        searchTypeValue = "New"; 
        searchTypeValue = searchTypes[0].Text;
        // **************************************************
        // Retrieve existing new docs and add to the display
        // **************************************************
        List<SuttaInfo> existingNewSuttaList = State.dataFile.GetSuttaList(searchTypes[0].ID, "", userClass);
        if (existingNewSuttaList != null && existingNewSuttaList.Count > 0)
        {
            foreach (SuttaInfo item in existingNewSuttaList)
            {
                SourceBookInfo? sourceBookInfo = State.dataFile.GetSourceBookInfo(item.BookID);

                docInfo = new DocInfo()
                    {
                        srNo = listDocInfoTmp.Count + 1,
                        docNo = item.RowKey,
                        docTitle = item.Title,
                        sourceFileCode = (sourceBookInfo != null) ? sourceBookInfo.BookFilename : "",
                        pages = String.Format("{0}-{1} ({2})", item.StartPage, item.EndPage, item.EndPage - item.StartPage + 1),
                        pageCount = (int)item.NoPages,
                        pagesSubmitted = item.PagesSubmitted,
                        lastUpdate = "",
                        status = item.Status,
                        team = item.Team,
                    };
                listDocInfoTmp.Add(docInfo);
            }
        }
        DocDisplayRecords = listDocInfoTmp; // assign new data to grid source DocDisplayRecords
        // **************************************************
        // Add doc info to SuttaInfo
        // **************************************************
        SuttaInfo suttaInfo = new SuttaInfo()
            {
                RowKey = formattedDocNo,
                Title = docTitle_SubTitle,
                BookID = PDF_DropDownValue,
                StartPage = (int)startPage,
                EndPage = (int)endPage,
                NoPages = (int)nPage,
                PagesSubmitted = 0,
                Status = "Created",
                Team = userName,
            };
        State.dataFile.AddNewSuttaInfo(new List<SuttaInfo>() { suttaInfo });
        if (State.dataFile.ErrMsg.Length > 0)
        {
            AlertBtn(State.dataFile.ErrMsg, "Error");
            return;
        }
        // **************************************************
        // Add doc info TaskAssignment
        // **************************************************
        // Dictionary<string, string> dictParameters = new Dictionary<string, string>();
        // dictParameters["Title_SubTitle"] = docTitle_SubTitle;
        // dictParameters["PageRange"] = pageRange;
        // dictParameters["NoPages"] = nPage.ToString();
        // AddTaskAssignment(dictParameters);

        string today = DateTime.Now.ToString("d'/'M'/'yyyy");
        // task progress info for the creator
        List<UserTaskProgressInfo> dictUserTaskProgressInfo = new List<UserTaskProgressInfo>()
        {
            new UserTaskProgressInfo()
            {
                userID = email,
                task = "NewDoc",
                startDate = today,
                lastDate = "",
                submitted = 0,
                corrections = 0,
                status = "Created",
            }
        };
        // define task assignment info
        TaskAssignmentInfo taskAssignmentInfo = new TaskAssignmentInfo()
            {
                RowKey = formattedDocNo,
                DocTitle = docTitle_SubTitle,
                PageNos = String.Format("{0} ({1})", pageRange, (int)nPage),
                PagesSubmitted = 0,
                AssigneeProgress = JsonConvert.SerializeObject(dictUserTaskProgressInfo),
                StartDate = today,
                LastDate = "",
                CorrectionCount = 0,
                Status = "Created",
            };
        State.dataFile.AddTaskAssignmentInfo(taskAssignmentInfo);
        if (State.dataFile.ErrMsg.Length > 0)
        {
            AlertBtn(State.dataFile.ErrMsg, "Error");
            return;
        }

        // **************************************************
        // Update SoucrceBookDocInfo
        // **************************************************
        Dictionary<string, List<string>> dictBookDocList = new Dictionary<string, List<string>>()
        {
            { PDF_DropDownValue, new List<string>(){ formattedDocNo } }
        };
        State.dataFile.UpdateSourceBookDocInfo(dictBookDocList);
        if (State.dataFile.ErrMsg.Length > 0)
        {
            AlertBtn(State.dataFile.ErrMsg, "Error"); 
            return;
        }
        State.dataFile.AddActivityLog(email, "NewDoc", formattedDocNo + " added.");
        State.dataFile.userClass = userClass;
        string desc = String.Format("New doc ({0}-{1}) added.", startPage, endPage);
        State.dataFile.AddTaskActivityLog(formattedDocNo, email, "Created", (int)(endPage - startPage + 1), 0, 0, desc);
    }
    //*********************************End of Doc_Insert ***************************************/

    //************************************** Doc_Edit() ****************************************/
    private void Doc_Edit()
    {
        if (State.dataFile == null) return;
        doc_No = (docNo.Contains("-")) ? docNo.Split("-")[1] : docNo;
        // doc_Title = docTitle;
        // doc_SubTitle = docSubTitle;
        docTitle = doc_Title;
        docSubTitle = doc_SubTitle;
        PDF_DropDownValue = selected_PdfID;
        //listPDFItems
        string title = doc_Title;
        if (doc_SubTitle.Length > 0) title += "/" + doc_SubTitle;
        // PDF_DropDownValue
        string status = "";
        if (selectedRowDocInfo != null) status = selectedRowDocInfo.status;
        if (status.Length == 0)
        {
            status = (selectedRowDocInfo.team.Length > 0) ? "Assigned" : "Created";
        }
        int pages = (int)(endPage - startPage + 1);
        SuttaInfo suttaInfo = new SuttaInfo()
        {
            RowKey = formattedDocNo,
            Title = title,
            StartPage = (int)startPage,
            EndPage = (int)endPage,
            NoPages = pages,
            PagesSubmitted = 0,
            Status = status,
            Team = (selectedRowDocInfo != null) ? selectedRowDocInfo.team : "",
            BookID = selected_PdfID
        };
        ClientSuttaInfo? clientSuttaInfo = State.dataFile.GetClientSuttaInfo();
        if (clientSuttaInfo != null)
        {
            clientSuttaInfo.UpdateSuttaInfo(suttaInfo);
            State.dataFile.AddTaskActivityLog(formattedDocNo, email, "Update", pages, 0, 0, "Doc updated.");
        }
        // update TaskAssignmentInfo
        ClientTaskAssignmentInfo? clientTaskAssignmentInfo = State.dataFile.GetClientTaskAssignmentInfo();
        if (clientTaskAssignmentInfo != null)
        {
            TaskAssignmentInfo? taskAssignmentInfo = clientTaskAssignmentInfo.GetTaskAssignmentInfo(formattedDocNo);
            if (taskAssignmentInfo != null)
            {
                taskAssignmentInfo.DocTitle = title;
                taskAssignmentInfo.PageNos = String.Format("{0}-{1} ({2})", startPage, endPage, endPage - startPage + 1);
                clientTaskAssignmentInfo.UpdateTaskAssignmentInfo(taskAssignmentInfo);
            }
        }
        ShowDocs();
    }

    //*********************************** End of Doc_Edit() ************************************/

    //************************************* Doc_Delete() ***************************************/
    private async Task Doc_Delete(string docNo_ToDelete)
    {
        if (State.dataFile == null) return;
        SuttaInfo? suttaInfo = await State.dataFile.GetSuttaInfoAsync(docNo_ToDelete);
        if (State.dataFile.ErrMsg.Length > 0)
        {
            AlertBtn(State.dataFile.ErrMsg, "Error");
            return;
        }
        // check if the DocNo is still in created status; if not cannot delete anymore
        await State.dataFile.RemoveSourceBookDocNo(selected_PdfID, docNo_ToDelete);
        await State.dataFile.RemoveSuttaInfoAsync(docNo_ToDelete);
        await State.dataFile.RemoveTaskAssignmentInfoAsync(docNo_ToDelete);
        await State.dataFile.RemoveTaskFromUsersAsync(docNo_ToDelete);
        var itemToRemove = DocDisplayRecords.FirstOrDefault(r => r.docNo == docNo_ToDelete);
        if (itemToRemove != null) DocDisplayRecords.Remove(itemToRemove);
    }
    //********************************* end of Doc_Delete() ***********************************/

    //*******************************************************************************/
    // SyncFusion Predefined dialogs
    //*******************************************************************************/
    private async Task AlertBtn(string msg, string warn)
    {
        await DialogService.AlertAsync(msg, warn, new DialogOptions()
            {
                PrimaryButtonOptions = new DialogButtonOptions() { Content = "Ok" }
            });
    }
    private async Task PromptBtn(string msg, string warn)
    {
        await DialogService.PromptAsync(msg, warn, new DialogOptions()
            {
               PrimaryButtonOptions = new DialogButtonOptions() { Content = "Ok" }

            });
    }
    private async Task<bool> ConfirmBtn(string msg, string title)
    {
        bool isConfirm = await DialogService.ConfirmAsync(msg, title);
        // string confirmMessage = isConfirm ? "confirmed" : "canceled";
        // this.DialogStatus = $"The user {confirmMessage} the dialog box."; 
        return isConfirm;
    }
    //
    //*******************************************************************************/

    private async Task AddNewDocToGrid(DocInfo docInfo, int rowIndex)
    {
        await sfgrid.AddRecordAsync(docInfo, rowIndex);
    }
    private async Task onCancelNewDoc()
    {
        ErrMsgNewDocInfo = String.Empty;
        // List<DocInfo> Rows = await sfgrid.GetCurrentViewRecords(); // returns the current view data 
        // if (Rows[selectedRowDocInfo.srNo - 1].srNo == selectedRowDocInfo.srNo) 
        // { 
        //     await sfgrid.SelectRow(selectedRowDocInfo.srNo); 
        // } 
        IsVisible_NewDocInfo = false;
    }
    private void docTypeValueChangeHandler(ChangeEventArgs<string, DataItem> args)
    {
        ErrMsgNewDocInfo = String.Empty;
        if (args != null && args.ItemData != null)
        {
            doc_Type = args.ItemData.Text;
        }
        formatDocNo();
    }
    private void docSubTypeValueChangeHandler(ChangeEventArgs<string, DataItem> args)
    {
        ErrMsgNewDocInfo = String.Empty;
        if (args.ItemData != null) doc_SubType = args.ItemData.Text; else doc_SubType = "";
        formatDocNo();
    }
    private void docNoValueChangedHandler(InputEventArgs args)
    {
        ErrMsgNewDocInfo = String.Empty;
        doc_No = args.Value;
        formatDocNo();
    }
    private void PDFValueChangeHandler(ChangeEventArgs<string, DataItem> args)
    {
        ErrMsgNewDocInfo = String.Empty;
        if (args == null || args.ItemData == null || args.Value == null) return;
        selectedPDF = args.ItemData.Text;
        if (selectedPDF.Length > 0 && dictSourceBooks.ContainsKey(args.Value))
        {
            selectedSourceBookInfo = dictSourceBooks[args.Value];
            selectedBookPages = selectedSourceBookInfo.Pages;
        }
        else
        {
            selectedSourceBookInfo = null;
            selectedBookPages = 0;
        }
    }
    private void InputHandler_NewDocInfo(InputEventArgs args)
    {
        ErrMsgNewDocInfo = String.Empty;
    }
    private void formatDocNo()
    {
        formattedDocNo = "";
        doc_Type = doc_Type.Trim();
        doc_SubType = doc_SubType.Trim();
        doc_No = doc_No.Trim();
        if (doc_Type != null && doc_Type.Length > 0) formattedDocNo = doc_Type;
        if (doc_SubType != null && doc_SubType.Length > 0) formattedDocNo += "." + doc_SubType;
        if (doc_No != null && doc_No.Length > 0) formattedDocNo += "-" + doc_No;
    }
    /************************************************************************************/
    //******** AddTaskAssignment
    /************************************************************************************/
    private TaskAssignmentInfo GetTaskAssignmentInfo(Dictionary<string, string> dictParameters)
    {
        string today = DateTime.Now.ToString("d'/'M'/'yyyy");
        string status = "Created";
        // task progress info for the creator
        List<UserTaskProgressInfo> dictUserTaskProgressInfo = new List<UserTaskProgressInfo>()
        {
            new UserTaskProgressInfo()
            {
                userID = email,
                author = email,
                task = "NewDoc",
                startDate = today,
                lastDate = "",
                submitted = 0,
                corrections = 0,
                status = "Created",
            }
        };
        // if task is already assigned, add AssignedUserTask
        if (dictParameters.ContainsKey("AssigneeUserID"))
        {
            string userID = dictParameters["AssigneeUserID"];
            if (userID.Length > 0)
            {
                status = "Assigned";
                dictUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                {
                    userID = userID,
                    task = "Edit-Upload",
                    startDate = "",
                    lastDate = "",
                    submitted = 0,
                    corrections = 0,
                    status = status,
                });
            }
        }
        // define task assignment info
        string pageRange = dictParameters.ContainsKey("PageRange") ? dictParameters["PageRange"] : "";
        string noPages = dictParameters.ContainsKey("NoPages") ? dictParameters["NoPages"] : "";

        TaskAssignmentInfo taskAssignmentInfo = new TaskAssignmentInfo()
            {
                RowKey = dictParameters.ContainsKey("DocNo") ? dictParameters["DocNo"] : "InvalidDocNo",
                DocTitle = dictParameters.ContainsKey("Title") ? dictParameters["Title"]  : "",
                PageNos = String.Format("{0} ({1})", pageRange, noPages),
                PagesSubmitted = 0,
                AssigneeProgress = JsonConvert.SerializeObject(dictUserTaskProgressInfo),
                StartDate = "",
                LastDate = "",
                CorrectionCount = 0,
                Status = status,
            };
        return taskAssignmentInfo;
    }
    /************************************************************************************/
    //******** New Doc Info upload from file
    /************************************************************************************/
    private void FileUploadBrowser()
    {
        hideFileUpload = false;
    }
    public static bool IsNumericUsingRegex(string input)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(input, @"^\d+$");
    }
    //******** Open file read in doc info and add to sfgrid file and update server table
    private async Task FillImportFiles(string[] importFileList)
    {
        string userID = "";
        string title = "";
        string bookID = "";
        string docNo = "";
        string status = "";
        string startPage = "";
        string endPage = "";
        int srNo = 0;
        okCount = errCount = 0;
        IsImportFormVisible = true;
        labelOkImport = "Ok";
        ImportDocDisplayRecords.Clear();
        DisplaySpinner(false);
        foreach(string rec in importFileList)
        {
            if (rec.Trim().Length == 0) continue;
            userID = "";
            title = bookID = docNo = status = "";
            startPage = endPage = "0";
            string[] f = rec.Trim().Split(',');
            if (f.Length >= 1) docNo = f[0].Trim();
            if (f.Length >= 2) title = f[1].Trim();
            if (f.Length >= 3 && IsNumericUsingRegex(f[2].Trim())) startPage = int.Parse(f[2].Trim()).ToString();
            if (f.Length >= 4 && IsNumericUsingRegex(f[3].Trim())) endPage = int.Parse(f[3].Trim()).ToString();
            if (f.Length >= 5) bookID = f[4].Trim();
            if (startPage == "0" || endPage == "0" || int.Parse(startPage) > int.Parse(endPage)) status = "Error";
            ImportDocInfo importDocInfo = new ImportDocInfo()
            {
                srNo = ++srNo,
                docNo = docNo,
                docTitle = title,
                startPage = startPage,
                endPage = endPage,
                sourceFileCode = bookID,
                status = status
            };
            importDocInfo.status = GetImportDocInfoStatus(importDocInfo);
            ImportDocDisplayRecords.Add(importDocInfo);
            if (importDocInfo.status == "Ok") ++okCount;
            if (importDocInfo.status.ToLower().Contains("error")) ++errCount;
        }
        // do StateHasChanged for importLabel to display correctly
        // StateHasChanged(); await Task.Delay(100);
        DisplayImportMessage("Ok", "");

    }
    private async Task ImportDoc()
    {
        if (State == null || State.dataFile == null) return;
        ClientSuttaInfo? clientSuttaInfo = State.dataFile.GetClientSuttaInfo();
        ClientTaskAssignmentInfo? clientTaskAssignmentInfo = State.dataFile.GetClientTaskAssignmentInfo();
        if (clientSuttaInfo == null || clientTaskAssignmentInfo == null) return;
        SuttaInfo suttaInfo;
        TaskAssignmentInfo taskAssignmentInfo;

        List<SuttaInfo> listSuttaInfo = new List<SuttaInfo>();
        List<Object> listSuttaInfoObj = new List<Object>();
        List<DocInfo> listDocInfo = new List<DocInfo>();
        List<TaskAssignmentInfo> listTaskAssignmentInfo = new List<TaskAssignmentInfo>();   // this is the list of docs to update
        List<Object> listTaskAssignmentInfoObj = new List<Object>();   // this is the list of docs to update
        Dictionary<string, string> dictDocStatus = new Dictionary<string, string>();
        string userName = State.dataFile.GetUserName(email);
        int sPage = -1, ePage = -1, srNo = 0;
        string status = "";
        var ImportDocDisplayRecordsCopy = new List<ImportDocInfo>(ImportDocDisplayRecords);
        await DisplaySpinner(true);
        // importLabel = "Importing ...";
        // StateHasChanged(); await Task.Delay(100);
        DisplayImportMessage("Ok", "Importing ...");
        foreach(ImportDocInfo importDocInfo in ImportDocDisplayRecordsCopy)
        {
            if (importDocInfo.status != "Ok") continue;
            var curSuttaInfo = await clientSuttaInfo.GetSuttaInfoAsync(importDocInfo.docNo);
            sPage = int.Parse(importDocInfo.startPage);
            ePage = int.Parse(importDocInfo.endPage);
            if (curSuttaInfo != null)
            {
                if (curSuttaInfo.Status != "Created" || curSuttaInfo.PagesSubmitted > 0)
                {
                    status = "Doc already started.";
                }
                else
                {
                    // existing docNo, update if necessary
                    if ((curSuttaInfo.Title != importDocInfo.docTitle || curSuttaInfo.BookID != importDocInfo.sourceFileCode ||
                        curSuttaInfo.StartPage != sPage || curSuttaInfo.EndPage != ePage) && curSuttaInfo.Status == "Created") 
                    {
                        status = "Existing doc updated.";
                        suttaInfo = new SuttaInfo()
                        {
                            RowKey = curSuttaInfo.RowKey,
                            Title = curSuttaInfo.Title,
                            BookID = curSuttaInfo.BookID,
                            StartPage = sPage,
                            EndPage = ePage,
                            NoPages = ePage - sPage + 1,
                            PagesSubmitted = 0,
                            Status = curSuttaInfo.Status,
                            Team = curSuttaInfo.Team
                        };
                        await clientSuttaInfo.UpdateSuttaInfoAsync(suttaInfo);
                    }
                    else
                    {
                        status = "Existing doc not updated.";
                    }
                }
            }
            else
            {
                // new docNo, just add
                string pageRange = String.Format("{0}-{1}", importDocInfo.startPage, importDocInfo.endPage);
                int pCount = ePage - sPage + 1;
                string team = "", taskStatus = "Created"; 
                status = "Imported";
                listSuttaInfoObj.Add((Object)new SuttaInfo()
                {
                    RowKey = importDocInfo.docNo,
                    Title = importDocInfo.docTitle,
                    BookID = importDocInfo.sourceFileCode,
                    StartPage = sPage,
                    EndPage = ePage,
                    NoPages = ePage - sPage + 1,
                    PagesSubmitted = 0,
                    Status = taskStatus,
                    Team = userName
                });
                // for the display
                listDocInfo.Add(new DocInfo()
                {
                    srNo = ++srNo,
                    docNo = importDocInfo.docNo,
                    docTitle = importDocInfo.docTitle,
                    sourceFileCode = importDocInfo.sourceFileCode,
                    startPage = sPage,
                    endPage = ePage,
                    pages = pageRange,
                    pageCount = pCount,
                    pagesSubmitted = 0,
                    lastUpdate = DateTime.Now.ToString(),
                    status = status,
                    team = team
                });
                List<UserTaskProgressInfo> dictUserTaskProgressInfo = new List<UserTaskProgressInfo>()
                {
                    new UserTaskProgressInfo()
                    {
                        userID = email,
                        author = email,
                        task = "NewDoc",
                        startDate = DateTime.Today.ToString("d'/'M'/'yyyy"),
                        lastDate = "",
                        submitted = 0,
                        corrections = 0,
                        status = taskStatus,
                    }
                };
                listTaskAssignmentInfoObj.Add((Object)new TaskAssignmentInfo()
                {
                    RowKey = importDocInfo.docNo,
                    DocTitle = importDocInfo.docTitle,
                    PageNos = String.Format("{0}-{1} ({2})", sPage, ePage, pCount),
                    PagesSubmitted = 0,
                    AssigneeProgress = JsonConvert.SerializeObject(dictUserTaskProgressInfo),
                    StartDate ="",
                    LastDate = "",
                    CorrectionCount = 0,
                    Status  = taskStatus
                });
            }

            dictDocStatus.Add(importDocInfo.docNo, status);
        }
        if (listSuttaInfoObj.Count > 0) await clientSuttaInfo.InsertBatch(listSuttaInfoObj);
        if (listTaskAssignmentInfoObj.Count > 0) await clientTaskAssignmentInfo.InsertBatch(listTaskAssignmentInfoObj);
        ImportDocDisplayRecordsCopy.Clear();
        foreach(var importDocInfo in ImportDocDisplayRecords)
        {
            ImportDocInfo newImportDocInfo = new ImportDocInfo(importDocInfo);
            if (dictDocStatus.ContainsKey(importDocInfo.docNo))
                newImportDocInfo.status = dictDocStatus[importDocInfo.docNo];
            ImportDocDisplayRecordsCopy.Add(newImportDocInfo);
        }
        ImportDocDisplayRecords = ImportDocDisplayRecordsCopy;
        await DisplaySpinner(false);
        okCount = (from item in ImportDocDisplayRecords
                   where item.status == "Imported"
                   select item).ToList().Count;
        errCount = (from item in ImportDocDisplayRecords
                    where item.status.ToLower().Contains("error")
                    select item).ToList().Count;
        await DisplayImportMessage("Imported", "");
        searchTypeValue = null;
        ShowDocs();
    }
    private async Task DisplayImportMessage(string lblOkImport, string labelProgress = "")
    {
        labelOkImport = lblOkImport; importLabel = labelProgress;
        StateHasChanged(); await Task.Delay(100);
    }
    private string GetImportDocInfoStatus(ImportDocInfo importDocInfo)
    {
        string[] docTypes = { "AN", "MN", "SN", "DN", "KN" };
        string status = "";
        string s = importDocInfo.docNo.Substring(0, 2);
        status = "DocNo format error.";
        if (s.Length == 0 || !docTypes.Contains(s) || (importDocInfo.docNo[2] != '-' && importDocInfo.docNo[2] != '.')) return status;
        if (importDocInfo.docNo[2] == '.' && importDocInfo.docNo.Substring(2, 6) != ".Tika-") return status;
        int st = int.Parse(importDocInfo.startPage);
        int en = int.Parse(importDocInfo.endPage);
        status = "Page number error.";
        if (st == -1 || en == -1 || st > en) return status;
        status = "Source file ID error";
        s = importDocInfo.sourceFileCode.Trim();
        if (s.Length == 0 || !docTypes.Contains(s.Substring(0, 2)) || s[2] != '-' || !IsNumericUsingRegex(s.Substring(3))) return status;
        status = "Ok";
        return status;
    }
    private async void OnFileUpload(InputFileChangeEventArgs args)
    {
        try
        {
            string fileName = "";
            //*************************************************/
            //*** Read from file                            ***/
            //*************************************************/
            var file = args.File;
            MemoryStream filestream = new MemoryStream();
            await file.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
            var buffer = new byte[filestream.Length];
            filestream.Read(buffer, 0, (int)filestream.Length);
            string fileContent = buffer.ToString();
            string status = "", team = "", userID = "";
            fileContent = System.Text.Encoding.UTF8.GetString(filestream.ToArray());
            filestream.Close();
            fileName = file.Name;
            // check if the file data is the right data
            if (fileContent.IndexOfAny(new char[] { '*', '^' }) != -1)
            {
                var msg = String.Format("{0} file is not in the required format. Import aborted.", fileName);
                AlertBtn(msg, "Error");
                return;
            }
            DisplaySpinner(true);
            string[] recs = fileContent.Split("\n");
            int sPage = 0, ePage = 0, pCount = 0;
            int n = 0, updateCount = 0, errorCount = 0, uidErrCount = 0;
            string docPages = "";
            SuttaInfo? curSuttaInfo = null;
            ClientSuttaInfo? clientSuttaInfo = State.dataFile.GetClientSuttaInfo();
            FillImportFiles(recs);
            DisplaySpinner(false);
            return;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private async void OnFileUpload1(InputFileChangeEventArgs args)
    {
        try
        {
            Dictionary<string, List<string>> dictBookDocList = new Dictionary<string, List<string>>();
            List<SuttaInfo> listSuttaInfo = new List<SuttaInfo>();
            List<DocInfo> listDocInfo = new List<DocInfo>();
            List<TaskAssignmentInfo> listTaskAssignmentInfo = new List<TaskAssignmentInfo>();
            Dictionary<string, string> dictParameters = new Dictionary<string, string>();
            List<SuttaInfo> listExistingDocs = new List<SuttaInfo>();
            List<SuttaInfo> listUpdateDocs = new List<SuttaInfo>();   // this is the list of docs to update
            List<string> listInvalidUserIDs = new List<string>();
            ClientTaskAssignmentInfo? clientTaskAssignmentInfo = State.dataFile.GetClientTaskAssignmentInfo();
            ClientKeyValueData? clientKeyValueData = State.dataFile.GetClientKeyValueData();
            if (State.dataFile != null) listExistingDocs = State.dataFile.GetSuttaList("All");
            DisplaySpinner(true);
            string fileName = "";
            bool invalidFileFormat = false;
            //IBrowseFile[] files = { args.File };
            //*************************************************/
            //*** Read from file                            ***/
            //*************************************************/
            var file = args.File;
            //
            // Import file format
            // ******************
            //
            // MN-001,မူလပရိယာယသုတ်,1,179,MN-01
            //
            // 1. DocId (e.g. MN-001)
            // 2. Doc Title (e.g. မူလပရိယာယသုတ်)
            // 3. StartPage (e.g. 1)
            // 4. EndPage (e.g. 179)
            // 5. PDF SourceFile Id (e.g. MN-01)
            // 6. Assignee Email (e.g. user1@gmail.com)
            //
            //foreach (var file in )
            {
                MemoryStream filestream = new MemoryStream();
                // await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                await file.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                var buffer = new byte[filestream.Length];
                filestream.Read(buffer, 0, (int)filestream.Length);
                string fileContent = buffer.ToString();
                string status = "", team = "", userID = "";
                fileContent = System.Text.Encoding.UTF8.GetString(filestream.ToArray());
                filestream.Close();
                fileName = file.Name;
                // check if the file data is the right data
                int charCount = fileContent.IndexOfAny( new char[] { '*', '^' });
                if (charCount != -1)
                {
                    invalidFileFormat = true; return;
                }
                string[] recs = fileContent.Split("\n");
                int sPage = 0, ePage = 0, pCount = 0;
                int n = 0, updateCount = 0, errorCount = 0, uidErrCount = 0; 
                string docPages = "";
                SuttaInfo? curSuttaInfo = null;
                ClientSuttaInfo?clientSuttaInfo = State.dataFile.GetClientSuttaInfo();
                FillImportFiles(recs);
                return;
                if (State.dataFile != null)
                {
                    string bookID = "";
                    string docNoTrimmed = "";
                    string title = "";
                    totalCount = 0;
                    bool autoUserTaskAssignment = false;
                    foreach (string rec in recs)
                    {
                        if (rec.Trim().Length == 0) continue;
                        userID = "";
                        string[] f = rec.Trim().Split(',');
                        title = f[1].Trim();
                        if (f.Length < 5 || f.Length > 6)
                        {
                            invalidFileFormat = true; break;
                        }
                        if (f.Length >= 5)
                        {
                            docNoTrimmed = f[0].Trim();
                            if (!Int32.TryParse(f[2], out sPage))
                            {
                                State.dataFile.AddActivityLog(email, "NewDoc", 
                                    String.Format("Page number error found in {0}.", rec.Trim()));
                                errorCount++; continue;
                            }
                            //sPage = Int32.Parse(f[2]);
                            if (!Int32.TryParse(f[3], out ePage))
                            {
                                State.dataFile.AddActivityLog(email, "NewDoc", 
                                    String.Format("Page number error found in {0}.", rec.Trim()));
                                errorCount++; continue;
                            }
                            if (sPage > ePage)
                            {
                                State.dataFile.AddActivityLog(email, "NewDoc", 
                                    String.Format("Error: Start page number greater than end page found in {0}.", rec.Trim()));
                                errorCount++; continue;
                            }
                            // ePage = Int32.Parse(f[3]);
                            bookID = f[4].Trim();
                            pCount = ePage - sPage + 1;
                            autoUserTaskAssignment = false;
                            if (f.Length == 6)
                            {
                                userID = f[5].Trim().ToLower();
                                string uName = State.dataFile.GetUserName(userID);
                                if (State.dataFile.GetUserName(userID).Length > 0)
                                {
                                    status = "Assigned";
                                    team = userName + ", " + State.dataFile.GetUserName(userID);
                                    autoUserTaskAssignment = true;
                                }
                                else listInvalidUserIDs.Add(userID);
                            }
                            if (!autoUserTaskAssignment)
                            {
                                status = "Created";
                                team = "";
                            }   
                        }
                        // check if docNo is an existing doc
                        var existingDoc = listExistingDocs.Where(r => r.RowKey == docNoTrimmed);
                        // **** Existing doc data collection
                        if (existingDoc.Count() > 0)
                        {
                            curSuttaInfo = existingDoc.First();
                            string uName = State.dataFile.GetUserName(userID);
                            bool flag = curSuttaInfo.Team.Contains(State.dataFile.GetUserName(userID));

                            if (curSuttaInfo.Title != title || curSuttaInfo.BookID != bookID || 
                                curSuttaInfo.StartPage != sPage || curSuttaInfo.EndPage != ePage || 
                                curSuttaInfo.NoPages != pCount || curSuttaInfo.Status != status || 
                                !curSuttaInfo.Team.Contains(State.dataFile.GetUserName(userID)) || 
                                (curSuttaInfo.Status == "Assigned" && status == "Created"))
                            {
                                curSuttaInfo.Title = title;
                                curSuttaInfo.BookID = bookID;
                                curSuttaInfo.StartPage = sPage;
                                curSuttaInfo.EndPage = ePage;
                                curSuttaInfo.NoPages= pCount;
                                curSuttaInfo.Status = status;
                                updateCount++;
                                string assigneeNames = "";
                                // update TaskAssignment if needed
                                if (autoUserTaskAssignment && clientTaskAssignmentInfo != null)
                                {
                                    TaskAssignmentInfo taskAssignmentInfo = clientTaskAssignmentInfo.GetTaskAssignmentInfo(curSuttaInfo.RowKey);
                                    if (taskAssignmentInfo != null)
                                    {
                                        taskAssignmentInfo.DocTitle = curSuttaInfo.Title;
                                        taskAssignmentInfo.PageNos = String.Format("{0}-{1} ({2})", 
                                            curSuttaInfo.StartPage, curSuttaInfo.EndPage, (curSuttaInfo.EndPage - curSuttaInfo.StartPage + 1));
                                        curSuttaInfo.PagesSubmitted = curSuttaInfo.PagesSubmitted;
                                        List<string> currentAssignedUserID = new List<string>();
                                        if (UpdateUserProgressInfo(taskAssignmentInfo, userID, out assigneeNames, currentAssignedUserID))
                                        {
                                            // update TaskAssignmentInfo
                                            clientTaskAssignmentInfo.UpdateTaskAssignmentInfo(taskAssignmentInfo);
                                        };
                                        // remove current assigned user from their assigned task list
                                        if (clientKeyValueData != null && currentAssignedUserID.Count > 0)
                                            clientKeyValueData.RemoveUserDocByCategory(currentAssignedUserID.ToArray(), TaskCategories._Assigned_, docNoTrimmed);
                                    }
                                    // **** create List<TaskAssignment> to update to the server
                                    dictParameters["AssigneeUserID"] = userID;
                                    dictParameters["DocNo"] = docNoTrimmed;
                                    dictParameters["Title"] = title;
                                    dictParameters["PageRange"] = String.Format("{0}-{1}", sPage, ePage);
                                    dictParameters["NoPages"] = (ePage - sPage + 1).ToString();
                                    listTaskAssignmentInfo.Add(GetTaskAssignmentInfo(dictParameters));
                                }
                                curSuttaInfo.Team = assigneeNames;
                                // update suttaInfo
                                if (clientSuttaInfo != null) 
                                    clientSuttaInfo.UpdateTableRec(curSuttaInfo).Wait();
                            }
                        }
                        // **** New doc data collection
                        // **** create new List<DocInfo> for grid display
                        if (existingDoc.Count() == 0)
                        {
                            string pageRange = String.Format("{0}-{1}", sPage, ePage);
                            listDocInfo.Add(new DocInfo()
                                {
                                    srNo = ++n,
                                    docNo = docNoTrimmed,
                                    docTitle = title,
                                    sourceFileCode = bookID,
                                    startPage = sPage,
                                    endPage = ePage,
                                    pages = pageRange,
                                    pageCount = pCount,
                                    pagesSubmitted = 0,
                                    lastUpdate = "",
                                    status = status,
                                    team = team
                                });
                            // **** create List<SuttaInfo> to update to the server
                            listSuttaInfo.Add(new SuttaInfo()
                                {
                                    RowKey = docNoTrimmed,
                                    Title = title,
                                    StartPage = sPage,
                                    EndPage = ePage,
                                    NoPages = pCount,
                                    PagesSubmitted = 0,
                                    Status = status,
                                    Team = team,
                                    BookID = bookID,
                                });
                            // **** create List<TaskAssignment> to update to the server
                            dictParameters["AssigneeUserID"] = f.Length == 6 ? userID : "";
                            dictParameters["DocNo"] = docNoTrimmed;
                            dictParameters["Title"] = title;
                            dictParameters["PageRange"] = pageRange;
                            dictParameters["NoPages"] = (ePage - sPage + 1).ToString();
                            listTaskAssignmentInfo.Add(GetTaskAssignmentInfo(dictParameters));
                            //*** docID:{pages} added to the Book info */
                            //docPages = String.Format("{0}:{1}", f[0], pCount);
                            //docPages = f[0];
                            if (dictBookDocList.ContainsKey(bookID))
                                dictBookDocList[bookID].Add(docNoTrimmed);
                            else
                                dictBookDocList.Add(bookID, new List<string>() { docNoTrimmed });
                        }
                        // end of new doc data collection
                        //
                    }
                    // update existing docs
                    totalCount += recs.Length;
                }
                //**************************************************/
                //**** get the existing new docs from the server
                //**************************************************/
                searchTypeValue = State.dataFile.listDocSearchTypes[1];
                List<SuttaInfo> listSuttaInfoExisting = State.dataFile.GetSuttaList(searchTypeValue, pattern);
                foreach (SuttaInfo suttaInfo in listSuttaInfoExisting)
                {
                    listDocInfo.Add(new DocInfo()
                        {
                            srNo = listDocInfo.Count + 1,
                            docNo = suttaInfo.RowKey,
                            docTitle = suttaInfo.Title,
                            sourceFileCode = suttaInfo.BookID,
                            startPage = suttaInfo.StartPage,
                            endPage = suttaInfo.EndPage,
                            pages = String.Format("{0}-{1}", suttaInfo.StartPage, suttaInfo.EndPage),
                            pageCount = suttaInfo.EndPage - suttaInfo.StartPage + 1,
                            pagesSubmitted = 0,
                            lastUpdate = "",
                            status = suttaInfo.Status,
                            team = ""
                        });
                }
                totalCount += listSuttaInfoExisting.Count;
                State.dataFile.AddNewSuttaInfo(listSuttaInfo);
                if (State.dataFile.ErrMsg.Length > 0)
                {
                    AlertBtn(State.dataFile.ErrMsg, "Error");
                }
                if (listInvalidUserIDs.Count > 0)
                {
                    string uids = String.Join(',', listInvalidUserIDs);
                    string msg = String.Format("{0} new docs added. {1} docs updated. {2} page number error(s) found with", listSuttaInfo.Count, updateCount, errorCount);
                    msg += String.Format(" invalid user IDs: {0}", uids);
                    State.dataFile.AddActivityLog(email, "NewDoc", msg);
                }
                else
                    State.dataFile.AddActivityLog(email, "NewDoc", 
                    String.Format("{0} new docs added. {1} docs updated. {2} page number error(s) found.", 
                    listSuttaInfo.Count, updateCount, errorCount));
                // string desc = String.Format("New doc ({0}-{1}) added.", startPage, endPage);
                // State.dataFile.AddTaskActivityLog(formattedDocNo, email, "Created", (int)(endPage - startPage + 1), 0, 0, desc);
                // ClientTaskAssignmentInfo? clientTaskAssignmentInfo = State.dataFile.GetClientTaskAssignmentInfo();
                if (clientTaskAssignmentInfo != null && clientKeyValueData != null && listTaskAssignmentInfo.Count() > 0)
                {
                    clientTaskAssignmentInfo.InsertBatch(new List<object>(listTaskAssignmentInfo)).Wait();
                    if (State.dataFile.ErrMsg.Length > 0)
                    {
                        AlertBtn(State.dataFile.ErrMsg, "Error");
                    }
                    // update Task assignment
                    foreach (TaskAssignmentInfo taskAssignmentInfo in listTaskAssignmentInfo)
                    {
                        List<string> listUsers = new List<string>();
                        var listUserTaskProgressInfo = JsonConvert.DeserializeObject<List<UserTaskProgressInfo>>(taskAssignmentInfo.AssigneeProgress);
                        foreach(UserTaskProgressInfo userTaskProgressInfo in listUserTaskProgressInfo)
                        {
                            if (userTaskProgressInfo.status != "Created")
                            {
                                clientKeyValueData.AddUserDocByCategory(userTaskProgressInfo.userID, TaskCategories._Assigned_, taskAssignmentInfo.RowKey);
                                // add to User-Tasks for valid userIDs
                                if (State.dataFile.GetUserName(userTaskProgressInfo.userID).Length > 0)
                                    listUsers.Add(userTaskProgressInfo.userID);
                            }
                        }
                        clientKeyValueData.AddUserTask(listUsers.ToArray(), taskAssignmentInfo.RowKey);
                    }
                }
                State.dataFile.UpdateSourceBookDocInfo(dictBookDocList);
                if (State.dataFile.ErrMsg.Length > 0)
                {
                    AlertBtn(State.dataFile.ErrMsg, "Error");
                }
                DocDisplayRecords = listDocInfo;
                if (listInvalidUserIDs.Count > 0)
                    AlertBtn(String.Format("{0} new docs imported.  {1} docs updated. {2} page number error(s), {3} UserID error(s) found. See activity log.", 
                    listSuttaInfo.Count, updateCount, errorCount, listInvalidUserIDs.Count), "Success");
                else
                    AlertBtn(String.Format("{0} new docs imported.  {1} docs updated. {2} page number error(s) found. See activity log.",
                    listSuttaInfo.Count, updateCount, errorCount), "Success");
            }
            DisplaySpinner(false);
            if (invalidFileFormat)
                AlertBtn(String.Format("{0} file is not a document definition file.", fileName), "Error");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    //************************************************************************************/
    //******** UpdateUserProgressInfo
    /************************************************************************************/    
    private bool UpdateUserProgressInfo(TaskAssignmentInfo taskAssignmentInfo, string userID, out string userNames, List<string> currentAssignedUserID)
    {
        bool update = false;
        userNames = "";
        if (taskAssignmentInfo != null)
        {
            var listUserTaskProgressInfo = JsonConvert.DeserializeObject<List<UserTaskProgressInfo>>(taskAssignmentInfo.AssigneeProgress);
            var item = listUserTaskProgressInfo.Where(r => r.status == "Assigned" &&
                            r.submitted == 0 && r.task == "Edit-Upload");
            if (item.Count() > 0)
            {
                var assignedUser = item.First();
                currentAssignedUserID.Add(assignedUser.userID);
                if (userID.Length == 0)
                {
                    update = true;
                    listUserTaskProgressInfo.Remove(assignedUser);
                }
                else
                {
                    if (assignedUser.userID != userID)
                    {
                        // update
                        update = true;
                        assignedUser.userID = userID;
                        // taskAssignmentInfo.AssigneeProgress = JsonConvert.SerializeObject(listUserTaskProgressInfo);
                    }
                }
            }
            else
            {
                update = true;
                // add new task assignment
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = userID,
                        task = "DataEntry",
                        startDate = "", //DateTime.Now.ToString("d'/'M'/'yyyy"),
                        lastDate = "",
                        submitted = 0,
                        corrections = 0,
                        status = "Assigned",
                    });
            }
            userNames = GetAssignedUserNames(listUserTaskProgressInfo);
            if (update)
                taskAssignmentInfo.AssigneeProgress = JsonConvert.SerializeObject(listUserTaskProgressInfo);
        }
        return update;
    }
    private string GetAssignedUserNames(List<UserTaskProgressInfo> listUserTaskProgressInfo)
    {
        string names = "";
        foreach(UserTaskProgressInfo userTaskProgressInfo in listUserTaskProgressInfo)
        {
            if (names.Length == 0) names = State.dataFile.GetUserName(userTaskProgressInfo.userID);
            else names += ", " + State.dataFile.GetUserName(userTaskProgressInfo.userID);
        }
        return names;
    }
    //************************************************************************************/
    //******** Search value change events
    /************************************************************************************/
    private void SearhTypeValueChangeHandler(ChangeEventArgs<string, DataItem> args)
    {
        if (args != null && args.ItemData != null)
            searchType = args.ItemData.Text;
        else searchType = String.Empty;
    }
    //************************************************************************************/
    //******** ShowDocs
    //************************************************************************************/
    private void ShowDocs()
    {
        // retrieve
        if (State.dataFile == null) return;
        if (searchTypeValue == null) searchTypeValue = searchTypes[0].ID;
        string sortCol = (searchTypeValue == TaskCategories._BookID_) ? "RowKey" : "TS";
        List<SuttaInfo> listSuttaInfo = State.dataFile.GetSuttaList(searchTypeValue, pattern, userClass, sortCol);
        totalCount = State.dataFile.GetSearchResultCount();
        DocDisplayRecords = new List<DocInfo>();
        if (totalCount == 0)
        {
            AlertBtn("No documents found.", "Alert"); return;
        }
        int n = 0;
        List<DocInfo> listDocInfo = new List<DocInfo>();
        foreach(SuttaInfo suttaInfo in listSuttaInfo)
        {
            DocInfo docInfo = new DocInfo();
            docInfo.Init(++n, suttaInfo);
            listDocInfo.Add(docInfo);
        }
        DocDisplayRecords = listDocInfo;
        if (DocDisplayRecords.Count < totalCount)
        {
            int remainingCount = totalCount - DocDisplayRecords.Count;
            if (remainingCount >= 10) nextCount = 10;
            else nextCount = remainingCount;
            showNextButton = "block";
        }
    }
    private void ShowNextDocs()
    {
        // retrieve
        List<SuttaInfo> listSuttaInfo = State.dataFile.GetNextBatchSearchedSuttas();
        List<DocInfo> listDocInfo = DocDisplayRecords.ToList();
        int n = listDocInfo.Count;
        foreach (SuttaInfo suttaInfo in listSuttaInfo)
        {
            DocInfo docInfo = new DocInfo();
            docInfo.Init(++n, suttaInfo);
            listDocInfo.Add(docInfo);
        }
        DocDisplayRecords = listDocInfo;
        if (DocDisplayRecords.Count < totalCount)
        {
            int remainingCount = totalCount - DocDisplayRecords.Count;
            if (remainingCount >= 10) nextCount = 10;
            else nextCount = remainingCount;
            showNextButton = "block";
        }
        else showNextButton = "none";
    }
    /************************************************************************************/
    //******** Grid events
    /************************************************************************************/
    public async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args != null)
        {
            if (args.Item.Text.Equals("Add"))
            {
                //selected_docNo = ""; // to show this is not modifying the row but adding a new one.
                curDocUserAction = DocUserAction.Add;
                doc_No = (docNo.Contains("-")) ? docNo.Split("-")[1] : docNo;
                doc_Type = doc_TypeID;
                docType_DropDownValue = doc_TypeID;
                doc_SubType = doc_SubTypeID;
                docSubType_DropDownValue = doc_SubTypeID;
                doc_Title = docTitle;
                doc_SubTitle = docSubTitle;
                PDF_DropDownValue = selected_PdfID;
                oldformattedDocNo = formattedDocNo;
                IsVisible_NewDocInfo = true;
                args.Cancel = true;
            }
            if (args.Item.Text.Equals("Edit"))
            {
                if (State.dataFile != null)
                {
                    SuttaInfo? suttaInfo = State.dataFile.GetSuttaInfo(formattedDocNo); // exact match
                    if (suttaInfo != null)
                    {
                        // check if the doc has already started
                        if (suttaInfo.PagesSubmitted > 0)
                        {
                            AlertBtn("Selected document has already been started. It cannot be edited anymore.", "Warning");
                            args.Cancel = true;
                            return;
                        }
                    }
                }
                curDocUserAction = DocUserAction.Edit;
                doc_No = (docNo.Contains("-")) ? docNo.Split("-")[1] : docNo;
                doc_Type = doc_TypeID;
                docType_DropDownValue = doc_TypeID;
                doc_SubType = doc_SubTypeID;
                docSubType_DropDownValue = doc_SubTypeID;
                doc_Title = docTitle;
                doc_SubTitle = docSubTitle;
                PDF_DropDownValue = selected_PdfID;
                oldformattedDocNo = formattedDocNo;
                IsVisible_NewDocInfo = true;
                // args.Cancel = false;
            }
            if (args.Item.Text.Equals("Delete"))
            {
                if (State.dataFile != null)
                {
                    curDocUserAction = DocUserAction.Delete;
                    List<string> docAlreadyStarted = new List<string>();
                    foreach (DocInfo docInfo in SelectedDocRecords)
                    {
                        string dNo = docInfo.docNo;
                        SuttaInfo? suttaInfo = State.dataFile.GetSuttaInfo(dNo); // exact match
                        if (suttaInfo != null)
                        {
                            // check if the doc has already started
                            if (suttaInfo.PagesSubmitted > 0)// || suttaInfo.Status != "Created")
                            {
                                docAlreadyStarted.Add(dNo);
                                // AlertBtn("Selected document has already been started. It cannot be deleted anymore.", "Warning");
                                // args.Cancel = true;
                            }
                        }
                    }
                    // all selected docNos have already started. cannot delete anymore
                    if (docAlreadyStarted.Count == SelectedDocRecords.Count)
                    {
                        switch (docAlreadyStarted.Count)
                        {
                            case 1:
                                AlertBtn("Selected document has already started and cannot be deleted anymore.", "Warning");
                                break;
                            default:
                                AlertBtn("Selected documents have already started and cannot be deleted anymore.", "Warning");
                                break;
                        }
                        args.Cancel = true;
                    }
                    if (docAlreadyStarted.Count > 0 && docAlreadyStarted.Count < SelectedDocRecords.Count)
                    {
                        string msg = String.Join(',', docAlreadyStarted);
                        string verb = docAlreadyStarted.Count == 1 ? " doc has" : " docs have";
                        AlertBtn(msg + verb + " started. Please select docNo again.", "Error");
                        args.Cancel = true;
                    }
                }
            }
            if (args.Item.Text.Equals("Reset") && State.dataFile != null && SelectedDocRecords.Count > 0)
            {
                // get confirmation from the user
                string msg = String.Format("You have selected {0} doc{1} to reset. Do you want to continue?", 
                        SelectedDocRecords.Count, SelectedDocRecords.Count > 1? "s" : "");
                var confirm = await ConfirmBtn(msg, "Confirm Reset");
                if (!confirm) return;
                int count = 0;
                curDocUserAction = DocUserAction.Reset;
                List<string> DocNos = SelectedDocRecords.Select(s => s.docNo).ToList();
                //await Task.Delay(100);
                await DoReset(DocNos);

                string plu1 = "", plu2 = "";
                if (SelectedDocRecords.Count > 1)
                {
                    plu1 = "s"; plu2 = "es";
                }
                AlertBtn(String.Format("{0} document{1} reset. Please check the status{2} in the Task Activity Log.", SelectedDocRecords.Count, plu1, plu2), "Notice");
            }
            if (args.Item.Id == "Grid_excelexport")
            {
                ExcelExportProperties ExcelProperties = new ExcelExportProperties();
                ExcelProperties.FileName = "Document.xlsx";
                ExcelProperties.DataSource = DocDisplayRecords;
                await this.sfgrid.ExcelExport(ExcelProperties);
            }
        }
    }
    private async Task DoReset(List<string> DocNos)
    {
        if (DocNos.Count == 0) return;
        DisplaySpinner(true);
        int count = 0;
        ClientSuttaInfo? clientSuttaInfo = State.dataFile.GetClientSuttaInfo();
        ClientSuttaPageData? clientSuttaPageData = State.dataFile.GetClientSuttaPageData();
        ClientTaskAssignmentInfo? clientTaskAssignmentInfo = State.dataFile.GetClientTaskAssignmentInfo();
        ClientKeyValueData? clientKeyValueData = State.dataFile.GetClientKeyValueData();
        ClientTaskActivityLog? clientTaskActivityLog = State.dataFile.GetClientTaskActivityLog();
        ClientCorrectionLog? clientCorrectionLog = State.dataFile.GetClientCorrectionLog();
        if (clientSuttaInfo != null && clientSuttaPageData != null &&
            clientTaskAssignmentInfo != null && clientKeyValueData != null && clientCorrectionLog != null)
        {
            string errMsg = "", ownerName = "";
            bool alreadyCreated = false;
            foreach (string docNo in DocNos)
            {
                // removes all assignments leaving the creator info from TaskAssignmentInfo
                var result = await clientTaskAssignmentInfo.GetTaskAssignmentInfoAsync(docNo);
                TaskAssignmentInfo? taskAssignmentInfo = (TaskAssignmentInfo)result;

                errMsg = "";
                alreadyCreated = (taskAssignmentInfo.Status == "Created");
                if (alreadyCreated) errMsg += "Doc already in NewDoc state.";
                // update task assignments
                await clientTaskAssignmentInfo.ResetTaskAssignmentInfoAsync(taskAssignmentInfo, email, userName);
                if (errMsg.Length > 0) errMsg += " ";
                errMsg += "ResetTaskAssignmentInfo rc = " + clientTaskAssignmentInfo.StatusCode.ToString();

                if (!alreadyCreated)
                {
                    // this action puts the DocNo to its initial state in SuttaInfo
                    ownerName = GetDocOwnerName(taskAssignmentInfo);
                    await clientSuttaInfo.ResetSuttaInfoAsync(docNo, ownerName);
                    errMsg += "; ResetSuttaInfo rc = " + clientTaskAssignmentInfo.StatusCode.ToString();

                    // remove tasks assigned for this docNo
                    await clientKeyValueData.RemoveUserAssignedTasksAsync(docNo, taskAssignmentInfo);
                    errMsg += "; RemoveUserAssignedTasksAsync rc = " + clientKeyValueData.StatusCode.ToString();

                    // deletes all data records from SuttaPageData if they exist
                    count = await clientSuttaPageData.DeleteDocDataAsync(docNo);
                    errMsg += "; DeleteDocData rc = " + clientSuttaPageData.StatusCode.ToString();

                    // Reset CorrectionLog
                    await clientCorrectionLog.ResetCorrectionLog(docNo);
                    errMsg += "; CorrectionLog rc = " + clientCorrectionLog.StatusCode.ToString();
                }

                // update Task Activities
                if (clientTaskActivityLog != null)
                {
                    await clientTaskActivityLog.AddTaskActivityLogAsync(docNo,
                        email, "Reset", count, count, count, errMsg);
                }
                // update the display
                int idx = DocDisplayRecords.FindIndex(x => x.docNo == docNo);
                if (idx >= 0)
                {
                    List<DocInfo> newDocDisplayRecords = new List<DocInfo>(DocDisplayRecords);
                    newDocDisplayRecords[idx].pagesSubmitted = 0;
                    newDocDisplayRecords[idx].status = "Created";
                    newDocDisplayRecords[idx].team = ownerName;
                    DocDisplayRecords = newDocDisplayRecords;
                }
            }
            DisplaySpinner(false);
            //VisibleSpinner = false;
            string GetDocOwnerName(TaskAssignmentInfo? taskAssignmentInfo)
            {
                string s = "Unlnown";
                if (taskAssignmentInfo == null) return s;
                var listUserTaskProgressInfo = JsonConvert.DeserializeObject<List<UserTaskProgressInfo>>(taskAssignmentInfo.AssigneeProgress);
                if (listUserTaskProgressInfo != null)
                {
                    var x = listUserTaskProgressInfo.FirstOrDefault(x => x.task == "NewDoc");
                    if (x != null) 
                    { 
                        return State.dataFile.GetUserName(x.userID);
                    }
                }
                return s;
            }
        }
    }
    public async Task RowSelectHandler(RowSelectEventArgs<DocInfo> args)
    {
        DocInfo docInfo = args.Data;
        selectedRowDocInfo = args.Data;
        //SelectedRowIndexes = await this.sfgrid.GetSelectedRowIndexes();
        var selRecords = sfgrid.GetSelectedRecordsAsync();
        SelectedDocRecords = (List<DocInfo>)selRecords.Result;
        int idx = 0;
        if (docInfo.srNo != null) idx = Convert.ToInt16(docInfo.srNo) - 1;
        //selected_docNo = docInfo.docNo;
        string dNo = docInfo.docNo;
        docNo = dNo;
        string[] f = dNo.Split('-');
        string[] ff = f[0].Split('.');
        string dType = ff[0];
        string dSubType = (ff.Length == 2) ? ff[1] : "";
        doc_No = (f.Length == 2) ? f[1] : "";
        // get docType and docSubType ids
        var t1 = (from item in listDocTypes where item.Text == dType select item).ToList();
        doc_TypeID = (t1.Count > 0) ? t1[0].ID : "";
        doc_Type = (t1.Count > 0) ? t1[0].Text : "";

        var t2 = (from item in listDocSubTypes where item.Text == dSubType select item).ToList();
        doc_SubTypeID = (t2.Count > 0) ? t2[0].ID : "";
        doc_SubType = (t2.Count > 0) ? t2[0].Text : "";

        selected_PdfID = docInfo.sourceFileCode;
        var t3 = (from item in listPDFItems where item.ID == selected_PdfID select item).ToList();
        selectedPDF = sourceBookPDF = "";
        if (t3.Count > 0)
        {
            selectedPDF = t3[0].Text;
            sourceBookPDF = String.Format("{0} ({1})", t3[0].Text, t3[0].ID);
        }
        selectedBookPages = dictSourceBooks[selected_PdfID].Pages;
        formatDocNo();
        //sourceBookPDF
        docTitle = docInfo.docTitle;
        int p = docTitle.IndexOf('/');
        if (p != -1)
        {
            // get subTitle
            docSubTitle = docTitle.Substring(p + 1);
            docTitle = docTitle.Substring(0, p);
        }
        pages = docInfo.pages;
        f = pages.Split('-');
        startPage = (f.Length == 2) ? Int32.Parse(f[0]) : 0;
        f = f[1].Split(' ');
        endPage = Int32.Parse(f[0]);
        nPages = docInfo.pageCount;
        sPages = docInfo.pagesSubmitted;
        docInfo.lastUpdate = "30/1/2024";
        var n = ((int)(((float)sPages / nPages) * 100.0 + 0.5)).ToString();
        string pct = ((int)(((float)sPages / nPages) * 100.0 + 0.5)).ToString();
        status = String.Format("{0} ({1}%)", docInfo.status, pct);
        teamMembers = docInfo.team;
    }
    private async Task ActionCompleteImportFile(ActionEventArgs<ImportDocInfo> args)
    {
        await Task.Delay(1);
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save) && args.Action == "Edit"))
        {
            var data = (ImportDocInfo)args.Data;
            var rec = ImportDocDisplayRecords.FirstOrDefault(r => r.srNo == data.srNo);
            if (rec != null)
            {
                ImportDocDisplayRecords[rec.srNo - 1].status = GetImportDocInfoStatus(rec);
                var tempDispRecords = new List<ImportDocInfo>(ImportDocDisplayRecords);
                ImportDocDisplayRecords = tempDispRecords;
                labelOkImport = "Ok";
                okCount = (from item in ImportDocDisplayRecords 
                           where item.status == "Ok" 
                           select item).ToList().Count;
                errCount = (from item in ImportDocDisplayRecords
                            where item.status.ToLower().Contains("error")
                            select item).ToList().Count;
            }
        }
    }
    private async Task ActionBeginUser(ActionEventArgs<DocInfo> args)
    {
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete) && args.Action == "Delete"))
        {
            if (State.dataFile != null)
            {
                string pdfID, delDocNo;
                int pages;
                await DisplaySpinner(true);
                foreach (DocInfo docInfo in SelectedDocRecords)
                {
                    delDocNo = docInfo.docNo;
                    pdfID = docInfo.sourceFileCode;
                    pages = docInfo.pageCount;
                    State.dataFile.RemoveSourceBookDocNo(pdfID, delDocNo);
                    State.dataFile.RemoveSuttaInfo(delDocNo);
                    State.dataFile.RemoveTaskAssignmentInfo(delDocNo);
                    // remove from User-Tasks, Task-Assigned, Task-Edit-Upload
                    State.dataFile.RemoveTaskFromUsers(delDocNo);
                    State.dataFile.AddTaskActivityLog(delDocNo, email, "Delete", pages, 0, 0, "Doc removed.");
                    var itemToRemove = DocDisplayRecords.Single(r => r.docNo == delDocNo);
                    DocDisplayRecords.Remove(itemToRemove);
                }
                await DisplaySpinner(false);
            }
        }
    }    
    private void ActionCompleteUser(ActionEventArgs<DocInfo> args)
    {
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete) && args.Action == "Delete"))
        {
            totalCount = DocDisplayRecords.Count;
        }
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete) && args.Action == "Edit"))
        {

            doc_No = (docNo.Contains("-")) ? docNo.Split("-")[1] : docNo;
            doc_Type = doc_TypeID;
            docType_DropDownValue = doc_TypeID;
            doc_SubType = doc_SubTypeID;
            docSubType_DropDownValue = doc_SubTypeID;
            doc_Title = docTitle;
            doc_SubTitle = docSubTitle;
            PDF_DropDownValue = selected_PdfID;
            string title = doc_Title;
            if (doc_SubTitle.Length > 0) title += "/" + doc_SubTitle;
            // PDF_DropDownValue
            int sPg = (int)(startPage == null ? 0 : startPage);
            int ePg = (int)(endPage == null ? 0 : endPage);
            SuttaInfo suttaInfo = new SuttaInfo()
            {
                RowKey = formattedDocNo,
                Title = title,
                StartPage = sPg,
                EndPage = ePg,
                NoPages = ePg - sPg + 1,
                PagesSubmitted = 0,
                Status = "",
                Team = "",
                BookID = ""
            };
            IsVisible_NewDocInfo = false;
        }
    }
    private void FillTestData()
    {
        DocInfo docInfo = new DocInfo();
        docInfo.srNo = 1;
        docInfo.docNo = "DN-1.1";
        docInfo.docTitle = "သုတ္တပိဋက နိဿယများ/ဗြဟ္မဇာလသုတ္တ";
        docInfo.pages = "185-300";
        docInfo.pageCount = 115;
        docInfo.pagesSubmitted = 85;
        docInfo.lastUpdate = "30/1/2024";
        docInfo.status = "DataEntry";
        docInfo.team = "Aung Chan Min, Poe Ei San, Tun Lin, Kaung Si Thar";
        DocDisplayRecords.Add(docInfo);
    }
    private async Task AdminWork()
    {
        if (email != "dhammayaungchi2011@gmail.com") return;
        // await Setup_MN017();
        // await ResetAllDocNos("DN");
        await RemoveDocNosFromFile();
    }
    private async Task ResetAllDocNos(string docType = "MN")
    {
        if (email != "dhammayaungchi2011@gmail.com") return;
        List<string> docNos = new List<string>();
        ClientSuttaInfo? clientSuttaInfo = State.dataFile!.GetClientSuttaInfo();
        string query = String.Format("RowKey ge '{0}-' and RowKey le '{0}~' and (Status eq 'Created' or Status eq '')", docType);
        // query = String.Format("RowKey eq 'MN-017'");
        if (clientSuttaInfo != null)
        {
            var result = await clientSuttaInfo.QuerySuttaInfoAsync(query);
            List<SuttaInfo> listSuttaInfo = (List<SuttaInfo>)result;
            docNos = listSuttaInfo.Select(s => s.RowKey).ToList();
            Debug.WriteLine("Count = {0}", docNos.Count);
            docNos.Sort(); docNos.Reverse();
            string msg = String.Format("Do you want to reset all {0} docs of {1}", docNos.Count, docType);
            bool confirm = await ConfirmBtn(msg, "Confirm Reset");
            if (confirm)
            {
                await DoReset(docNos);
            }
        }
    }
    private async Task RemoveDocNosFromFile()
    {
        ClientSuttaInfo? clientSuttaInfo = State.dataFile!.GetClientSuttaInfo();
        string query = "RowKey gt 'DN.Tika-14.' and RowKey lt 'DN.Tika-17.'";
        var listSuttaInfo = await clientSuttaInfo.QuerySuttaInfoAsync(query);
        if (listSuttaInfo.Count == 0) return;
        foreach (var suttaInfo in listSuttaInfo)
        {
            Doc_Delete(suttaInfo.RowKey);
        }
    }
    private async Task Setup_MN017()
    {
        ClientSuttaInfo? clientSuttaInfo = State.dataFile!.GetClientSuttaInfo();
        ClientSuttaPageData? clientSuttaPageData = State.dataFile!.GetClientSuttaPageData();
        ClientKeyValueData? clientKeyValueData = State.dataFile!.GetClientKeyValueData();
        ClientTaskAssignmentInfo? clientTaskAssignmentInfo = State.dataFile!.GetClientTaskAssignmentInfo();
        //await clientSuttaInfo.DeleteTableRec(suttaInfo);
        // [{"userID":"dhammayaungchi2011@gmail.com","task":"NewDoc","startDate":"7/4/2024","lastDate":"8/4/2024","submitted":0,"corrections":0,"status":"Created"},
        // {"userID":"user1@gmail.com","task":"DataEntry","startDate":"7/4/2024","lastDate":"7/4/2024","submitted":3,"corrections":0,"status":"Completed"},
        // {"userID":"user2@gmail.com","task":"Review1","startDate":"7/4/2024","lastDate":"7/4/2024","submitted":3,"corrections":0,"status":"Completed"},
        // {"userID":"user3@gmail.com","task":"Review2","startDate":"7/4/2024","lastDate":"7/4/2024","submitted":3,"corrections":0,"status":"Completed"},
        // {"userID":"user4@gmail.com","task":"Edit","startDate":"7/4/2024","lastDate":"7/4/2024","submitted":3,"corrections":0,"status":"Completed"},
        // {"userID":"user5@gmail.com","task":"Review3","startDate":"7/4/2024","lastDate":"7/4/2024","submitted":3,"corrections":0,"status":"Completed"},
        // {"userID":"user6@gmail.com","task":"Review4","startDate":"7/4/2024","lastDate":"7/4/2024","submitted":3,"corrections":0,"status":"Completed"},
        // {"userID":"hhw@gmail.com","task":"Review5","startDate":"7/4/2024","lastDate":"7/4/2024","submitted":3,"corrections":0,"status":"Completed"},
        // {"userID":"poeeisan96.pes@gmail.com","task":"Review6","startDate":"","lastDate":"","submitted":0,"corrections":0,"status":"Assigned"}]
        List<KeyValueData> listKeyValueData = new List<KeyValueData>();
        listKeyValueData.Add(new KeyValueData()
            {
                PartitionKey = "User-" + "user1@gmail.com",
                RowKey = "MN-017|DataEntry",
                Value = "Completed"
            });
        listKeyValueData.Add(new KeyValueData()
            {
                PartitionKey = "User-" + "user2@gmail.com",
                RowKey = "MN-017|Review1",
                Value = "Completed"
            });
        listKeyValueData.Add(new KeyValueData()
            {
                PartitionKey = "User-" + "user3@gmail.com",
                RowKey = "MN-017|Review2",
                Value = "Completed"
            });
        listKeyValueData.Add(new KeyValueData()
            {
                PartitionKey = "User-" + "user4@gmail.com",
                RowKey = "MN-017|Edit",
                Value = "Completed"
            });
        listKeyValueData.Add(new KeyValueData()
            {
                PartitionKey = "User-" + "user5@gmail.com",
                RowKey = "MN-017|Review3",
                Value = "Completed"
            });
        listKeyValueData.Add(new KeyValueData()
            {
                PartitionKey = "User-" + "user6@gmail.com",
                RowKey = "MN-017|Review4",
                Value = "Completed"
            });
        listKeyValueData.Add(new KeyValueData()
            {
                PartitionKey = "User-" + "hhw@gmail.com",
                RowKey = "MN-017|Review5",
                Value = "Completed"
            });
        listKeyValueData.Add(new KeyValueData()
            {
                PartitionKey = "User-" + "hhw@gmail.com",
                RowKey = "MN-020|DataEntry",
                Value = "Assigned"
            });
        listKeyValueData.Add(new KeyValueData()
            {
                PartitionKey = "User-poeeisan96.pes@gmail.com",
                RowKey = "MN-017|Review6",
                Value = "Assigned"
            });
        // KeyValueData
        if (clientKeyValueData != null)
        {
            foreach (KeyValueData keyValueData in listKeyValueData)
            {
                // if will update if data exists or else will insert
                await clientKeyValueData.UpdateKeyValueDataAsync(keyValueData);
            }
        }
        // update SuttaInfo
        if (clientSuttaInfo != null)
        {
            SuttaInfo? suttaInfo = await clientSuttaInfo.GetSuttaInfoAsync("MN-017");
            if (suttaInfo != null)
            {
                suttaInfo.Status = "Review5";
                suttaInfo.Team = "System Admin, User One, User Two, User Three, User Four, User Five, User Six, Htay Htay Wai, Poe Ei San";
                suttaInfo.PagesSubmitted = 3;
                await clientSuttaInfo.UpdateSuttaInfoAsync(suttaInfo);
            }
        }
        // update TaskAssignmentInfo
        if (clientTaskAssignmentInfo != null)
        {
            TaskAssignmentInfo? taskAssignmentInfo = await clientTaskAssignmentInfo.GetTaskAssignmentInfoAsync("MN-017");
            if (taskAssignmentInfo != null)
            {
                taskAssignmentInfo.Status = "Completed";
                taskAssignmentInfo.PagesSubmitted = 3;
                taskAssignmentInfo.LastDate = "8/4/2024";
                List<UserTaskProgressInfo> listUserTaskProgressInfo = new List<UserTaskProgressInfo>();
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "dhammayaungchi2011@gmail.com",
                        task = "NewDoc",
                        startDate = "7/4/2024",
                        lastDate = "8/4/2024",
                        submitted = 0,
                        corrections = 0,
                        status = "Created"
                    });
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "user1@gmail.com",
                        task = "DataEntry",
                        startDate = "7/4/2024",
                        lastDate = "7/4/2024",
                        submitted = 3,
                        corrections = 0,
                        status = "Completed"
                    });
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "user2@gmail.com",
                        task = "Review1",
                        startDate = "7/4/2024",
                        lastDate = "7/4/2024",
                        submitted = 3,
                        corrections = 0,
                        status = "Completed"
                    });
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "user3@gmail.com",
                        task = "Review2",
                        startDate = "7/4/2024",
                        lastDate = "7/4/2024",
                        submitted = 3,
                        corrections = 0,
                        status = "Completed"
                    });
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "user4@gmail.com",
                        task = "Edit",
                        startDate = "7/4/2024",
                        lastDate = "7/4/2024",
                        submitted = 3,
                        corrections = 0,
                        status = "Completed"
                    });
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "user5@gmail.com",
                        task = "Review3",
                        startDate = "7/4/2024",
                        lastDate = "7/4/2024",
                        submitted = 3,
                        corrections = 0,
                        status = "Completed"
                    });
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "user6@gmail.com",
                        task = "Review4",
                        startDate = "7/4/2024",
                        lastDate = "7/4/2024",
                        submitted = 3,
                        corrections = 0,
                        status = "Completed"
                    });
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "hhw@gmail.com",
                        task = "Review5",
                        startDate = "7/4/2024",
                        lastDate = "7/4/2024",
                        submitted = 3,
                        corrections = 0,
                        status = "Completed"
                    });
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "hhw@gmail.com",
                        task = "DataEntry",
                        startDate = "7/4/2024",
                        lastDate = "",
                        submitted = 0,
                        corrections = 0,
                        status = "Assigned"
                    });
                listUserTaskProgressInfo.Add(new UserTaskProgressInfo()
                    {
                        userID = "poeeisan96.pes@gmail.com",
                        task = "Review6",
                        startDate = "7/4/2024",
                        lastDate = "",
                        submitted = 0,
                        corrections = 0,
                        status = "Assigned"
                    });
                taskAssignmentInfo.AssigneeProgress = JsonConvert.SerializeObject(listUserTaskProgressInfo);
                await clientTaskAssignmentInfo.UpdateTableRec(taskAssignmentInfo);
            }
        }
        if (clientSuttaPageData != null)
        {
            SuttaPageData suttaPageData = new SuttaPageData();
            // #399
            suttaPageData.PartitionKey = "MN-017";
            suttaPageData.RowKey = "MN-017-399";
            suttaPageData.PageNo = 399;
            suttaPageData.PageData = "*ဧဝံမေသုတန္တိ ^ဧဝံ မေ သုတံ အစရှိသောသုတ်သည် *ရထဝိနီတသုတ္တံ ^ရထဝီနိတသုတ်တည်း *တတ္ထ ^ထိုရထဝီနိတသုတ်၌ *ရာဇဂဟေတိ ^ရာဇဂဟေဟူသည်ကား *ဧဝံ နာမကေ ^ဤသို့ ရာဇဂြိုဟ်ဟူ၍-အမည်ရှိသော *နဂရေ ^ပြည်၌ *ဟိသစ္စံ ^မှန်၏ *တံ ^ထိုရာဇဂြိုဟ်ပြည်ကို *မန္ဓာတုမဟာဂေါဝိန္ဒာဒီဟိ ^မန္ဓာတ်မင်း-မဟာဂေါဝိန္ဒပုဏ္ဏားအစရှိသော သူတို့သည် *ပဋိဂ္ဂဟိတတ္တာ ^သိမ်းဆည်းအပ်သည်၏ အဖြစ်ကြောင့် *ရာဇဂဟန္တိ ^ရာဇဂဟံဟူ၍ *ဝုစ္စတိ ^ဆိုအပ်၏ *ဧတ္ထ ^ဤရာဇဂဟံဟူသောပုဒ်၌ *အညေပိ ^တပါးလည်းဖြစ်ကုန်သော *ပကာရေ ^အပြားတို့ကို *ဝဏ္ဏယန္တိ ^ဖွင့်အပ်ကုန်၏ *တေဟိ ^ထိုအပြားတို့ဖြင့် *ကိံ ^အဘယ်အကျိုးရှိအံ့နည်း *ဧတံ ^ထိုရာဇဂဟေဟူသော အမည်သည် *တဿနဂရဿ ^ထိုပြည်၏ *နာမမတ္တံ ^အမည်မျှသာတည်း *တံ ပနေတံ တံပနဧတံ နဂရံ ^ထိုရာဇဂြိုဟ်ပြည်သည် *ဗုဒ္ဓကာလေစ ^ဘုရားဖြစ်သော-အခါ၌လည်းကောင်း *စက္ကဝတ္တိကာလေစ ^စကြာဝတေးမင်းဖြစ်သော-အခါ၌လည်းကောင်း *နဂရံ ^မြို့သည်";
            suttaPageData.UserID = "user1@gmail.com";
            suttaPageData.NISRecCount = 25;
            suttaPageData.NISRecLen = 757;
            await clientSuttaPageData.UpdateSuttaPageDataAsync(suttaPageData);
            // #400
            suttaPageData.PartitionKey = "MN-017";
            suttaPageData.RowKey = "MN-017-400";
            suttaPageData.PageNo = 400;
            suttaPageData.PageData = "*ဟောတိ ^ဖြစ်၏ *သေသကာလေ ^ကြွင်းသောအခါ၌ *သုညံ ^လူမှ ဆိတ်သည် *ဟောတိ ^ဖြစ်၏ *ယက္ခပရိဂ္ဂဟိတံ ^ဘီလူးတို့သည်-သိမ်းဆည်းအပ်သည်ဖြစ်၍ *တေသံ ^ထိုဘီလူးတို့၏ *ဝသနဝနံ ^နေရာဖြစ်သော-တောသည် *ဟုတွာ ^ဖြစ်၍ *တိဋ္ဌတိ ^တည်၏ *ဝေဠုဝနေကလန္ဒက နိဝါပေတိ ဧတ္ထ ^ဝေဠုဝနေ ကလန္ဒနိဝါပေဟူသော ဤပါဌ်၌ *ဝေဠုဝနန္တိ ^ဝေဠုဝနံဟူသည်ကား *တဿဥယျာနဿ ^ထိုဥယျာဉ်၏ *နာမ ^အမည်တည်း *တံ ^ထိုဥယျာဉ်ကို *ဝေဠူဟိ ^ဝါးပင်တို့ဖြင့် *ပရိက္ခိတ္တံ ^ရံအပ်သည် *အဟောသိ ကိရ ^ဖြစ်သတတ် *အဋ္ဌရသဟတ္ထေ ^တစ်ဆယ့်ရှစ်တောင် အတိုင်းအရှည်ရှိသော *ပါကာရေနစ ^တံတိုင်းတို့ဖြင့်လည်း *ပရိက္ခိတ္တံ ^ရံအပ်၏ *ဂေါပုရဋ္ဋာလကယုတ္တံ ^တံခါးမုတ်နှင့်ယှဉ်၏ *နီလောဘာသံ ^စိန်းညိုသောအရောင်ရှိ၏ *မနောရမ္မံ ^နှလုံးမွေ့လျှော်ဖွယ်ရှိ၏ *တေန ^ထို့ကြောင့် *ဝေဠုဝနန္တိ ^ဝေဠုဝနံဟူ၍ *ဝုစ္စတိ ^ဆိုအပ်၏ *ဧတ္ထ ^ဤဥယျာဉ်၌ *ကလန္ဒကာနဉ္စ ^ရှဉ့်နက်တို့အားလည်း *နိဝါပံ ^အစာကို *အဒံသု ^ပေးကုန်ပြီ *တေန ^ထို့ကြောင့် *ကလန္ဒကနိဝါပေါတိ ^ကလန္ဒကနိဝါပေါဟူ၍ *ဝုစ္စတိ ^ဆိုအပ်၏ *ကိရ ^ကြားဖူးသည်ကို-ဆိုဦးအံ့ *ပုဗ္ဗေ ^ရှေး၌ *အညတရော ^တယောက်သော *ရာဇ ^မင်းသည် *တတ္ထ ^ထိုဥယျာဉ်၌ *ဥယျာနကီဠနတ္ထံ ^ဥယျာဉ်ကစားခြင်းအကျိုးငှာ *အာဂတော ^လာသည်ရှိသော် *သုရာ မဒေန ^သေယစ်ခြင်းဖြင့် *မတ္တော ^ယစ်သည်ဖြစ်၍ *ဒိဝါ ^နေ့အခါ၌ *သေယျံ ^အိပ်ခြင်းသို့ *ဥပဂတော ^ရေခံသည်ဖြစ်၍ *သုပိ ^အိပ်၏ *အဿ ^ထိုမင်း၏ *ပရိဇနေပိ ^ပရိသတ်-အပေါင်းသည်လည်း *ရာဇ ^မင်းသည် *သုတ္တော ^အိပ်ပျော်ခြင်းသို့ရောက်ပြီ *ဣတိ ^ဤသို့ *ပုပ္ဖပလာဒီဟိ ^ပန်း-သစ်သီး အစရှိသည်တို့ဖြင့် *ပလောဘိယမာနော ^ဖြားယောင်းအပ်သည်ဖြစ်၍ *ဣတောစိတောစ ^ထိုမှဤမှလည်း *ပက္ကမိ ^ဖဲလေ၏ *အထ ^ထိုအခါ၌ *သုရာဂန္ဓေန ^သေနံ့ကြောင့် *အညတရသ္မာ ^တပါးသော *သုသိရရုက္ခာ ^အခေါင်းရှိသော-သစ်ပင်မှ *ကဏှသပ္ပေါ ^မြွေဟောက်သည် *နိက္ခမိတွာ ^ထွက်၍ *ရညာဘိမုခေါ ^မင်းသို့ရှေးရှု *အာဂစ္ဆတိ ^လာ၏ *တံ ^ထိုမင်းသို့ရှေးရှုလာသော- မြွေဟောက်ကို *ဒိသွား ^မြင်၍ *ရုက္ခဒေဝတာ ^ရုက္ခစိုးနတ်သည် *ရညော ^မင်းအား *ဇီဝိတံ ^အသက်ကို *ဒမှီတိ ^ပေးအံ့ဟူ၍ *ကာဠကဝေသေန ^ရှဉ့်နက်အသွင်ဖြင့် *အာဂန္တွာ ^လာ၍ *ကဏ္ဏမူလေး ^နားရင်း၌ *သဒ္ဒံ ^အသံကို *အကာသိ ^ပြု၏ *ရာဇ ^မင်းသည် *ပဋိဗုဇ္ဈိ ^နိုး၏ *ကဏှသပ္ပေါ ^မြွေဟောက်သည် *နိဝတ္တော ^ပြန်နစ်လေ၏ *သော ^ထိုမင်းသည် *ဒိသွာ ^မြင်၍ *ဣမာယ ကာဠကာယ ^ဤရှဉ့်နက်သည် *မမ ^ငါအား";
            suttaPageData.UserID = "user1@gmail.com";
            suttaPageData.NISRecCount = 82;
            suttaPageData.NISRecLen = 1924;
            await clientSuttaPageData.UpdateSuttaPageDataAsync(suttaPageData);
            // #401
            suttaPageData.PartitionKey = "MN-017";
            suttaPageData.RowKey = "MN-017-401";
            suttaPageData.PageNo = 401;
            suttaPageData.PageData = "*ဇီဝိတံ ^အသက်ကို *ဒိန္နံ ^ပေးအပ်ပြီး *ဣတိ ^ဤသို့ကြံ၍ *ကာဠကာနံ ^ရှဉ့်နက်တို့အား *တတ္ထ ^ထိုဥယျာဉ်၌ *နိဝါပံ ^အစာကို *ပဋ္ဌပေသိ ^ဖြစ်စေပြီ *အဘယဃောသနဉ္စ ^ဘေးမရှိစေလင့် ဟူသော-ကြွေးကြော်ခြင်းကိုလည်း *ဃောသာပေသိ ^ကြွေးကြော်စေ၏ *တသ္မာ ^ထိုကြောင့် *တံ ^ထိုဥယျာဉ်သည် *တတော ^ထိုအခါမှ *ပဘူတိ ^အစပြု၍ *ကလန္ဒကနိဝါပန္တိသင်္ခံ ^ကလန္ဒက နိဝါပံဟူသော-ခေါ်ဝေါ်ခြင်းသို့ *ဂတံ ^ရောက်ပြီ *ကလန္ဒကာတိ ^ကလန္ဒကာဟူသော-ဤအမည်သည် *ကာဠကာနံ ^ရှဉ့်နက်တို့၏ *နာမံ ^အမည်တည်း *ဇာတိဘူမိကာတိ ^ဇာတိဘူမိကာဟူသည်ကား *ဇာတိဘူမိဝါသိနော ^ဇာတိဘူမိအရပ်၌-သီတင်းသုံးနေလေ့ရှိသောရဟန်းသည် *တတ္ထ ^ထိုပါဌ်၌ *ဇာတိဘူမီတိ ^ဇာတိဘူမိဟူသည်ကား *ဇာတဋ္ဌာနံ ^ဘုရားလောင်း၏-ဖွားရာဖြစ်သော-အရပ်တည်း *နေဝ ဟောတိ ^မဖြစ် *စင်္ကီဗြာဟ္မဏာဒိနံ ^စင်္ကပုဏ္ဏာအစရှိသောသူတို့၏ *ဇာတဋ္ဌာနံ ^သွားရာအရပ်သည် *နေဝဟောတိ ^မဖြစ် *သတ္က သုယာမ သန္တုဿီတာဒီနံ ^သိကြား-သုယာမ-သန္တုဿီတနတ်-အစရှိသည်တို့၏ *ဇာတဋ္ဌာနံ ^ဖြစ်ရာအရပ်သည် *နဟောတိ ^မဖြစ် *အသီတိမဟာ သာဝကာဒီနံ ^အသီတိမဟာ သာဝက-အစရှိသည်တို့၏ *ဇာတဋ္ဌာနံ ^ဖွားရာ အရပ်သည် *နဟောတိ ^မဖြစ် *အညေသံ ^တပါးကုန်သော *သတ္တာနံ ^သတ္တဝါတို့၏ *ဇာတဋ္ဌာနံ ^ဖွားရာအရပ်ကို *ဇာတိဘူမီတိ ^ဇာတိဘူမိဟူ၍ *နဝုစ္စတိ ^မဆိုအပ် *ယဿ ပန ^အကြင် ဘုရားလောင်းအား *ဇာတဒိဝသေ ^ဖွားသော နေ့၌ *ဒသသဟဿိ လောကဓာတု ^တစ်သောင်းသော-လောကဓာတ်သည် *ဧက ဓဇ မာလာ ဝိပ္ပကိဏ္ဏ ကုသုမဝါသ စုဏ္ဏဂန္ဓ သုဂန္ဓာ သဗ္ဗဖာလိပုလ္လံ ^တစ်ပြိုင်နက်သော-တံခွန်-ပန်းတို့ဖြင့် ရောပြွမ်းသော-ပန်းပွင့်တို့ဖြင့်ထုံအပ်သော- ပန်းဝတ်မှုန်အနံ့တို့ဖြင့်-ကောင်းသော အနံ့ရှိသော- အလုံးစုံပင်လုံးကျွတ်ပွင့်သော *နန္ဒဝနံ ^နန္ဒဝန်-ဥယျဉ်သည် *ဝိရောစမာနံဣဝ ^ပဒုမ္မာကြာဖက်၌ *ဥဒကဗိန္ဒုဝိယ ^ရေပေါက်ကဲ့သို့ *အကမ္ပိတ္ထ ^တုန်လှုပ်ပြီ *ဇစ္စန္ဓာဒီနဉ္စ ^အမိဝမ်းတွင်းမှ- ကန်းသောသူအစရှိသည်တို့၏လည်း *ရူပဒဿနာဒီနိ ^ရူပါရုံကိုမြင်ခြင်း- အစရှိကုန်သော *အနေကာနိ ^များစွာကုန်သော *ပါဋိဟာရိယာနိ ^အံ့ဖွယ်သရဲတို့သည်";
            suttaPageData.UserID = "user1@gmail.com";
            suttaPageData.NISRecCount = 50;
            suttaPageData.NISRecLen = 1639;
            await clientSuttaPageData.UpdateSuttaPageDataAsync(suttaPageData);
        }
    }
    private async Task AdminWork1()
    {
        if (email != "dhammayaungchi2011@gmail.com") return;
        if (State.dataFile == null) await Task.Delay(50);
        ClientSuttaInfo? clientSuttaInfo = State.dataFile!.GetClientSuttaInfo();
        ClientTaskAssignmentInfo? clientTaskAssignmentInfo = State.dataFile!.GetClientTaskAssignmentInfo();
        if (clientSuttaInfo == null || clientTaskAssignmentInfo == null) return;
        string query = "Status eq 'Created'";
        List<SuttaInfo> listSuttaInfo = await clientSuttaInfo.QuerySuttaInfoAsync(query);
        if (listSuttaInfo.Count == 0) return;
        FileStream fs = new FileStream(@"C:\Users\auzma\AppData\Local\Temp\NDES_out.txt", FileMode.Create, FileAccess.Write);
        StreamWriter sw = new StreamWriter(fs);
        await sw.WriteLineAsync("DocIDs with no task assignment info created.");
        await sw.FlushAsync();
        int nPages;
        string startDate = "";
        string ownerName = "Hein Si Thu Win";
        TaskAssignmentInfo? taskAssignmentInfo = null;
        foreach(SuttaInfo suttaInfo in listSuttaInfo)
        {
            if (suttaInfo == null || suttaInfo.Team.Length > 0) continue;
            if (suttaInfo != null && suttaInfo.Timestamp != null)
            {
                startDate = suttaInfo.Timestamp.Value.ToString("d/M/yyyy");
                taskAssignmentInfo = clientTaskAssignmentInfo.GetTaskAssignmentInfo(suttaInfo.RowKey);
            }
            if (taskAssignmentInfo == null) 
            {
                // create a new TaskAssignmentInfo
                // sw.WriteLine(String.Format("{0}", suttaInfo.RowKey));
                UserTaskProgressInfo userTaskProgressInfo = new UserTaskProgressInfo()
                    {
                        userID = "heinsithuwin95@gmail.com",
                        task = "NewDoc",
                        startDate = startDate,
                        lastDate = "",
                        submitted = 0,
                        corrections = 0,
                        status = "Created",
                    };
                nPages = suttaInfo!.EndPage - suttaInfo.StartPage + 1;
                List<UserTaskProgressInfo> dictUserTaskProgressInfo = new List<UserTaskProgressInfo>()
                {
                    userTaskProgressInfo
                };
                string assigneeProgress = JsonConvert.SerializeObject(dictUserTaskProgressInfo);
                taskAssignmentInfo = new TaskAssignmentInfo()
                    {
                        RowKey = suttaInfo.RowKey,
                        DocTitle = suttaInfo.Title,
                        PageNos = String.Format("{0}-{1} ({2})", suttaInfo.StartPage, suttaInfo.EndPage, nPages),
                        PagesSubmitted = 0,
                        AssigneeProgress = assigneeProgress,
                        StartDate = startDate,
                        LastDate = "",
                        CorrectionCount = 0,
                        Status = "Created",
                    };
                suttaInfo.Team = ownerName;
                await clientSuttaInfo.UpdateTableRec(suttaInfo);
                await clientTaskAssignmentInfo.InsertTableRec(taskAssignmentInfo);
                await sw.WriteLineAsync(String.Format("TaskAssignment writtent to {0}.", taskAssignmentInfo.RowKey));
                await sw.FlushAsync();
                //break;
            }
        }
        fs.Close();
    }
}