@page "/nissaya_source/{email}/{userName}/{userClass}"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations

@inject SfDialogService DialogService
@inject NavigationManager NavManager
@inject State State

@namespace NissayaEditor_Web.Data
@using Tipitaka_DBTables
@using Tipitaka_DB

@* https://stackoverflow.com/questions/70509410/how-to-specify-where-html-goes-in-a-blazor-component *@
<Administration componentName="NissayaSource" email=@email userName=@userName userClass=@userClass flex_width="550px">
    <adminMenuItem>Nissaya Source Books</adminMenuItem>
</Administration>
<br/>
<label style="font-size:16px; text-align:left">No. of Books = @noBooks</label>
<label style="font-size:16px; margin-left:400px; width:250px; text-align:right">Total Docs (Pages): &nbsp;&nbsp;&nbsp;@totalDocs (@totalPages)</label>
<br />
@**************************** NissayaSource DataGrid ****************************@
<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@NissayaBookRecords" @ref="sfgrid" AllowPaging="false" AllowFiltering="false" AllowReordering="false" AllowResizing="false" AllowExcelExport="false" AllowSelection="true"
            AllowSorting="false" AllowTextWrap="true" Height="300" Width="800">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog='true'
                          NewRowPosition="NewRowPosition.Bottom" Mode="Syncfusion.Blazor.Grids.EditMode.Normal">
        </GridEditSettings>
        <GridPageSettings PageSize="100"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        @* <GridEvents OnActionBegin="ActionBeginUser" OnActionComplete="ActionCompleteUser" OnToolbarClick="ToolbarClick" TValue="DisplaySourceBookInfo"></GridEvents> *@
        <GridEvents RowSelected="RowSelectHandler" TValue="SourceBookInfo"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(SourceBookInfo.RowKey) HeaderText="Book ID" IsPrimaryKey="true" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" AllowEditing="false" Width="10%" Type="ColumnType.Integer" DefaultValue=@GetSrNo() ValidationRules="@(new ValidationRules{ Required=true })" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(SourceBookInfo.BookFilename) HeaderText="Book PDF File" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" TextAlign="TextAlign.Left" Width="70%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(SourceBookInfo.DocCount) HeaderText="No Docs" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" TextAlign="TextAlign.Center" Width="10%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(SourceBookInfo.Pages) HeaderText="Pages" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" TextAlign="TextAlign.Center" Width="10%" Type="ColumnType.Integer"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
<br/>
@************************* End of NissayaSource DataGrid *************************@

@***************************** Doc in Each PDF Grid ******************************@
@* <h6>@pdfFileName</h6> *@
<label style="font-size:16px; width:600px; text-align:left">@pdfFileName</label>
<label style="font-size:16px; margin-left:10px; width:170px; text-align:right">Total Docs: @DocInfoRecords.Count</label>
<br />
<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@DocInfoRecords" @ref="sfgrid1" AllowPaging="false" AllowFiltering="false" AllowReordering="false" AllowResizing="false" AllowExcelExport="false" AllowSelection="true"
            AllowSorting="false" AllowTextWrap="true" Height="300" Width="800">
        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" ShowDeleteConfirmDialog='true'
                          NewRowPosition="NewRowPosition.Bottom" Mode="Syncfusion.Blazor.Grids.EditMode.Normal">
        </GridEditSettings>
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridColumns>
            <GridColumn Field=@nameof(DocInfo.srNo) HeaderText="Sr No" IsPrimaryKey="true" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" AllowEditing="false" Width="8%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.docNo) HeaderText="Doc No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" AllowEditing="false" Width="18%" Type="ColumnType.String" TextAlign="TextAlign.Left"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.docTitle) HeaderText="Title" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" TextAlign="TextAlign.Left" Width="40%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.PageNos) HeaderText="Pages" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" TextAlign="TextAlign.Center" Width="12%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(DocInfo.status) HeaderText="Status" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})" AllowEditing="false" Width="12%" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
@************************* End of Doc in Each PDF Grid ***************************@

@*********************** Button: Upload more source books ************************@
<div style="width:180px;height:32px; padding-top:23px; padding-left:11px" class="form-group col-md-2 column">
    @* hidden="@(!hide_file_browser)"*@
    @* <SfButton CssClass="e-custom2" OnClick="@UploadMoreBooks"> Upload Additional Book Info From File  </SfButton> *@
</div>
@********************* End Button: Upload more source books **********************@

@*************************** Upload more source books ****************************@
<br />
<div hidden="@hide_file_browser">
    <SfUploader AutoUpload="true">
        <UploaderEvents ValueChange="@OnFileUpload" OnCancel="@OnCancelHandler"></UploaderEvents>
    </SfUploader>
</div>
@************************ End of Upload more source books ************************@
@*************************** System Admin button styles ***************************@
<style>
   .e-custom2 {
        display: @ProjectAdminButtonHide;
        /* border-radius: 25px; */
        height: 32px;
        color: white;
        background: grey;
        /* width: 120px; */
   }
</style>
@********************************** Grid styles **********************************@
<style>
    .e-grid {
        line-height: 20px;
    }

    .e-headercell.e-attr1 {
        background: #cfcfcf;
    }

    .e-grid .e-altrow {
        background-color: #F3F2F1;
    }

    .e-grid .e-rowcell.e-selectionbackground {
        background-color: lightsteelblue !important;
    }

    .e-grid tr.e-row:hover .e-rowcell:not(.e-cellselectionbackground):not(.e-active):not(.e-updatedtd):not(.e-indentcell) {
        border-block-color: black;
        border-block-start-color: black;
        /* border-bottom-color: black; */
    }
</style>
@****************************** End of Grid styles ******************************@

@code {
    [Parameter]
    public string email { get; set; } = "";
    [Parameter]
    public string userName { get; set; } = "";
    [Parameter]
    public string userClass { get; set; } = "";

    public class DocInfo()
    {
        public int srNo { get; set; }
        public string docNo { get; set; }
        public string docTitle { get; set; }
        public string sourceFileCode { get; set; }
        public int startPage { get; set; }
        public int endPage { get; set; }
        public int pages { get; set; }
        public string PageNos { get; set;}
        public string status { get; set; }
    }

    SfGrid<SourceBookInfo>? sfgrid;
    SfGrid<DocInfo>? sfgrid1;

    int noBooks = 0;
    int totalPages = 0;
    int totalDocs = 0;
    bool hide_file_browser = true;
    string pdfFileName = "PDF File Name :";
    string ProjectAdminButtonHide = "none";

    List<SourceBookInfo> NissayaBookRecords = new List<SourceBookInfo>();
    List<DocInfo> DocInfoRecords = new List<DocInfo>();

    protected override void OnInitialized()
    {
        PopulateGrid();
        ProjectAdminButtonHide = (userClass == "S" || State.dataFile.PayrollAdmin()) ? "block" : "none";
    }

    int srno = 0;
    private int GetSrNo() { return ++srno; }
    private void UploadMoreBooks()
    {
        hide_file_browser = false;
    }
    private void PopulateGrid()
    {
        int pages = 0;
        int rowIndex = 0;
        int docPages, bkPages;
        if (NissayaBookRecords.Count == 0)
        {
            SortedDictionary<string, SourceBookInfo> dictSourceBookInfo = State.dataFile.GetSourceBookInfo();
            foreach (SourceBookInfo sourceBookInfo in dictSourceBookInfo.Values)
            {
                if (sourceBookInfo.DocNos.Length > 0)
                    sourceBookInfo.DocCount = sourceBookInfo.DocNos.Split(',').ToList().Count;
                else
                    sourceBookInfo.DocCount = 0;
                State.dataFile.GetDocPages(sourceBookInfo.Pages, out docPages, out bkPages);
                sourceBookInfo.Pages = bkPages;
                NissayaBookRecords.Add(sourceBookInfo);
                pages += bkPages;
                totalDocs += sourceBookInfo.DocCount;
            }
            noBooks = NissayaBookRecords.Count;
            totalPages = pages;
        }
    }
    private async Task PopulateGridAtImport(List<SourceBookInfo> listPDF)
    {
        int pages = 0;
        int rowIndex = 0;
        Dictionary<string, SourceBookInfo> sortedDict = new Dictionary<string, SourceBookInfo>();
        foreach(SourceBookInfo sourceBookInfo in NissayaBookRecords)
        {
            sortedDict.Add(sourceBookInfo.RowKey, sourceBookInfo);
        }
        foreach(SourceBookInfo sourceBookInfo in listPDF)
        {
            sortedDict.Add(sourceBookInfo.RowKey, sourceBookInfo);
        }
        noBooks = 0;
        totalPages = 0;
        NissayaBookRecords = new List<SourceBookInfo>();
        foreach(string key in sortedDict.Keys)
        {
            ++noBooks;
            totalPages += sortedDict[key].Pages;
            NissayaBookRecords.Add(sortedDict[key]);
        }
    }
    private async Task OnFileUpload(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                MemoryStream filestream = new MemoryStream();
                await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                var buffer = new byte[filestream.Length];
                filestream.Read(buffer, 0, (int)filestream.Length);
                string fileContent = buffer.ToString();
                fileContent = System.Text.Encoding.UTF8.GetString(filestream.ToArray());
                filestream.Close();
                string[] recs = fileContent.Split("\n");
                // string[] recs = fileContent.Split("\r\n");
                if (State.dataFile != null) 
                {
                    List<SourceBookInfo> listPDF = State.dataFile.AddSourceBookInfo(recs);
                    if (listPDF.Count > 0)
                    {
                        PopulateGridAtImport(listPDF);
                        ClientActivityLog? clientActivityLog = State.dataFile.GetClientActivityLog();
                        string msg = String.Format("Info of {0} new source books imported.", listPDF.Count);
                        if (clientActivityLog != null)
                            clientActivityLog.AddActivityLog(email, "SourcePDF", msg);
                        AlertBtn(msg, "Success");
                    }
                    else AlertBtn("Nothing to import.", "Alert");
                }
            }
            hide_file_browser = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private void OnCancelHandler(CancelEventArgs args)
    {
        hide_file_browser = true;
    }
    //***********************************************************************
    //******** RowSelectHandler()
    //***********************************************************************
    public void RowSelectHandler(RowSelectEventArgs<SourceBookInfo> args)
    {
        if (State.dataFile == null) return;
        SourceBookInfo sourceBookInfo = args.Data;
        pdfFileName = sourceBookInfo.BookFilename;
        List<SuttaInfo> list = State.dataFile.GetPDFSuttaList(sourceBookInfo.RowKey);
        DocInfoRecords = new List<DocInfo>();
        int n = 0;
        string taskStatus = "";
        foreach(SuttaInfo suttaInfo in list)
        {
            taskStatus = suttaInfo.Status;
            if (taskStatus != "Completed")
            {
                if (suttaInfo.PagesSubmitted == suttaInfo.NoPages) taskStatus = "Completed";
                else
                {
                    int pct = (int)(suttaInfo.PagesSubmitted * 100F / suttaInfo.NoPages);
                    taskStatus = String.Format("{0}%", pct);
                }
            }
            DocInfoRecords.Add(new DocInfo()
            {
                srNo = ++n,
                docNo = suttaInfo.RowKey,
                docTitle = suttaInfo.Title,
                startPage = suttaInfo.StartPage,
                endPage = suttaInfo.EndPage,
                pages = suttaInfo.NoPages,
                PageNos = String.Format("{0}-{1} ({2})", suttaInfo.StartPage, suttaInfo.EndPage, suttaInfo.NoPages),
                status = taskStatus
            });
        }
    }
    //***********************************************************************
    //******** AlertBtn(string msg, string caption)
    //***********************************************************************
    private async Task AlertBtn(string msg, string warn)
    {
        await DialogService.AlertAsync(msg, warn, new DialogOptions()
            {
                PrimaryButtonOptions = new DialogButtonOptions() { Content = "Ok" }
            });
    }
}
