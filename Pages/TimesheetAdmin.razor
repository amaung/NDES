@page "/timesheetadmin/{email}/{userName}/{userClass}"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Calendars
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject SfDialogService DialogService
@inject NavigationManager NavManager
@inject State State

@namespace NissayaEditor_Web.Data
@using Tipitaka_DBTables
@using Tipitaka_DB

@code {
    [Parameter]
    public string email { get; set; } = "";
    [Parameter]
    public string userName { get; set; } = "";
    [Parameter]
    public string userClass { get; set; } = "";

    public class DataItem
    {
        public string Id { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }
    List<SuttaInfo> userSuttaListRecent = new List<SuttaInfo>();
    List<DataItem> DocNoList = new List<DataItem>();
    List<string> TaskItems = new List<string>() { 
        TaskCategories._DataEntry_,
        TaskCategories._Review_,
        TaskCategories._Edit_,
        TaskCategories._EditUpload_,
        TaskCategories._HTML_,
        TaskCategories._ProgectManagement_,
        TaskCategories._Others_
    };
    List<DataItem> TaskList = new List<DataItem>();
    //***********************************************************************
    //***************************** Initialize ******************************
    //***********************************************************************
    protected override async Task OnInitializedAsync()
    {
        ClientTimesheet? clientTimesheet = State.dataFile.GetClientTimesheet();
        if (clientTimesheet != null)
        {
            listMonthTimesheet = clientTimesheet.GetMonthTimesheet("", DateTime.Now.Year, DateTime.Now.Month);
            
            if (DateTime.Now.Month > 1)
                listLastMonthTimesheet = clientTimesheet.GetMonthTimesheet("", DateTime.Now.Year, DateTime.Now.Month-1);
            else
                listLastMonthTimesheet = clientTimesheet.GetMonthTimesheet("", DateTime.Now.Year-1, 12);

            listMonthTimesheet.AddRange(listLastMonthTimesheet);

            LoadSelectedViewTimesheet(); //(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        }
        UserList = new List<DataItem>() { new DataItem() { Id = "select", Text = "select" }};
        HashSet<string> userIDs = new HashSet<string>();
        foreach(Timesheet timesheet in listMonthTimesheet)
        {
            if (!userIDs.Contains(timesheet.UserID))
            {
                userIDs.Add(timesheet.UserID);
                UserList.Add(new DataItem()
                {
                    Id = timesheet.UserID,
                    Text = State.dataFile.GetUserName(timesheet.UserID)
                });
            }
            string md = timesheet.Date.Substring(5);
            if (!timesheetMonDay.Contains(md)) timesheetMonDay.Add(md);
        }
        //UpdateTestData();
    }
    // **************************************************
    // *** AlertBtn : Alert message box
    // **************************************************
    private async Task AlertBtn(string msg, string warn)
    {
        await DialogService.AlertAsync(msg, warn, new DialogOptions()
            {
                PrimaryButtonOptions = new DialogButtonOptions() { Content = "Ok" }
            });
    }
}
@* *************************************************************************** *@
@* ***************************** Base Component ****************************** *@
@* *************************************************************************** *@
<Administration componentName="Timesheet" email=@email userName=@userName userClass=@userClass flex_width="850px">
    <adminMenuItem>Timesheet</adminMenuItem>
</Administration>

@* <div id="ControlRegion" style="background-color: #f7f0df; width: 100%;">
    <div class="menu-control">
        <SfMenu Items="@MenuData">
            <MenuEvents TValue="MenuItem" ItemSelected="menuitemSelected"></MenuEvents>
        </SfMenu>
    </div>
</div> *@
@* Menu style
https://www.syncfusion.com/forums/173054/menu-bar-font-color-and-vertical-align-for-sub-items
*@

@* <br/>
<label style="font-size:20px"><strong>Timesheet</strong></label>
<label style="width:870px;text-align:right;">User: @userName</label>
<br/> *@
<div class="control-wrapper">
        <SfCalendar TValue="DateTime?" @ref="sfcalendar" Min='@MinDate' Value='@DateValue' Max='@MaxDate' FirstDayOfWeek=1>
            <CalendarEvents TValue="DateTime?" OnRenderDayCell="CustomDates" ValueChange="CalendarValuechangeHandler"></CalendarEvents>
            @* <CalendarEvents TValue="DateTime?" ValueChange="CalendarValuechangeHandler"></CalendarEvents> *@
        </SfCalendar>
</div>
<br/><br/>
<div style="width:1000px;">
    <div style="display:inline-block; width:25%;">
        <label style="font-size:18px;">View : </Label>
        <select name="viewtype" id="script-select" @onchange="@ViewChanged" style="height:30px; width:120px">
            <option value="Day" selected>Day</option>
            <option value="Week">Week</option>
            <option value="Month">Month</option>
        </select>
    </div>
    <div style="display:inline-block; width:50%;">
        <label style="font-size:18px;">User :</label>
        <Select id="user_select" style="height:30px;width:200px;" @onchange="OnUserChanged">
        @* <Select  id="user_select" style="height:30px;width:200px;" @bind-Value="selectedUserName"> *@
            @* ValueChanged="@((string value) => OnUserChanged(value ))"> *@
            @* @onchange="OnUserChanged"> *@
            @* onchange="@((string value) => OnUserChanged(value ))"> *@
            @* ValueChanged="@((string value) => OnUserChanged(value ))"> *@
            @* "@OnUserChanged"> *@
            @foreach (var user in UserList)
            {
                <option value="@user.Id">@user.Text</option>
            }
        </Select >
        <SfButton style="width:75px; height:30px; padding-top:1px; margin-left:40px;" IsPrimary="true" OnClick="@LoadSelectedViewTimesheet">Show</SfButton>
        @* <button style="width:75px; height:30px;">Show</button> *@
        @* <SfDropDownList TValue="string" TItem="DataItem" @bind-Value="selectedUserName" Placeholder="Select user"
                        MultiSelectMode="None" PopupHeight="200px" DataSource="@UserList">
            <DropDownListEvents TItem="DataItem" TValue="string" ValueChange="@UserChangeHandler"></DropDownListEvents>
            <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
        </SfDropDownList> *@
    </div>
</div>
<br/>
<h5>@selectedDate</h5>
<div style="padding-top:15px; padding-bottom:12px">
    <label style="width:420px; margin-left:10px; text-align:left;">Hours : @hoursWorked</label>
    <label style="width:150px;">Status : Submitted @timesheetStatus</label>
    <label style="width:383px; text-align:right;">Pages : @pagesWorked</label>
</div>
@***************************************************************************************@
@*********************************** Timesheet DataGrid ********************************@
@***************************************************************************************@
<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@TimesheetInfoRecords" @ref="sfgrid" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowSelection="true"
            Toolbar="@(new List<string>() { "ExcelExport" })" AllowExcelExport="true" AllowSorting="true" AllowTextWrap="false" Height="450" Width="1000">
            @* Toolbar="@(new List<string>() { "Add", "Edit", "Delete" })" AllowTextWrap="false" Height="380" Width="1000"> *@
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog='true'
                          NewRowPosition="NewRowPosition.Bottom" Mode="@EditMode.Normal" Dialog="DialogParams">
        </GridEditSettings>
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        @* <GridEvents TValue="TaskInfo" RowSelected="RowSelectHandler"></GridEvents>*@
        <GridEvents RowSelected="RowSelectHandler" OnActionBegin="ActionBegin" OnActionComplete="ActionComplete" OnToolbarClick="ToolbarClick" TValue="TimesheetInfo"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(TimesheetInfo.dayOfMonth) HeaderText="Day" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        IsPrimaryKey="true" AllowEditing="false" Width="6%" Type="ColumnType.Integer" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(TimesheetInfo.hours) HeaderText="Hours" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        IsPrimaryKey="true" AllowEditing="false" Width="12%" Type="ColumnType.String" TextAlign="TextAlign.Left"></GridColumn>
            <GridColumn Field=@nameof(TimesheetInfo.docNo) HeaderText="Doc No" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        AllowEditing="false" Width="15%" Type="ColumnType.String" TextAlign="TextAlign.Left"></GridColumn>
            <GridColumn Field=@nameof(TimesheetInfo.task) HeaderText="Task" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left" AllowEditing="false" Width="15%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(TimesheetInfo.description) HeaderText="Description" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Left" AllowEditing="false" Width="40%" Type="ColumnType.String"></GridColumn>
            <GridColumn Field=@nameof(TimesheetInfo.pageNos) HeaderText="Pages" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr1" }})"
                        TextAlign="TextAlign.Center" AllowEditing="false" Width="12%" Type="ColumnType.String"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
<br>
@* <div style="margin-left:475px">
    <SfButton IsPrimary="true" @onclick="onSubmitTimesheet">Submit</SfButton>
</div> *@
@* *************************************************************************** *@
@* ************************* New doc info SfDialog *************************** *@
@* *************************************************************************** *@
<div>
    <SfDialog Width="500px" MinHeight="495px" ShowCloseIcon="false" AllowDragging="true" IsModal="true" @bind-Visible="@IsVisible_TimesheetDialog">
        <DialogTemplates>
            <Header> Enter new timesheet </Header>
            <Content>
                <div>
                    <div class="form-group col-md-6 column">
                        <label class="col-form-label">Select Start Time :</label>
                        <SfTimePicker TValue="DateTime?" @bind-Value="@StartTimeValue" Min='@MinVal' Step=30 Format="h:mm tt"></SfTimePicker>
                    </div>
                    <div class="form-group col-md-6 column">
                        <label class="col-form-label">Select End Time :</label>
                        <SfTimePicker TValue="DateTime?" @bind-Value="@EndTimeValue" Min='@MinVal' Step=30 Format="h:mm tt"></SfTimePicker>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6 column">
                            <label class="col-form-label">Select DocNo :</label>
                            <SfDropDownList TItem="DataItem" DataSource="@DocNoList" @ref=docDropdown @bind-Value="@DocNoValue" TValue="string" PopupHeight="400px" Placeholder="Select document no.">
                                <DropDownListEvents TItem="DataItem" TValue="string" OnValueSelect="@OnValueSelecthandler" ></DropDownListEvents>
                                <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6 column">
                            <label class="col-form-label">Select Task :</label>
                            <SfDropDownList TItem="DataItem" TValue="string" DataSource="@TaskList" @bind-Value="@TaskValue" PopupHeight="400px" Placeholder="Select task.">
                                <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="form-row multiline col-md-12" style="padding:9px;">
                        <label class="col-form-label">Description :</label>
                        <SfTextBox Multiline=true @bind-Value="@Description" CssClass="e-custom-height e-outline"></SfTextBox>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6 column">
                            <label class="col-form-label">Start Page :</label>
                            <SfNumericTextBox TValue="int?" ShowSpinButton="false" @bind-Value="@StartPage"></SfNumericTextBox>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6 column">
                            <label class="col-form-label">End Page :</label>
                            <SfNumericTextBox TValue="int?" ShowSpinButton="false" @bind-Value="@EndPage"></SfNumericTextBox>
                        </div>
                    </div>                    
                </div>
                <br />
                <div>
                    <p style="padding: 10px;color:brown">@timeSheetEntryErrMsg</p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton style="width:75px" Content="Cancel" OnClick="@onCancelTimesheet" />
            <DialogButton style="width:75px" Content="Ok" IsPrimary="true" OnClick="@onOKTimesheet" />
        </DialogButtons>
    </SfDialog>
</div>

@* https://blazor.syncfusion.com/documentation/timepicker/getting-started *@
@* https://www.syncfusion.com/forums/171648/timepicker-only-in-gridcolumn *@
<style>
    .menu-control, .e-menu-container, .e-menu-container.e-menu-popup,
    .e-menu-container ul .e-menu-item, .e-menu-container .e-ul .e-menu-item {
        background-color: #ded8ca;
        font-size: 18px;
    }
</style>
<style>
    .e-grid {
        line-height: 20px;
    }

    .e-headercell.e-attr1 {
        background: #cfcfcf;
    }

    .e-grid .e-altrow {
        background-color: #F3F2F1;
    }

    .e-grid .e-rowcell.e-selectionbackground {
        background-color: lightsteelblue !important;
    }

    .e-grid tr.e-row:hover .e-rowcell:not(.e-cellselectionbackground):not(.e-active):not(.e-updatedtd):not(.e-indentcell) {
        border-block-color: black;
        border-block-start-color: black;
        /* border-bottom-color: black; */
    }
</style>
<style>
    #display-date {
        max-width: 300px;
        margin: 0 auto;
        padding: 15px 0;
        font-size: 13px;
    }
    .control-wrapper {
        width: 300px;
        /* margin: 0 auto; */
        padding-top: 20px;
    }
    .e-calendar .e-content .e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td:hover.e-cell.timesheet-data span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.timesheet-data span.e-day {
        color: #28a745;
        color: white;
        color: blue;
        color: brown;
        /* color: yellow; */
        /* background-color: grey; */
        background: yellow;
        background: blue;
        background: AliceBlue;
        font-weight: 800;
    }
    .e-calendar .e-content .e-cell.timesheet-data span.e-day,
    .e-calendar .e-content td:hover.e-cell.timesheet-data span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.timesheet-data span.e-day {
        color: darkblue;
        background: yellow;
        font-weight: 900;
    }
    .e-calendar .e-content .e-cell.official-appointment span.e-day,
    .e-calendar .e-content td:hover.e-cell.official-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.official-appointment span.e-day {
        color: #dc3545;
        font-weight: 800;
    }
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.official-appointment span.e-day {
        background-color: #b511485e;
    }
    .e-custom-height {
        height: 80px;
    }
    .column {
        float: left;
        padding: 9px;
        width: 50%;
        /* height: 530px; /* should be removed. only for demonstration */
    }</style>
@code{
    //https://blazor.syncfusion.com/documentation/datagrid/templates#templates
    #pragma warning disable
    private List<MenuItem> MenuData = new List<MenuItem>
    {
        new MenuItem
        {
            Text = "DataPage"
        },
        new MenuItem
        {
            Text = "Logout",
        }
    };
    private async Task menuitemSelected(MenuEventArgs<MenuItem> args)
    {
        switch(args.Item.Text)
        {
            case "Logout": NavManager.NavigateTo("/"); 
                break;
            case "DataPage":
                State.screenID = 5;
                NavManager.NavigateTo(String.Format("/nissayaeditor/{0}/{1}/{2}", email, userName, userClass)); 
            break;
        }
    }
}
@code{
    public class TimesheetInfo()
    {
        public string rowKey { get; set; }
        public string date { get; set; }
        public string userID { get; set; }
        public int? dayOfMonth { get; set; }
        public string hours { get; set; }
        public DateTime? startTime { get; set; }
        public DateTime? endTime { get; set; }
        public string docNo { get; set; }
        public string task { get; set; }
        public string description { get; set; }
        public int? startPage { get; set; }
        public int? endPage { get; set; }
        public int pages { get; set; }
        public string pageNos { get; set; }
        public string status { get; set; }

        public TimesheetInfo(TimesheetInfo timesheetInfo) : this()
        {
            this.rowKey = timesheetInfo.rowKey;
            this.date = timesheetInfo.date;
            this.userID = timesheetInfo.userID;
            this.dayOfMonth = timesheetInfo.dayOfMonth;
            this.hours = timesheetInfo.hours;
            this.startTime = timesheetInfo.startTime;
            this.endTime = timesheetInfo.endTime;
            this.docNo = timesheetInfo.docNo;
            this.task = timesheetInfo.task;
            this.description = timesheetInfo.description;
            this.startPage = timesheetInfo.startPage;
            this.endPage = timesheetInfo.endPage;
            this.pages = timesheetInfo.pages;
            this.pageNos = timesheetInfo.pageNos;
            this.status = timesheetInfo.status;
        }

        public bool Equal(TimesheetInfo timesheetInfo)
        {
            return 
                (this.rowKey == timesheetInfo.rowKey &&
                this.date == timesheetInfo.date &&
                this.userID == timesheetInfo.userID &&
                this.dayOfMonth == timesheetInfo.dayOfMonth &&
                this.hours == timesheetInfo.hours &&
                this.startTime == timesheetInfo.startTime &&
                this.endTime == timesheetInfo.endTime &&
                this.docNo == timesheetInfo.docNo &&
                this.task == timesheetInfo.task &&
                this.description == timesheetInfo.description &&
                this.startPage == timesheetInfo.startPage &&
                this.endPage == timesheetInfo.endPage &&
                this.pages == timesheetInfo.pages &&
                this.pageNos == timesheetInfo.pageNos);
        }
        public bool Equal(int dayOfMonth, DateTime startTime, DateTime endTime, string docNo, string task,
                            string description, int startPage, int endPage)
        {
            return 
                (this.dayOfMonth == dayOfMonth &&
                this.startTime == startTime &&
                this.endTime == endTime &&
                this.docNo == docNo &&
                this.task == task &&
                this.description == description &&
                this.startPage == startPage &&
                this.endPage == endPage);
        }
    }
    enum GridAction { NA, Add, Edit, Delete };
    GridAction userGridAction = GridAction.NA;
    Dictionary<string, List<TimesheetInfo>> dictUserTimesheetInfo = new Dictionary<string, List<TimesheetInfo>>();
    // Calendar code
    public DateTime MinVal { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 06, 00, 00);
    public DateTime MinDate {get;set;} = new DateTime(DateTime.Now.Year, DateTime.Now.Month-1, 1);
    public DateTime MaxDate {get;set;} = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime? DateValue {get;set;} = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime? StartTimeValue { get; set; } = null;
    public DateTime? EndTimeValue { get; set; } = null;
    public TimesheetInfo timesheetInfo = new TimesheetInfo();
    public SfDropDownList<string, DataItem> docDropdown;

    SfGrid<TimesheetInfo> sfgrid;
    SfCalendar<DateTime?> sfcalendar;
    List<TimesheetInfo> TimesheetInfoRecords = new List<TimesheetInfo>();
    List<TimesheetInfo> DeletedTimesheetInfo = new List<TimesheetInfo>();
    List<DataItem> UserList = new List<DataItem>();
    
    List<Timesheet> listMonthTimesheet = new List<Timesheet>();
    List<Timesheet> listLastMonthTimesheet = new List<Timesheet>();

    public DateTime selectedDateTime = DateTime.Now;
    string selectedDate = DateTime.Now.ToString("MMM d, yyyy");
    public DateTime? CurrentDate { get; set; } = DateTime.Now;
    string selectedViewType = "Day";
    DataItem selectedUserItem = new DataItem();
    string selectedUserName = "";
    bool IsVisible_TimesheetDialog = false;
 
    TimesheetInfo selectedTimesheetInfo = new TimesheetInfo();
    TimesheetInfo origSelectedTimesheetInfo = new TimesheetInfo();
    string timesheetStatus = "";
    float hoursWorked = 0F;
    int pagesWorked = 0;
    public string? DocNoValue { get; set; } = "";
    public string? TaskValue { get; set; } = "";
    public string? Description { get; set; } = "";
    public int? StartPage, EndPage;
    public string? timeSheetEntryErrMsg { get; set; } = "";
    public HashSet<int> timesheetDays = new HashSet<int>() { 1, 2 };
    public HashSet<string> timesheetMonDay = new HashSet<string>();

    DateTime? prevDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

    private DialogSettings DialogParams = new DialogSettings { Width = "500px" };

    public void CalendarValuechangeHandler(ChangedEventArgs<DateTime?> args)
    {
        // Here, you can customize your code.
        DateTime val = (DateTime)args.Value;
        if (val != prevDate && val != DateTime.Now)
        {
            selectedDateTime = val;
            selectedDate = val.ToString("MMM d, yyyy");
            DateValue = args.Value;
            prevDate = args.Value;
            //LoadSelectedViewTimesheet();
            // LoadSelectedDayTimesheet(selectedDateTime, selectedDateTime);
        }
    }
    public void ViewChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        selectedViewType = (string)e.Value;
        //LoadSelectedViewTimesheet();
    }
    Dictionary<string, RenderDayCellEventArgs> dictCellData = new  Dictionary<string, RenderDayCellEventArgs>();
    //https://www.syncfusion.com/forums/184535/is-there-a-way-to-set-datetime-to-now-when-clicked-on-today-button-in-datetimepicker
    public void CustomDates(RenderDayCellEventArgs args)
    {
        var CurrentMonth = CurrentDate.Value.Month;
        string md = String.Format("{0}-{1}", args.Date.Month.ToString("d2"), args.Date.Day.ToString("d2"));
        dictCellData[md] = args;
        // if (args.Date.Month == CurrentMonth && timesheetDays.Contains(args.Date.Day)) {
        //     args.CellData.ClassList += " personal-appointment";
        // }
        if (timesheetMonDay.Contains(md)) {
            if (!args.CellData.ClassList.Contains("personal-appointment"))
                args.CellData.ClassList += " personal-appointment";
        }
    }
    private void OnValueSelecthandler(SelectEventArgs<DataItem> args)
    {
        // Here, you can customize your code.
        timeSheetEntryErrMsg = String.Empty;
        var dt = (DataItem)args.ItemData;
        var docList = (from item in userSuttaListRecent 
                  where item.RowKey == dt.Text 
                  select item).ToList();
        if (docList.Count == 0) return;
        Description = docList[0].Title;
    }
    private void LoadSelectedViewTimesheet()
    {
        int idxDay = (int)selectedDateTime.DayOfWeek;
        if (dictCellData.ContainsKey("05-01"))
        {
            timesheetMonDay.Add("05-01");
            CustomDates(dictCellData["05-01"]); //.CellData.ClassList += " personal-appointment";
        }
        switch(selectedViewType)
        {
            case "Day":
                selectedDate = selectedDateTime.ToString("MMM d, yyyy");
                LoadSelectedDayTimesheet(selectedDateTime, selectedDateTime);
                break;
            case "Week":
                DateTime mon = selectedDateTime.AddDays(1 - idxDay);
                if (mon.Month < selectedDateTime.Month)
                    mon = new DateTime(selectedDateTime.Year, selectedDateTime.Month, 1);
                DateTime sun = selectedDateTime.AddDays(7 - idxDay);
                if (sun.Month > selectedDateTime.Month)
                    sun = new DateTime(selectedDateTime.Year, selectedDateTime.Month, 
                        DateTime.DaysInMonth(selectedDateTime.Year, selectedDateTime.Month));
                selectedDate = String.Format("{0}   -   {1}", mon.ToString("MMM d, yyyy"), sun.ToString("MMM d, yyyy"));
                LoadSelectedDayTimesheet(mon, sun);
                break;
            case "Month":
                int lastDay = DateTime.DaysInMonth(selectedDateTime.Year, selectedDateTime.Month);
                DateTime firstDayMon = new DateTime(selectedDateTime.Year, selectedDateTime.Month, 1);
                DateTime lastDayMon = new DateTime(selectedDateTime.Year, selectedDateTime.Month, lastDay);
                selectedDate = String.Format("{0}   -   {1}", firstDayMon.ToString("MMM d, yyyy"), lastDayMon.ToString("MMM d, yyyy"));
                LoadSelectedDayTimesheet(firstDayMon, lastDayMon);
                break;
        }
    }
    private void LoadSelectedDayTimesheet(DateTime dt1, DateTime dt2)
    {
        timesheetStatus = "";
        List<TimesheetInfo> timesheetInfoList = GetUserTimesheetInfo();
        if (timesheetInfoList.Count > 0)
        {
            RenderDayCellEventArgs args = new RenderDayCellEventArgs();
            string lastDay =  String.Format("{0:D4}-{1:D2}-{2:D2}", dt2.Year, dt2.Month, dt2.Day);
            string firstDay = String.Format("{0:D4}-{1:D2}-{2:D2}", dt1.Year, dt1.Month, dt1.Day);
            var list = (from item in timesheetInfoList 
                where String.Compare(item.date, firstDay) >= 0 &&
                      String.Compare(lastDay, item.date) >= 0 
                        select item).ToList();

            hoursWorked = 0F;
            pagesWorked = 0;
            foreach(TimesheetInfo timesheet in list)
            {
                DateTime sTime = (DateTime)timesheet.startTime;
                DateTime eTime = (DateTime)timesheet.endTime;
                TimeSpan dt = eTime - sTime;
                float deltaTime = (float)dt.Hours + dt.Minutes/60;
                hoursWorked += deltaTime;
                pagesWorked += (int)(timesheet.endPage - timesheet.startPage + 1);
            }
            TimesheetInfoRecords = list;
            // if (timesheetList.Count > 0) 
            // {
            //     foreach(Timesheet timesheet in timesheetList)
            //     {
            //         DateTime sTime = timesheet.StartTime;
            //         DateTime eTime = timesheet.EndTime;
            //         TimeSpan dt = eTime - sTime;
            //         float deltaTime = (float)dt.Hours + dt.Minutes/60;
            //         int day = Int32.Parse(timesheet.Date.Substring(8));
            //         hoursWorked += deltaTime;
            //         pagesWorked += timesheet.EndPage - timesheet.StartPage + 1;
            //         string hrs = String.Format("{0}-{1} ({2})", sTime.ToString("HH:mm"), eTime.ToString("HH:mm"), deltaTime);
            //         TimesheetInfoRecords.Add(new TimesheetInfo()
            //         {
            //             rowKey = timesheet.RowKey,
            //             date = timesheet.Date,
            //             userID = timesheet.UserID,
            //             dayOfMonth = day,
            //             hours = hrs,
            //             startTime = sTime,
            //             endTime = eTime,
            //             docNo = timesheet.DocNo,
            //             task = timesheet.Task,
            //             description = timesheet.Description,
            //             startPage = timesheet.StartPage,
            //             endPage = timesheet.EndPage,
            //             pages = timesheet.EndPage - timesheet.StartPage + 1,
            //             pageNos = String.Format("{0}-{1} ({2})", timesheet.StartPage, timesheet.EndPage, 
            //                         timesheet.EndPage - timesheet.StartPage + 1),
            //             status = timesheet.Status,
            //         });
            //         timesheetStatus = timesheet.Status;
            //     }
            // }
        }
    }
    private List<TimesheetInfo> GetUserTimesheetInfo()
    {
        List<TimesheetInfo> timesheetInfoList = new List<TimesheetInfo>();
        if (selectedUserItem.Text.Length == 0) return timesheetInfoList;
        string userID = selectedUserItem.Id;
        if (dictUserTimesheetInfo.ContainsKey(userID))
        {
            // data has been already processed; just return the data
            return dictUserTimesheetInfo[userID];
        }
        // process data 
        var timesheetList = (from item in listMonthTimesheet 
                  where item.UserID == userID
                  select item).ToList();
        if (timesheetList.Count > 0) 
        {
            foreach(Timesheet timesheet in timesheetList)
            {
                DateTime sTime = timesheet.StartTime;
                DateTime eTime = timesheet.EndTime;
                TimeSpan dt = eTime - sTime;
                float deltaTime = (float)dt.Hours + dt.Minutes/60;
                int day = Int32.Parse(timesheet.Date.Substring(8));
                hoursWorked += deltaTime;
                pagesWorked += timesheet.EndPage - timesheet.StartPage + 1;
                string hrs = String.Format("{0}-{1} ({2})", sTime.ToString("HH:mm"), eTime.ToString("HH:mm"), deltaTime);
                timesheetInfoList.Add(new TimesheetInfo()
                {
                    rowKey = timesheet.RowKey,
                    date = timesheet.Date,
                    userID = timesheet.UserID,
                    dayOfMonth = day,
                    hours = hrs,
                    startTime = sTime,
                    endTime = eTime,
                    docNo = timesheet.DocNo,
                    task = timesheet.Task,
                    description = timesheet.Description,
                    startPage = timesheet.StartPage,
                    endPage = timesheet.EndPage,
                    pages = timesheet.EndPage - timesheet.StartPage + 1,
                    pageNos = String.Format("{0}-{1} ({2})", timesheet.StartPage, timesheet.EndPage, 
                                timesheet.EndPage - timesheet.StartPage + 1),
                    status = timesheet.Status,
                });
            }
            dictUserTimesheetInfo[userID] = timesheetInfoList;
        }

        return timesheetInfoList;
    }
    public async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        //this.Grid.EnableToolbarItems(new List<string>() { "Grid_Expand", "Grid_Collapse" }, false);
        if (timesheetStatus == "Approved")
        {
            AlertBtn("This timesheet has been approved and is no longer editable.", "Alert");
            args.Cancel = true;
            return;
        }
        if (selectedViewType != "Day")
        {
            AlertBtn("Please switch View to Day to do the operation.", "Notice");
            args.Cancel = true;
            return;
        }
        if (args != null)
        {
            if (args.Item.Text.Equals("Add"))
            {
                userGridAction = GridAction.Add;
                StartTimeValue = EndTimeValue = null;
                DocNoValue = TaskValue = Description = null;
                StartPage = EndPage = null;
                IsVisible_TimesheetDialog = true;
                args.Cancel = true;
            }    
            if (args.Item.Text.Equals("Edit"))
            {
                userGridAction = GridAction.Edit;
                origSelectedTimesheetInfo = new TimesheetInfo(selectedTimesheetInfo);
                IsVisible_TimesheetDialog = true;
                args.Cancel = true;
            }
            if (args.Item.Text.Equals("Delete"))
            {
                userGridAction = GridAction.Delete;
                origSelectedTimesheetInfo = new TimesheetInfo(selectedTimesheetInfo);
            }
            if (args.Item.Id == "Grid_excelexport")
            {
                ExcelExportProperties ExcelProperties = new ExcelExportProperties();
                ExcelProperties.FileName = "TimesheetReport.xlsx";
                ExcelProperties.DataSource = TimesheetInfoRecords;
                await this.sfgrid.ExcelExport(ExcelProperties);
            }
       }
    }
    private void onCancelTimesheet()
    {
        timeSheetEntryErrMsg = String.Empty;
        IsVisible_TimesheetDialog = false;
    }
    private void onOKTimesheet()
    {
        timeSheetEntryErrMsg = String.Empty;

        if (EndTimeValue == null || StartTimeValue == null)
        {
            timeSheetEntryErrMsg = "Error: Start or end time not selected.";
            return;
        }
        if (EndTimeValue <= StartTimeValue)
        {
            timeSheetEntryErrMsg = "Error: End time must be greater than start time.";
            return;
        }
        if (DocNoValue == null || TaskValue == null)
        {
            timeSheetEntryErrMsg = "Error: DocNo or Task not selected.";
            return;
        }
        if (StartPage == null || EndPage == null)
        {
            timeSheetEntryErrMsg = "Error: Start or end page not entered.";
            return;
        }
        if (EndPage <= StartPage)
        {
            timeSheetEntryErrMsg = "Error: End page must be greater than start page.";
            return;
        }

        switch(userGridAction)
        {
            case GridAction.Edit:
                // IsVisible_TimesheetDialog = false;
                UserGridAction_Edit();
            break;
            case GridAction.Add:
                UserGridAction_Add();
            break;
        }
        IsVisible_TimesheetDialog = false;
    }
    private void UserGridAction_Add()
    {
        TimeSpan dt = (TimeSpan)(EndTimeValue! - StartTimeValue!);
        float deltaTime = (float)dt.Hours + (float)dt.Minutes/60F;
        string hrs = String.Format("{0}-{1} ({2})", StartTimeValue?.ToString("HH:mm"),
                EndTimeValue?.ToString("HH:mm"), deltaTime);

        int currentDay = ((DateTime)DateValue).Day;
        List<TimesheetInfo> list = new List<TimesheetInfo>(TimesheetInfoRecords);
        list.Add(new TimesheetInfo()
        {
            rowKey = "",
            dayOfMonth = currentDay,
            hours = hrs,
            startTime = StartTimeValue,
            endTime = EndTimeValue,
            docNo = DocNoValue,
            task = TaskValue,
            description = Description,
            startPage = (int)StartPage,
            endPage = (int)EndPage,
            pages = (int)(EndPage! - StartPage! + 1),
            pageNos = String.Format("{0}-{1}", (int)StartPage, (int)EndPage),
            status = "Added"
        });
        timesheetStatus = "Added";
        TimesheetInfoRecords = list;
        hoursWorked = 0F;
        pagesWorked = 0;
        foreach(TimesheetInfo timesheetInfo in TimesheetInfoRecords)
        {
            string[] f = timesheetInfo.hours.Split(' ');
            if (f.Length == 2)
            {
                f[1] = f[1].Replace("(", "").Replace(")", "");
                hoursWorked += float.Parse(f[1]);
            }
            pagesWorked += timesheetInfo.pages;
        }
        IsVisible_TimesheetDialog = false;

        timesheetDays = new HashSet<int>{ 20, 30 };
        string md = String.Format("{0}-{1}", ((DateTime)DateValue).Month.ToString("d2"), currentDay.ToString("d2"));
        if (!timesheetMonDay.Contains(md)) timesheetMonDay.Add(md);
    }
    private void UserGridAction_Edit()
    {
        bool flag = selectedTimesheetInfo.Equal(origSelectedTimesheetInfo);
        if (selectedTimesheetInfo.Equal(selectedDateTime.Day, (DateTime)StartTimeValue, (DateTime)EndTimeValue, 
                DocNoValue, TaskValue, Description, (int)StartPage, (int)EndPage)) return;
        // update the grid data
        TimeSpan dt = (TimeSpan)(EndTimeValue! - StartTimeValue!);
        float deltaTime = (float)dt.Hours + (float)dt.Minutes/60F;
        selectedTimesheetInfo.hours = String.Format("{0}-{1} ({2})", StartTimeValue?.ToString("HH:mm"), EndTimeValue?.ToString("HH:mm"), deltaTime);
        selectedTimesheetInfo.startTime = StartTimeValue;
        selectedTimesheetInfo.endTime = EndTimeValue;
        selectedTimesheetInfo.docNo = DocNoValue;
        selectedTimesheetInfo.task = TaskValue;
        selectedTimesheetInfo.description = Description;
        selectedTimesheetInfo.startPage = StartPage;
        selectedTimesheetInfo.endPage = EndPage;
        selectedTimesheetInfo.pages = (int)(EndPage - StartPage + 1);
        selectedTimesheetInfo.pageNos = String.Format("{0}-{1}", (int)StartPage, (int)EndPage);
        // if the row is edited before it has been submitted yet, don't change the status
        // if it is changed to "updated" it will assume that there is an existing data on the server
        if (selectedTimesheetInfo.status == "Submitted")
        {
            selectedTimesheetInfo.status = "Updated";
            timesheetStatus = "Updated";
        }
        List<TimesheetInfo> listTimesheetInfo = new List<TimesheetInfo>();
        foreach(TimesheetInfo timesheetInfo in TimesheetInfoRecords)
        {
            if (timesheetInfo.rowKey == selectedTimesheetInfo.rowKey)
                listTimesheetInfo.Add(new TimesheetInfo(selectedTimesheetInfo));
            else listTimesheetInfo.Add(timesheetInfo);
        }
        TimesheetInfoRecords = listTimesheetInfo;   // refresh grid data

        // update in Month's TimesheetList;
        var timesheetList = (from item in listMonthTimesheet 
                  where item.RowKey == selectedTimesheetInfo.rowKey 
                  select item).ToList();
        if (timesheetList.Count > 0)
        {
            timesheetList[0].StartTime = (DateTime)StartTimeValue;
            timesheetList[0].EndTime = (DateTime)EndTimeValue;
            timesheetList[0].DocNo = DocNoValue;
            timesheetList[0].Task = TaskValue;
            timesheetList[0].Description = Description;
            timesheetList[0].StartPage = (int)StartPage;
            timesheetList[0].EndPage = (int)EndPage;
        }
    }
    private void ActionBegin(ActionEventArgs<TimesheetInfo> args)
    {
        TimesheetInfo timesheetInfo = args.Data;
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save) && args.Action == "Add"))
        {
            if (timesheetInfo.endTime == null || timesheetInfo.startTime == null)
            {
                timeSheetEntryErrMsg = "Error: Start or end time not selected.";
                args.Cancel = true;
                return;
             }
            if (timesheetInfo.endTime <= timesheetInfo.startTime)
            {
                timeSheetEntryErrMsg = "Error: End time must be greater than start time.";
                args.Cancel = true;
                return;
            }
            TimeSpan dt = (TimeSpan)(timesheetInfo.endTime! - timesheetInfo.startTime!);
            float deltaTime = (float)dt.Hours + dt.Minutes/60;
            timesheetInfo.hours = String.Format("{0}-{1} ({2})", timesheetInfo.startTime?.ToString("HH:mm"),
                    timesheetInfo.endTime?.ToString("HH:mm"), deltaTime);
        }
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete) && args.Action == "Delete"))
        {
            List<TimesheetInfo> list = new List<TimesheetInfo>(TimesheetInfoRecords);
            var itemToRemove = list.Single(r => r.rowKey == selectedTimesheetInfo.rowKey);
            list.Remove(itemToRemove);
            TimesheetInfoRecords = list;
            timesheetStatus = "Deleted";
            DeletedTimesheetInfo.Add(selectedTimesheetInfo);
            args.Cancel = true;
            return;            
        }
    }
    static bool flag = true;
    private void ActionComplete(ActionEventArgs<TimesheetInfo> args)
    {
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete) && args.Action == "Delete"))
        {

        }
    }
    //************************************************************************************************
    //******** RowSelectHandler()
    //************************************************************************************************
    public void RowSelectHandler(RowSelectEventArgs<TimesheetInfo> args)
    {
        if (State.dataFile == null || args == null) return;
        TimesheetInfo timesheetInfo = args.Data;
        selectedTimesheetInfo = new TimesheetInfo(timesheetInfo);
        StartTimeValue = timesheetInfo.startTime;
        EndTimeValue = timesheetInfo.endTime;
        TaskValue = timesheetInfo.task;
        DocNoValue = timesheetInfo.docNo;
        Description = timesheetInfo.description;
        StartPage = timesheetInfo.startPage;
        EndPage = timesheetInfo.endPage;
        timesheetStatus = timesheetInfo.status;
    }
    //************************************************************************************************
    //******** onSubmitTimesheet()
    //************************************************************************************************
    private void onSubmitTimesheet()
    {
        if (timesheetStatus == "Approved")
        {
            AlertBtn("This timesheet has already been approved. No further action accepted.", "Alert");
            return;
        }
        if (TimesheetInfoRecords.Count > 0)
        {
            ClientTimesheet? clientTimesheet = State.dataFile.GetClientTimesheet();
            if (clientTimesheet != null)
            {
                string rowKey = "";
                int addCount = 0, updateCount = 0, deleteCount = 0;
                Timesheet timesheet;
                foreach(TimesheetInfo timesheetInfo in TimesheetInfoRecords)
                {
                    if (timesheetInfo.rowKey.Length == 0)
                    {
                        rowKey = String.Format("{0}${1}${2}", email, selectedDateTime.ToString("yyyy-MM-dd"), GetLastTick6());
                    }
                    switch(timesheetInfo.status)
                    {
                        case "Added":
                                timesheet = clientTimesheet.AddTimesheet(selectedDateTime, email, (DateTime)timesheetInfo.startTime, 
                                    (DateTime)timesheetInfo.endTime, timesheetInfo.docNo, timesheetInfo.task, timesheetInfo.description,
                                    (int)timesheetInfo.startPage, (int)timesheetInfo.endPage, "Submitted");

                            if (clientTimesheet.DBErrMsg.Length == 0)
                            {
                                listMonthTimesheet.Add(timesheet);
                                AddMonDayToHash(selectedDateTime.Month, selectedDateTime.Day);
                                addCount++;
                            }
                            else AlertBtn(clientTimesheet.DBErrMsg, "Error");
                            break;
                        case "Updated":
                            var timesheetList = (from item in listMonthTimesheet 
                                            where item.RowKey == timesheetInfo.rowKey
                                            select item).ToList();
                            if (timesheetList.Count > 0)
                            {
                                timesheetList[0].StartTime = (DateTime)timesheetInfo.startTime;
                                timesheetList[0].EndTime = (DateTime)timesheetInfo.endTime;
                                timesheetList[0].DocNo = timesheetInfo.docNo;
                                timesheetList[0].Task = timesheetInfo.task;
                                timesheetList[0].Description = timesheetInfo.description;
                                timesheetList[0].StartPage = (int)timesheetInfo.startPage;
                                timesheetList[0].EndPage = (int)timesheetInfo.endPage;
                            }
                            updateCount++;
                            clientTimesheet.UpdateTimesheet(timesheetList[0]);
                            if (clientTimesheet.DBErrMsg.Length > 0)
                                AlertBtn(clientTimesheet.DBErrMsg, "Error");
                            break;
                        case "Deleted":
                        // delete from listMonthTimesheet
                        // delete from storage
                            break;
                    }
                }
                if (DeletedTimesheetInfo.Count > 0)
                {
                    deleteCount = DeletedTimesheetInfo.Count;
                    foreach(TimesheetInfo timesheetInfo in DeletedTimesheetInfo)
                    {
                        var itemToRemove = listMonthTimesheet.Single(r => r.RowKey == timesheetInfo.rowKey);
                        listMonthTimesheet.Remove(itemToRemove);
                        clientTimesheet.DeleteTableRec(itemToRemove);
                    }
                }
                if (addCount == 0 && updateCount == 0 && deleteCount == 0)
                {
                    AlertBtn("No updates in the timesheet to submit.", "Alert");
                    return;
                }
                if (clientTimesheet.DBErrMsg.Length == 0)
                {
                    timesheetStatus = "Submitted";
                    string msg = "Timesheet submitted with ";
                    string operation = "";
                    if (addCount > 0) operation = "add";
                    if (updateCount > 0) operation += ((operation.Length == 0) ? "" : ", ") + "update" ;
                    if (deleteCount > 0) operation += ((operation.Length == 0) ? "" : ", ") + "delete";
                    if (addCount + updateCount + deleteCount > 1) operation += "operations."; else operation += "operation.";
                    AlertBtn(msg + operation, "Success");
                }
                else AlertBtn(clientTimesheet.DBErrMsg, "Error");
            }
        }
        else AlertBtn("Nothing to submit in the timesheet.", "Alert");
    }
    private void AddMonDayToHash(int mon, int day)
    {
        string md = String.Format("{0}-{1}", mon, day);
        if (!timesheetMonDay.Contains(md)) timesheetMonDay.Add(md);
    }
    private string GetLastTick6()
    {
        string t = DateTime.Now.Ticks.ToString();
        return t.Substring(t.Length - 6);
    }
    //************************************************************************************/
    //******** Search value change events
    /************************************************************************************/
    private void UserChangeHandler(ChangeEventArgs<string, DataItem> args)
    {
        if (args != null && args.ItemData != null)
            selectedUserName = args.ItemData.Text;
        else selectedUserName = String.Empty;
    }
    private void OnUserChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        // Assign the selected value to the Model 
        string id = (string)args.Value;
        if (id == "select") return;
        selectedUserItem.Id = id;
        selectedUserItem.Text = State.dataFile.GetUserName(id);
        return;
    } 
    private void ShowTimesheets()
    {
        LoadSelectedViewTimesheet();
    }
}
