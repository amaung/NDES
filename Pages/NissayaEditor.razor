@page "/nissayaeditor/{email}/{userName}/{userClass}"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using System.ComponentModel.DataAnnotations;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using System.IO
@inject SfDialogService DialogService
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject State State

@namespace NissayaEditor_Web.Data
@implements IDisposable;

@* https://www.syncfusion.com/forums/160145/custom-delete-confirmation-dialog *@
@* https://www.syncfusion.com/forums/173587/get-grid-selected-row-number-and-total-grid-rows-number *@
@* https://www.syncfusion.com/faq/blazor/general/how-do-i-generate-and-save-a-file-client-side-using-blazor *@
<PageTitle>NDES</PageTitle>

<body style="background-color:#f7f0df;">
    <script>
        function timeOutCall(dotnethelper) {
            document.onmousemove = resetTimeDelay;
            document.onkeypress = resetTimeDelay;
            // document.onkeypress = resetTimeDelay;

            function resetTimeDelay() {
                dotnethelper.invokeMethodAsync("TimerInterval");
            }
        }
    </script>

    <div id="ControlRegion" style="background-color: #f7f0df; width: 100%;">
        <div class="menu-control">
            <SfMenu Items="@MenuData">
                <MenuEvents TValue="MenuItem" OnOpen="onOpen" Opened="opened" ItemSelected="menuitemSelected"></MenuEvents>
            </SfMenu>
        </div>
    </div>
    <div style="width:100%; border: thin solid black;padding:8px 8px 8px" hidden="@hide_file_browser">
        <InputFile OnChange="@HandleFileSelection" />
    </div>
    <br />

    <label style="font-size:20px">Nissaya Data Entry System</label>
    <label style="font-size:14px; margin-left:400px; width:245px; text-align:right">User: @userName</label>
    <br />
    <br />
    <label for="docID">Doc No:</label>
    <input class="data-entry" type="text" id="docID" Disabled="@isPageDisabled" name="docID" @bind-value="doc_ID" />
    &nbsp;&nbsp;&nbsp;
    <label for="docTitle">Doc Title:</label>
    <input class="data-entry" type="text" id="docTitle" Disabled="@isPageDisabled" name="docTitle" style="width:400px; font-size=10px; height=25px" cols="60" @bind-value="doc_Title" />
    &nbsp;&nbsp;&nbsp;
    <label for="pg_No" style="margin-left:20px">Page:</label>
    <input class="data-entry" type="text" id="pg_No" Input="@PageNoInputHandler" Disabled="@isPageDisabled" name="pg_No" style="width:50px; text-align:center" @bind-value="page_No" />
    <br />
    <br />

    <div class="row">
        <div class="column left" style="background-color:#f2f2f2;">
            <SfButton @onclick="addData" style="width:60px; background-color:#d8e1f2" Disabled="@isPageDisabled">New</SfButton>
            <div id="listbox-control">
                <SfListBox id="PageListBox" Value=@Value TValue="string[]" TItem="PageData" height="480px" DataSource="@Pages" @ref="ListBoxObj">
                    <ListBoxFieldSettings Text="Text" Value="Id" />
                    <ListBoxEvents TValue="string[]" ValueChange="change" TItem="PageData"></ListBoxEvents>
                </SfListBox>
            </div>
        </div>
        <div id="ControlRegion" class="column right" style="background-color:#bdbcbb;">
            <SfGrid ID="Grid" DataSource="@NISRecords" @ref="sfgrid" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowExcelExport="true" AllowSelection="true"
                AllowSorting="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "ExcelExport", "Search" })" Height="378" Width="800">
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog='true'
                              NewRowPosition="NewRowPosition.Bottom" Mode="@EditMode.Dialog" Dialog="DialogParams">
                    <Template>
                        @{
                            NISRec = (context as NIS)!;
                        }
                        <div>
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <label class="col-form-label">Sr. No.</label>
                                    <SfNumericTextBox ID="srno" @bind-Value="@(NISRec.RecNo)" ShowSpinButton="false" Enabled="false" TValue="int?"></SfNumericTextBox>
                                </div>
                            </div>
                            <div class="form-row multiline">
                                <label for="pali-text" class="col-form-label">Pali</label>
                                <SfTextBox ID="pali-text" Multiline=true @bind-Value="@(NISRec.Pali)" CssClass="e-custom-height e-outline"></SfTextBox>
                            </div>
                            <div class="form-row multiline">
                                <label for="trans-text" class="col-form-label">Translation</label>
                                <SfTextBox ID="trans-text" Multiline=true @bind-Value="@(NISRec.Trans)" CssClass="e-custom-height e-outline"></SfTextBox>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <label for="footnote" class="col-form-label">Footnote</label>
                                    <SfTextBox id="footnote" @bind-Value="@(NISRec.Footnote)"></SfTextBox>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <label for="remarks" class="col-form-label">Remarks</label>
                                    <SfTextBox id="remarks" @bind-Value="@(NISRec.Remarks)"></SfTextBox>
                                </div>
                            </div>
                        </div>
                    </Template>
                </GridEditSettings>
                <GridPageSettings PageSize="10"></GridPageSettings>
                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                <GridEvents QueryCellInfo="CustomizeCell" OnToolbarClick="ToolbarClick" RowSelected="RowSelectHandler" OnCellEdit="CellEditHandler"
                OnActionBegin="ActionBegin" OnActionComplete="ActionComplete" TValue="NIS"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(NIS.RecNo) HeaderText="Sr No" IsPrimaryKey="true" AllowEditing="false" Width="10%" Type="ColumnType.Integer" DefaultValue=@GetSrNo() ValidationRules="@(new ValidationRules{ Required=true })" TextAlign="TextAlign.Center"></GridColumn>
                    <GridColumn Field=@nameof(NIS.Pali) HeaderText="Pāḷi" TextAlign="TextAlign.Left" Width="25%" Type="ColumnType.String"></GridColumn>
                    <GridColumn Field=@nameof(NIS.Trans) HeaderText="Translation" TextAlign="TextAlign.Left" Width="35%" Type="ColumnType.String"></GridColumn>
                    <GridColumn Field=@nameof(NIS.Footnote) HeaderText="Footnote" TextAlign="TextAlign.Left" Width="15%" Type="ColumnType.String"></GridColumn>
                    <GridColumn Field=@nameof(NIS.Remarks) HeaderText="Remarks" TextAlign="TextAlign.Left" Width="15%" Type="ColumnType.String"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
    <br />
    <h6>Current Nissaya Record</h6>
    <div style="border:1px; width:100%;background-color:#ded8ca">
        #@srno_field &nbsp;
        <label style="color:brown">@pali_field</label>&nbsp;
        <label class="trans_text">{ @trans_field }</label>&nbsp;
        <label class="footer_text">[ @footnote_field ]</label>&nbsp
        @* <label class="footer_text">&lt; @remarks_field &gt;</label> *@
        <label class="footer_text">? @remarks_field</label>
    </div>
    <div>
        <SfDialog Width="800px" MinHeight="600px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible">
            <DialogTemplates>
                <Header> Add Nissaya Record </Header>
                <Content>
                    <div class="column-dialog left-dialog">
                        <div class="parent">
                            <br /><br /><br /><br />
                            <div class="btn">
                                <SfButton id="jjh" CssClass="e-custom" OnClick="@jjhClick">ဇ္ဈ</SfButton>
                            </div>
                            <div class="btn">
                                <SfButton id="nng" CssClass="e-custom" OnClick="@nngClick">င်္</SfButton>
                            </div>
                            <div class="btn">
                                <SfButton id="tth" CssClass="e-custom" OnClick="@tthClick">ဋ္ဌ</SfButton>
                            </div>
                            <div class="btn">
                                <SfButton id="ddh" CssClass="e-custom" OnClick="@ddhClick">ဍ္ဎ</SfButton>
                            </div>
                        </div>
                    </div>
                    <div class="column-dialog right-dialog">
                        <div class="form-row">
                            <div class="form-group col-md-12">
                                <label class="col-form-label">Sr. No.</label>
                                <SfNumericTextBox ID="srno" @bind-Value="@(NISRec.RecNo)" ShowSpinButton="false" Enabled="false"></SfNumericTextBox>
                            </div>
                        </div>
                        <div class="form-row multiline">
                            <label for="pali-text" class="col-form-label">Pali</label>
                            <SfTextBox ID="pali-text" Multiline=true Focus="@FocusHandler_Pali" @bind-Value="@(NISRec.Pali)" CssClass="e-custom-height e-outline"></SfTextBox>
                        </div>
                        <div class="form-row multiline">
                            <label for="trans-text" class="col-form-label">Translation</label>
                            <SfTextBox ID="trans-text" Multiline=true Focus="@FocusHandler_Trans" @bind-Value="@(NISRec.Trans)" CssClass="e-custom-height e-outline"></SfTextBox>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-12">
                                <label for="footnote" class="col-form-label">Footnote</label>
                                <SfTextBox ID="footnote" Focus="@FocusHandler_Footnote" @bind-Value="@(NISRec.Footnote)"></SfTextBox>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-12">
                                <label for="remarks" class="col-form-label">Remarks</label>
                                <SfTextBox ID="remarks" Focus="@FocusHandler_Remarks" @bind-Value="@(NISRec.Remarks)"></SfTextBox>
                            </div>
                        </div>
                        <div>
                            <p style="color:brown">@ErrMsgDataEntry</p>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Add" IsPrimary="true" OnClick="@addClick" />
                <DialogButton Content="Done" OnClick="@doneClick" />
            </DialogButtons>
        </SfDialog>
    </div>
    @* <span>@checking</span> *@
    <SfSpinner Type="spinnerType" @bind-Visible="@VisibleSpinner">
    </SfSpinner>
    @* New doc info dialog *@
    <div>
        <SfDialog Width="400px" MinHeight="300px" ShowCloseIcon="false" IsModal="true" @bind-Visible="@IsVisible_NewDocInfo">
            <DialogTemplates>
                <Header> Enter new document information </Header>
                <Content>
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <label class="col-form-label">Doc No</label>
                            <SfTextBox ID="newDoc" Input="@InputHandler_NewDocInfo" @bind-Value="@doc_ID" Placeholder="example: MN-001"></SfTextBox>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <label class="col-form-label">Doc Title</label>
                            <SfTextBox ID="newDoc" Input="@InputHandler_NewDocInfo" @bind-Value="@doc_Title" Placeholder="example: မူဠပရိယာယသုတ္တံ"></SfTextBox>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label class="col-form-label">Start Page No</label>
                            <SfTextBox ID="newDoc" Input="@PageNoInputHandler" @bind-Value="@page_No" Placeholder="book page number"></SfTextBox>
                        </div>
                    </div>
                    <br/>
                    <div>
                        <p style="color:brown">@ErrMsgNewDocInfo</p>
                    </div>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Ok" IsPrimary="true" OnClick="@onOKClick" />
                <DialogButton Content="Cancel" OnClick="@onCancelClick" />
            </DialogButtons>
        </SfDialog>
    </div>
    @* Document selection dialog *@
    <SfDialog Width="550px" MinHeight="300px" ShowCloseIcon="false" IsModal="true" @bind-Visible="@IsVisible_DocSelection">
        <DialogTemplates>
            <Header>@docSelectionDialHeader</Header>
            <Content>
                <div id="ControlRegion">
                    @* <div class="col-lg-12 control-section">
                        <div class="control_wrapper">
                            <SfDropDownList TItem="DocType" DataSource="@DocTypes" @ref="sfdropdownlist" @bind-Value="@DocTypeValue" TValue="string" PopupHeight="100px" Index=-1 Placeholder="Select document type">
                                <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="DocType" OnValueSelect="@OnDocTypeValueSelect"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                    </div> *@
                    <SfGrid ID="selDocGrid" DataSource="@DocGridList" @ref="sfgridDocList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="false"
                        AllowExcelExport="false" AllowSelection="true" AllowSorting="false" Height="300" Width="500">
                        <GridEditSettings AllowAdding="true" AllowEditing="false" AllowDeleting="true" Mode="@EditMode.Normal"></GridEditSettings>
                        <GridPageSettings PageSize="20"></GridPageSettings>
                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>       
                        <GridEvents OnRecordClick="DocRecordClickHandler" DataBound="DocDataBoundHandler" TValue="DocType"></GridEvents>
                        <GridColumns>
                            <GridColumn Field=@nameof(DocType.Id) HeaderText="Doc No" IsPrimaryKey="true" AllowEditing="false" Width="30%" Type="ColumnType.String" TextAlign="TextAlign.Left"></GridColumn>
                            <GridColumn Field=@nameof(DocType.Text) HeaderText="Title" TextAlign="TextAlign.Left" Width="70%" Type="ColumnType.String"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Ok" IsPrimary="true" OnClick="@onDocSelOKClick" />
            <DialogButton Content="Cancel" OnClick="@onDocSelCancelClick" />
        </DialogButtons>
    </SfDialog>
</body>
@code {
    //https://blazor.syncfusion.com/documentation/dropdown-list/data-binding#:~:text=The%20DropDownList%20loads%20the%20data%20from%20local,of%20primitive%20type%20%2C%20Array%20of%20object
    //https://www.syncfusion.com/forums/164838/how-to-get-selected-value-in-blazor-dropdown-list#:~:text=When%20a%20value%20is%20selected%20from%20a,obtain%20the%20value%20by%20using%20that%20event.
    //https://www.syncfusion.com/faq/blazor/webassembly/how-can-i-bind-a-drop-down-list-in-blazor-webassembly#:~:text=We%20can%20bind%20a%20drop,along%20with%20its%20country%20codes.
    [Parameter]
    public string email { get; set; } = "";
    [Parameter]
    public string userName { get; set; } = "";
    [Parameter]
    public string userClass { get; set; } = "";

    public bool VisibleSpinner = false;
    private string DDLValue { get; set; } = "Bootstrap4";
    private SpinnerType spinnerType { get; set; } = SpinnerType.Bootstrap4;

    public List<NIS>? NISRecords { get; set; }
    public List<string>? SuttaTypes { get; set; } = default!;
    NIS NISRec = new NIS();
    SfGrid<NIS>? sfgrid;
    SfGrid<DocType>? sfgridDocList;
    //private string DocTypeValue;
    public NIS nisDetails = new NIS();
    private bool IsVisible { get; set; } = false;
    private bool isPageDisabled = true;
    private bool IsVisible_NewDocInfo = false;
    private bool IsVisible_DocSelection = false;
    private bool hide_file_browser = true;
    private bool currentPageDirty = false;
    private bool ServerUploadRequired = false;
    private bool fileUpload = false;
    string doc_ID = "";
    string doc_Title = "";
    string page_No = "";
    string docSelectionDialHeader = "";
    int srno = 0;
    int? srno_field = 0;
    string pali_field = "";
    string trans_field = "";
    string trans_field1 = "";
    string trans_field2 = "";
    string footnote_field = "";
    string remarks_field = "";
    private IBrowserFile? file;
    private string? fileContent;
    private string ErrMsgNewDocInfo = "";
    private string ErrMsgDataEntry = "";
    private int add_dialog_field_no = -1;
    private string newParaMarker = "။ ။";
    DataFile dataFile;

    SortedDictionary<string, string>? allDocList = null;
    public string[] Value = new string[] { "Pg-01" };
    //SfDropDownList<string, DocType>? sfdropdownlist;
    SfListBox<string[], PageData>? ListBoxObj;
    public List<PageData> Pages = new List<PageData> { new PageData { Text = "", Id = "Pg-01" } };
    public List<PageData> Item = new List<PageData>{ new PageData{ Text = "", Id = "Pg-0001"} };
    //public List<DocType> DocTypes = new List<DocType>() { new DocType { Text = "", Id = "Doc-001" } };
    public List<DocType>? DocGridList { get; set; }
    public List<DocType> docItem = new List<DocType> { new DocType { Text = "", Id = "Doc-001" } };
    private List<string> RUFList = new List<string>();
    private const int RUFList_MaxSize = 5;
    public class DocType
    {
        public string Text { get; set; } = "";
        public string Id { get; set; } = "";
    }
    public class PageData
    {
        public string Text { get; set; } = "";
        public string Id { get; set; } = "";
    }

    // User Profile Dialog
    // bool IsUserProfileVisible = false;
    // string userName_E = "", userName_M = "";
    // string UserProfileErrMsg = "";

    private DialogSettings DialogParams = new DialogSettings { Width = "400px", Height = "600px" };

    protected override void OnInitialized()
    {
        userName_E = State.userName;
        userName_M = State.userName_M;
        ResetMembers();
        enableAdminstratorMenu();
        enableSystemAdminMenu();
        if (State.screenID == 5) // screenID to Open file for import on MainPage.
        {
            hide_file_browser = false;
        }
        if (State.screenID == 6) // screenID to Open file for import on MainPage.
        {
            hide_file_browser = true;
            LoadServerData();
        }
    }

    public int GetSrNo() 
    {
        if (NISRecords == null || NISRecords.Count() == 0) srno = 1;
        else
            srno = (int)NISRecords[NISRecords.Count() - 1].RecNo + 1;
        NISRec.RecNo = srno; 
        return srno; 
    }

    public async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (CheckServerUploadRequired()) 
        {
            args.Cancel = true;
            return;
        }
        if (args != null && args.Item.Id.Contains("_add"))
        {
            nisDetails.Clear();
            nisDetails.RecNo = GetSrNo();
            args.Cancel = true;
            if (isPageDisabled) return;
            IsVisible = true;
            return;
        }
        if (args.Item.Id == "Grid_excelexport" && !isPageDisabled) //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = doc_ID + ".xlsx";
            List<NIS> exportNISRecords = dataFile.GetAllPageData();
            ExcelProperties.DataSource = exportNISRecords;
            await this.sfgrid.ExcelExport(ExcelProperties);
        }
    }
    private void PrepareDocSelectDialog()
    {
        if (DocGridList == null) DocGridList = new List<DocType>();
        if (allDocList == null)
        {
            //VisibleSpinner = true;
            allDocList = dataFile.GetAllSuttaList();
            foreach (KeyValuePair<string, string> kv in allDocList)
            {
                DocType d = new DocType() { Id = kv.Key, Text = kv.Value };
                DocGridList.Add(d);
            }
        }
    }
    private void doneClick()
    {
        // this.ClickStatus = "you have clicked Cancel";
        this.IsVisible = false;
    }
    private void addClick()
    {
        // this.ClickStatus = "you have clicked Ok";
        if (NISRec.Pali.Trim().Length == 0 || NISRec.Trans.Trim().Length == 0)
        {
            ErrMsgDataEntry = "Pali or Translation field is empty.";
            return;
        }
        ErrMsgDataEntry = string.Empty;
        this.IsVisible = true;
        AddNewRecord(NISRec);
        //dataFile.AddNISRecord(page_No, NISRec);
        NISRec = new NIS();
        NISRec.RecNo = NISRecords.Count + 1;
        currentPageDirty = true;
    }
    private void onOKClick()
    {
        if (doc_ID.Length == 0 || doc_Title.Length == 0 || page_No.Length == 0)
        {
            ErrMsgNewDocInfo = "Empty data value(s) found.";
        } 
        else 
        {
            isPageDisabled = IsVisible_NewDocInfo = false;
            ListBoxObj.RemoveItemAsync(Pages);
            Pages.Clear();
            NISRecords = new List<NIS>();
            dataFile.ClearPageData();
            Pages.Add(new PageData { Text = page_No, Id = "id-0001" });
            Add2ListBox(Pages).Wait();
            Item[0].Text = Pages[0].Text;
            Item[0].Id = Pages[0].Id;
            dataFile.AddNewPage(page_No);
            dataFile.CreaetNewDoc(doc_ID, doc_Title, email, Convert.ToInt16(page_No));
            if (dataFile.ErrMsg.Length > 0)
            {
                AlertBtn(dataFile.ErrMsg + " Please report to the System Administrator.", "Error");
            }
        }
    }
    private void onCancelClick()
    {
        ErrMsgNewDocInfo = String.Empty;
        IsVisible_NewDocInfo = VisibleSpinner = false;
    }
    private void onDocSelOKClick()
    {
        IsVisible_DocSelection = false;
        string docNo = string.Empty;
        if (sfgridDocList.SelectedRowIndex == -1)
        {
            if (DocGridList.Count > 0) 
            {
                sfgridDocList.SelectedRowIndex = 0;
                docNo = DocGridList[0].Id;
            }
        }
        else
        {
            var item = sfgridDocList.SelectedRecords[0];
            docNo = item.Id;
            VisibleSpinner = true;
            if (docNo.Length > 0) 
            {
                doc_ID = docNo;
                dataFile.GetServerSuttaData(docNo, AfterServerDataLoaded);
            }
        }
    }
    //**************************************************************************************/
    //**** This routine is called after returning from Task Assignments screen.
    //**************************************************************************************/
    private void LoadServerData()
    {
        VisibleSpinner = true;
        doc_ID = State.doc_ID;
        doc_Title = State.doc_Title;
        dataFile.GetServerSuttaData(doc_ID, AfterServerDataLoaded);

    }
    private void LoadDocumentFromServer(string docID)
    {
        dataFile.GetServerSuttaData(docID, AfterServerDataLoaded);
        doc_ID = docID;
        doc_Title = dataFile.GetDocTitle();
        newParaMarker = dataFile.GetNewParaMarker();
        LoadPageMenu();
        LoadFirstPage();
        fileUpload = false;
        enableServerUploadMenu();
    }
    private void AfterServerDataLoaded(string docTitle = "")
    {
        //await dataFile.GetServerSuttaData(docID, TurnOffSpinner);
        doc_ID = dataFile.GetDocID();
        doc_Title = dataFile.GetDocTitle();
        newParaMarker = dataFile.GetNewParaMarker();
        LoadPageMenu();
        //LoadFirstPage();
        VisibleSpinner = fileUpload = false;
        enableServerUploadMenu();
        UpdateRecentlyUsedFileList(doc_ID);
    }
    private void onDocSelCancelClick()
    {
        IsVisible_DocSelection = false;

    }
    private void InputHandler_NewDocInfo(InputEventArgs args)
    {
        ErrMsgNewDocInfo = String.Empty;
    }
    private void PageNoInputHandler(InputEventArgs args)
    {
        // Here you can customize your code
        ErrMsgNewDocInfo = String.Empty;
        page_No = "";
        foreach (char c in args.Value)
        {
            if (c >= '\u1040')
            {
                int n = Convert.ToInt16(c) - 4112;
                char c1 = (char)n;
                page_No += c1.ToString();
            }
            else page_No += c.ToString();
        }
    }
    //https://ej2.syncfusion.com/aspnetcore/documentation/maskedtextbox/how-to/set-cursor-position-while-focus-on-the-input-textbox
    private void jjhClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        InsertSpeciaStr("ဇ္ဈ");
    }
    private void nngClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        InsertSpeciaStr("င်္");
    }
    private void tthClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        InsertSpeciaStr("ဋ္ဌ");
    }
    private void ddhClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        InsertSpeciaStr("ဍ္ဎ");
    }
    private void FocusHandler_Pali(FocusInEventArgs args) { add_dialog_field_no = 1; }

    private void FocusHandler_Trans(FocusInEventArgs args) { add_dialog_field_no = 2; }

    private void FocusHandler_Footnote(FocusInEventArgs args) { add_dialog_field_no = 3; }

    private void FocusHandler_Remarks(FocusInEventArgs args) { add_dialog_field_no = 4; }

    private void BlurHandler(FocusOutEventArgs args) { add_dialog_field_no = -1; }

    private void InsertSpeciaStr(string s)
    {
        switch(add_dialog_field_no)
        {
            case 1:
                NISRec.Pali += s;
                break;
            case 2:
                NISRec.Trans += s;
                break;
            case 3:
                NISRec.Footnote += s;
                break;
            case 4:
                NISRec.Remarks += s;
                break;
        }
    }
    public async Task AddNewRecord(NIS nis)
    {
        try
        {
            await this.sfgrid.AddRecord(nis);
            //await this.sfgrid.SortColumnAsync(nameof(NIS.RecNo), SortDirection.Ascending);
        }
        catch(Exception ex)
        {
            string msg = ex.Message;
        }
    }
    private List<int> currentSelectedRowIndex { get; set; }
    private int deletedRecNo { get; set; } = -1;

    // https://www.syncfusion.com/forums/165107/is-it-possible-to-add-new-row-to-the-bottom-of-the-grid

    public async Task ActionBegin(ActionEventArgs<NIS> args)
    {
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save) && args.Action == "Add"))
        {
            args.Index = NISRecords.Count();
            sfgrid.PageSettings.CurrentPage = (NISRecords.Count() / sfgrid.PageSettings.PageSize) + 1;
            //args.Index = (Grid.PageSettings.CurrentPage * Grid.PageSettings.PageSize) - 1;
        }
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete) && args.Action == "Delete"))
        {
            NIS nis = args.Data;
            //currentSelectedRowIndex = await sfgrid.GetSelectedRowIndexesAsync();
            // if (currentSelectedRowIndex.Count > 0) deletedRecNo = (int)NISRecords[currentSelectedRowIndex[0]].RecNo;
        }
    }
    public void ActionComplete(ActionEventArgs<NIS> args)
    {
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save) && args.Action == "Add"))
        {
            args.Index = NISRecords.Count();
            //sfgrid.PageSettings.CurrentPage = (sfgrid.TotalItemCount / sfgrid.PageSettings.PageSize) + 1;
            //args.Index = (Grid.PageSettings.CurrentPage * Grid.PageSettings.PageSize) - 1;
        }
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete) && args.Action == "Delete"))
        {
            NIS nis = args.Data;
            dataFile.DelNISRecord(page_No, nis);
        }
        if ((args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save) && args.Action == "Edit"))
        {
            int n = args.RowIndex;
            if (NISRecords[n].Pali.Length == 0 || NISRecords[n].Trans.Length == 0)
            {
                string msg = "Pali or Trans text cannot be empty in Sr No # " + args.PrimaryKeyValue;
                AlertBtn(msg, "Empty text");
            }
            else currentPageDirty = true;
        }
    }

    //https://blazor.syncfusion.com/documentation/listbox/how-to/bind-change-event
    private void change(ListBoxChangeEventArgs<string[], PageData> args)
    {
        //Triggers when value changed
        if (currentPageDirty) UpdateCurrentPage();
        pali_field = trans_field = footnote_field = remarks_field = string.Empty;
        List<PageData> vdata = (List<PageData>)args.Items;
        if (args.Value == null && vdata != null && vdata.Count > 0)
        {
            page_No = vdata[0].Text;
            LoadPageData(page_No);
            Value = new string[] { vdata[0].Id };
            return;
        }
        var value = args.Value[0];
        var item = vdata.Where(p => p.Id == value).FirstOrDefault();
        string text = string.Empty;
        if (item != null)
        {
            page_No = item.Text;
            LoadPageData(page_No);
            Value = new string[] { item.Id };
        }
    }
    private void UpdateCurrentPage()
    {
        dataFile.UpdateCurrentPage(doc_ID, page_No, NISRecords);
        if (dataFile.ErrMsg.Length > 0)
            AlertBtn(dataFile.ErrMsg, "Error");
        currentPageDirty = false;
    }
    private async void HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (State.clientTipitakaDB != null) dataFile = new DataFile(State.clientTipitakaDB, email, userName);
        await ReadFile();
        // if file has BOM remove '\ufeff'
        if (fileContent[0] == '\ufeff') fileContent = fileContent.Substring(1);
        ServerUploadRequired = true;
        hide_file_browser = true;
        dataFile.SetFileContent(file.Name, fileContent);
        if (dataFile.ErrMsg.Length > 0)
        {
            AlertBtn(dataFile.ErrMsg, "Error");
            return;
        }
        // AlertBtn(dataFile.GetNoPages().ToString(), "No. of Pages");
        LoadPageMenu();
        Value = new string[] { Pages[0].Id };
        LoadPageData(Pages[0].Text);
        // doc_ID = dataFile.GetDocID();
        // doc_Title = dataFile.GetDocTitle();
        // newParaMarker = dataFile.GetNewParaMarker();
        page_No = Pages[0].Text;
        isPageDisabled = false;
        hide_file_browser = true;
        fileUpload = true;
        enableServerUploadMenu();
    }
    private async Task ReadFile()
    {
        try
        {
            if (file != null)
            {
                long maxFileSize = 512000;
                if (file.Size > maxFileSize) maxFileSize = file.Size;
                var buf = new byte[file.Size];
                using var readStream = file.OpenReadStream(maxFileSize);
                var bytesRead = 0;
                var totalRead = 0;
                var buffer = new byte[1024 * 10];

                while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                {
                    Array.Copy(buffer, 0, buf, totalRead, bytesRead);
                    totalRead += bytesRead;
                }
                fileContent = System.Text.Encoding.UTF8.GetString(buf);
            }
        }
        catch(Exception ex)
        {
            AlertBtn(ex.Message, "Error");
        }
    }
    private bool CheckServerUploadRequired()
    {
        bool flag = false;
        if (ServerUploadRequired)
        {
            AlertBtn("Upload data to server first before performing adding or editing.", "Attention");
            flag = true;
        }
        return flag;
    }
    private void LoadFirstPage()
    {
        currentPageDirty = false;
        if (Pages.Count > 0)
        {
            page_No = Pages[0].Text;
            LoadPageData(page_No);
        }
        else AlertBtn("No pages loaded yet.", "Error");
        //Value = new string[] { vdata[0].Id };
    }
    private void LoadPageData(string pgno)
    {
        srno = 0;
        List<NIS> GridData = new List<NIS>();
        if (dataFile != null)
        {
            NISRecords = dataFile.GetPageData(pgno);
        }
    }
    private void LoadPageMenu()
    {
        try
        {
            ListBoxObj.RemoveItemAsync(Pages);
            Pages.Clear();
            List<string> pglist = dataFile.GetPageNo();
            for (int i = 0; i < pglist.Count; i++)
            {
                Pages.Add(new PageData { Text = pglist[i], Id = "id-" + i.ToString("D4") });
            }
            // Make the first item selected in the page list
            Item[0].Text = Pages[0].Text;
            Item[0].Id = Pages[0].Id;
            Add2ListBox(Pages).Wait();
            isPageDisabled = false;

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }
    }
    private async Task Add2ListBox(List<PageData> pages)
    {
        try
        {
            if (ListBoxObj != null)
            {
                await ListBoxObj.AddItemsAsync(pages);
                ListBoxObj.EnableItems(pages, true);
                await ListBoxObj.SelectItemsAsync(Item, true);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }
    }
    private async Task addData()
    {
        if (CheckServerUploadRequired()) return;
        if (ListBoxObj != null && Pages.Count() > 0)
        {
            PageData item0 = Pages[Pages.Count() - 1];
            string newId = "Pg-" + Pages.Count().ToString("D4");
            string newText = (Convert.ToInt16(item0.Text) + 1).ToString();
            PageData newPageData = new PageData { Text = newText, Id = newId };
            Item = new List<PageData> { newPageData };
            Pages.Add(newPageData);
            string[] Value = new string[] { newText };
            await ListBoxObj.AddItemsAsync(Item);
            await ListBoxObj.SelectItemsAsync(Item, true);
            dataFile.AddNewPage(newText);
            JS.InvokeVoidAsync("addData", new object[] { Item });
            // "downloadURI", new string[] { doc_ID + ".txt" }
        }
    }
    public void RowSelectHandler(RowSelectEventArgs<NIS> args)
    {
        pali_field = trans_field1 = trans_field2 = footnote_field = ""; srno_field = 0;
        if (args.Data.Pali != null) pali_field = args.Data.Pali;
        if (args.Data.Trans != null) trans_field = args.Data.Trans;
        if (args.Data.Footnote != null) footnote_field = args.Data.Footnote;
        if (args.Data.Remarks != null) remarks_field = args.Data.Remarks;
        if (args.Data.RecNo != null) srno_field = args.Data.RecNo;
    }
    public void CellSelectedHandler(CellSelectEventArgs<NIS> args)
    {
        var v = args.Data.RecNo;
    }
    public void CellDeselectedHandler(CellDeselectEventArgs<NIS> args)
    {
        var v = args.Data.RecNo;

    }
    public void CellEditHandler(CellEditArgs<NIS> args)
    {
        var v = args.Data.Pali;

    }
    public void CustomizeCell(QueryCellInfoEventArgs<NIS> args)
    {
        if (args.Column.Field == "Pali")
        {
            //args.Cell.AddClass(new string[] { "pali_text" });
            args.Cell.AddStyle(new string[] { "color: brown;" }); // brown "#A52A2A"
        }
        if (args.Column.Field == "Trans")
        {
            args.Cell.AddClass(new string[] { "trans_text" });
        }
        if (args.Column.Field == "Footnote")
        {
            args.Cell.AddClass(new string[] { "footer_text" });
        }
        if (args.Column.Field == "Remarks")
        {
            args.Cell.AddClass(new string[] { "footer_text" });
        }
    }
    public void DocRecordClickHandler(RecordClickEventArgs<DocType> args)
    {
        var row = args.RowIndex;
    }
    public void DocDataBoundHandler()
    {
        // Here, you can customize your code.
        int n = sfgridDocList.TotalItemCount;
        if (n > 0) sfgridDocList.ClearRowSelectionAsync();
        string s = "";
    }
    private bool SaveCurrentPage0()
    {
        // check for empty fields
        int n = 0;
        foreach(NIS nisRecord in NISRecords)
        {
            ++n;
            if (nisRecord.Pali.Length == 0 || nisRecord.Trans.Length == 0)
            {
                AlertBtn(string.Format("Empty data at record no {0}", n), "Empty data");
                return false;
            }
        }
        return true;
    }
    private void ResetMembers()
    {
        if (State.screenID < 2)
        {
            NISRecords = new List<NIS>();
            NISRec = new NIS();
            nisDetails = new NIS();
            doc_ID = "";
            doc_Title = "";
            page_No = "";
            srno = 0;
            srno_field = null;
            pali_field = "";
            trans_field = "";
            trans_field1 = "";
            trans_field2 = "";
            footnote_field = "";
            remarks_field = "";
            fileContent = "";
            dataFile = new DataFile(State.clientTipitakaDB, email, userName);
            State.dataFile = dataFile;
            isPageDisabled = true;
            State.screenID = 2;
            State.Pages = Pages;
            fileUpload = false;
            UpdateRecentlyUsedFileList();
            enableServerUploadMenu();
        }
        else
        {
            SaveRestoreDataState(false);
            enableServerUploadMenu();
        }
    }
    private void Logout()
    {
        ResetMembers();
        NavManager.NavigateTo("/");
    }
    private async Task AlertBtn(string msg, string warn)
    {
        await DialogService.AlertAsync(msg, warn, new DialogOptions()
        {
            PrimaryButtonOptions = new DialogButtonOptions() { Content = "Ok" }
        });
    }
    public void Dispose()
    {
        int n = 0;
    }
} 
@code {
    //***************************************************************************************
    //***
    //*** Menu Related Code
    //***
    //***************************************************************************************
    const string importFile = "Import File";
    const string newDocument = "New Document";
    const string getDocumentFromServer = "Get Document from Server";
    const string uploadToServer = "Upload to Server";
    const string downloadAsTXT = "Download as TXT";
    const string downloadAsTXTHDR = "Download as TXT/Header";
    const string administration = "Administration";
    const string logout = "Logout";
    const string currentPage = "Current Page";
    const string allPages = "All Pages";
    const string DY = "Dhamma Yaungchi";
    const string ExportHTML = "Export As HTML";
    const string userMenu = "User";
    const string userProfile = "User Profile";
    const string taskAssignment = "Task Assignments";
    const string documents = "Documents";
    const string activities = "Activities"; 
    const string reports = "Reports";

    #pragma warning disable
    private List<MenuItem> MenuData = new List<MenuItem>{
        new MenuItem
        {
            Text = "File",
            IconCss = "em-icons e-file",
            Items = new List<MenuItem>
            {
                // new MenuItem { Text= "Open", IconCss= "em-icons e-open" },
                // new MenuItem { Text= "New", IconCss= "em-icons e-file-new" },
                // new MenuItem { Text= "Download from server", IconCss= "em-icons e-download" },
                // new MenuItem { Text= "Upload to server", IconCss= "oi oi-account-upload" },
                // new MenuItem { Separator= true },
                // new MenuItem { Text= "Logout", IconCss= "oi oi-account-logout" }
                //new MenuItem { Text= importFile },
                //new MenuItem { Text= newDocument },

                new MenuItem { Text= getDocumentFromServer },
                new MenuItem { Text= uploadToServer },
                new MenuItem { Text= downloadAsTXT },
                //new MenuItem { Text= downloadAsTXTHDR },
                new MenuItem { Text= logout },
                // new MenuItem { Separator= true },
            }
        },
        new MenuItem
        {
            Text = "View",
            Items = new List<MenuItem>
            {
                new MenuItem { Text = currentPage },
                new MenuItem { Text = allPages },
            }
        },
        new MenuItem
        {
            Text = userMenu,
            Items = new List<MenuItem>
            {
                new MenuItem { Text = taskAssignment },
                new MenuItem { Text = userProfile },
            }
        },        
        new MenuItem
        {
            Text = administration,
            // Items = new List<MenuItem>
            // {
            //     new MenuItem { Text = currentPage },
            //     new MenuItem { Text = allPages },
            // }
        },
        new MenuItem
        {
            Text = "About",
            Items = new List<MenuItem>
            {
                new MenuItem { Text = DY },
                //new MenuItem { Text = "Contact" },
                new MenuItem { Text = ExportHTML },
            }
        }
    };
    #pragma warning restore
    private string eventName = "na";
    private void onOpen()
    {
        this.eventName = "onOpen";
    }
    private void opened()
    {
        this.eventName = "Opened";
    }
    // https://www.syncfusion.com/blogs/post/preview-file-blazor-file-manager.aspx
    private async Task menuitemSelected(MenuEventArgs<MenuItem> args)
    {
        var selectedItem = args.Item.Text;
        if (currentPageDirty) UpdateCurrentPage();
        switch (selectedItem)
        {
            case importFile:
                hide_file_browser = false;
                break;
            case logout:
                UpdateRecentlyUsedFileList(doc_ID);
                Logout();
                break;
            case newDocument:
                doc_ID = doc_Title = ErrMsgNewDocInfo = ErrMsgDataEntry = String.Empty;
                hide_file_browser = IsVisible_NewDocInfo = true;
                fileUpload = false; enableServerUploadMenu();
                break;
            case currentPage:
            case allPages:
                hide_file_browser = true;
                if (doc_ID.Length == 0 || doc_Title.Length == 0)
                {
                    AlertBtn("Document No and/or Title empty.", "No document info");
                    return;
                }
                if (NISRecords.Count() == 0)
                {
                    AlertBtn("No data loaded yet.", "No data");
                    return;
                }
                if (NISRecords.Count() == 0 || Pages.Count() == 0)
                {
                    AlertBtn("There are no records to view.", "No Data");
                    return;
                }
                SaveRestoreDataState(true);
                switch (selectedItem)
                {
                    case currentPage:
                        NavManager.NavigateTo(String.Format("/viewdocument/{0}/{1}/{2}/{3}", doc_ID, doc_Title, page_No, newParaMarker));
                        break;
                    case allPages:
                        NavManager.NavigateTo(String.Format("/viewdocument/{0}/{1}/{2}/{3}", doc_ID, doc_Title, "0", newParaMarker));
                        break;
                }
                break;
            case uploadToServer:
                hide_file_browser = true;
                ShowUploadInfoDialog();
                break;
            case getDocumentFromServer:
                hide_file_browser = IsVisible_DocSelection = true;
                docSelectionDialHeader = "Select document from list to retrieve";
                PrepareDocSelectDialog();
                break;
            case downloadAsTXT:
                hide_file_browser = true;
                CreateTXT();
                //downloadURI("", "");
                break;
            case downloadAsTXTHDR:
                hide_file_browser = true;
                CreateTXT();
                break;
            case administration:
                hide_file_browser = true;
                //JS.InvokeAsync<object>("open", String.Format("/administration_main/{0}/{1}/{2}", email, userName, userClass), "_blank");
                NavManager.NavigateTo(String.Format("/administration_main/{0}/{1}/{2}", email, userName, userClass));
                //NavManager.NavigateTo(String.Format("/user_profile/{0}/{1}/{2}", email, userName, userClass));
                //AlertBtn("This feature is not implemented yet.", "Notice");
                break;
            case DY:
                JS.InvokeVoidAsync("gotoDhammaYaungchi", new string[] { doc_ID + ".txt" });
                break;
            case taskAssignment:
                NavManager.NavigateTo(String.Format("/user_task_assignment/{0}/{1}/{2}", email, userName, userClass));
                break;
            case userProfile:
                IsUserProfileVisible = true;
                break;
            default:
                if ("12345".Contains(selectedItem[0]) && selectedItem[1] == '.')
                {
                    string docNo = selectedItem.Substring(3);
                    //docNo = "MN-005";
                    if (docNo == doc_ID) return;
                    VisibleSpinner = true;
                    doc_ID = docNo;
                    dataFile.GetServerSuttaData(docNo, AfterServerDataLoaded);
                }
                break;
        }
    }
    private void ShowUploadInfoDialog()
    {
        dataFile.DocID = doc_ID;
        dataFile.DocTitle = doc_Title;
        userTask = State.UserTaskInfo[email + "-Task"];
        Dictionary<string, string> dictServerDocInfo = dataFile.GetServerDocInfo(doc_ID, userTask);

        int fileFirstPage = dataFile.GetFirstPageNo();
        int fileLastPage = dataFile.GetLastPageNo();

        dictServerDocInfo["Task"] = userTask;
        int bookDocStartPage = Int32.Parse(dictServerDocInfo["BookDocStartPage"]);
        int bookDocEndPage = Int32.Parse(dictServerDocInfo["BookDocEndPage"]);
        int bookDocPages = Int32.Parse(dictServerDocInfo["NoPages"]);
        // check if the file contains pages that are in the book pages
        if (fileFirstPage >= bookDocStartPage && fileFirstPage <= bookDocEndPage &&
            fileLastPage >= bookDocStartPage && fileLastPage <= bookDocEndPage)
        {
            doc_Pages = String.Format("{0}-{1} ({2})", bookDocStartPage, bookDocEndPage, bookDocPages);

            int pagesSubmitted = Int32.Parse(dictServerDocInfo["PagesSubmitted"]);
            int serverSubmittedLastPage = bookDocStartPage + pagesSubmitted - 1;
            int submitStartPage = bookDocStartPage + pagesSubmitted;
            int submitEndPage = Int32.Parse(dictServerDocInfo["ImportedEndPage"]);
            int submitPages = submitEndPage - submitStartPage + 1;

            if (dictServerDocInfo["PagesSubmitted"] == "0") submittedPagesOnServer = "0";
            else
            {
                int percent = (int)((float)pagesSubmitted * 100.0 / bookDocPages);
                submittedPagesOnServer = String.Format("{0}-{1} ({2})  ({3}%)", bookDocStartPage, serverSubmittedLastPage, pagesSubmitted, percent);

            }
            pagesInFile = String.Format("{0}-{1}", fileFirstPage, fileLastPage);
            pagesToSubmit = String.Format("{0}-{1} ({2})", submitStartPage, submitEndPage, submitPages);
            if (submitPages == 0) pagesToSubmit = _NoNewPagesToSubmit_;
            //
            hidePageSubmitRange = false;
            if (userTask != "DataEntry" && userTask != "Edit-Upload") hidePageSubmitRange = true;
            hideReviewPageSubmitRange = !hidePageSubmitRange;
            serverUploadStartPage = bookDocStartPage + pagesSubmitted;
            docStartPage = bookDocStartPage;
            docEndPage = bookDocEndPage;
            startValue = serverUploadStartPage;
            endValue = docEndPage;
            IsImportInfoDialogVisible = true;
        }
        else
        {
            string msg = String.Format("File pages {0}-{1} are outside of book pages {2}-{3}.", fileFirstPage, 
                        fileLastPage, bookDocStartPage, bookDocEndPage);
            AlertBtn(msg, "Error");
        }
    }
    private void UploadToServer()
    {
        string userTask = "";
        if (State.UserTaskInfo.ContainsKey(email + "-Task")) userTask = State.UserTaskInfo[email + "-Task"];
        Dictionary<string, string> dictServerDocInfo = dataFile.GetServerDocInfo(doc_ID, userTask);

        int bookDocStartPage = Int32.Parse(dictServerDocInfo["BookDocStartPage"]);
        int pagesSubmitted = Int32.Parse(dictServerDocInfo["PagesSubmitted"]);
        int submitStartPage = bookDocStartPage + pagesSubmitted;
        int submitEndPage = Int32.Parse(dictServerDocInfo["ImportedEndPage"]);
        int submitPages = submitEndPage - submitStartPage + 1;
        if (userTask == "DataEntry" || userTask == "Edit-Upload")
        {
            dataFile.UploadDocument(submitStartPage.ToString(), submitEndPage.ToString());
        }
        else
        {
            submitStartPage = (int)startValue;
            submitEndPage = (int)endValue;
            submitPages = submitEndPage - submitStartPage + 1;
            int correctionCount = dataFile.Update_Document(submitStartPage.ToString(), submitEndPage.ToString(), userTask);
            dictServerDocInfo["CorrectionCount"] = correctionCount.ToString();
        }

        dictServerDocInfo["PagesToSubmit"] = submitPages.ToString();
        dictServerDocInfo["PagesSubmitted"] = (pagesSubmitted + submitPages).ToString();
        dataFile.userClass = userClass;
        dataFile.LogUserTaskActivity(dictServerDocInfo, userTask);
        TaskComplete(dataFile.ErrMsg);
    }
    private void UpdateRecentlyUsedFileList(string docNo = "")
    {
        bool addFlag = true;
        // no longer use this feature, just return
        if (addFlag) return;

        if (RUFList.Count > 0)
        {
            if (RUFList[RUFList.Count - 1] == docNo) return;
        }
        var menu = MenuData.First();
        if (menu.Items.Count == 6 && dataFile != null)
        {
            RUFList.Clear();
            List<string> RUFList_tmp = dataFile.GetRUFList();
            // remove erroneous empty lines
            foreach(string t in RUFList_tmp)
            {
                if (t.Trim().Length > 0) RUFList.Add(t.Trim());
            }
            if (docNo.Length == 0 && RUFList.Count == 0) return;
            menu.Items.Add(new MenuItem() { Separator = true });
        }
        if (docNo.Length > 0 && RUFList.Contains(docNo))
        {
            if (RUFList.IndexOf(docNo) < RUFList.Count() - 1)
                RUFList.Remove(docNo);
            else addFlag = false;
        }
        if (docNo.Length > 0 && addFlag)
        {
            RUFList.Add(docNo);
            if (RUFList.Count() > RUFList_MaxSize) RUFList.RemoveAt(0);
        }

        int idx = 0;
        int numRUF = menu.Items.Count - 8;  // separator index = 7, count = 8
        int last = Math.Min(RUFList_MaxSize, RUFList.Count());
        if (last > 0)
        {
            for(int i = last - 1; i >= 0; i--)
            {
                string t = string.Format("{0}. {1}", ++idx, RUFList[i]);
                if (numRUF-- >= 1) menu.Items[idx + 7].Text = t;
                else menu.Items.Add(new MenuItem() { Text = t });
            }
        }
        else 
        {
            RUFList.Add(docNo);
            menu.Items.Add(new MenuItem() { Text = string.Format("1. {0}", docNo) });
        }

        if (docNo.Length > 0 && dataFile != null) dataFile.GetRUFList(RUFList);
    }

}
@code {
    public void TaskComplete(string errmsg)
    {
        if (errmsg.Length == 0) AlertBtn("Document uploaded successfully.", "Upload Status");
        else AlertBtn(errmsg, "Upload Status");
    }
    private void CreateTXT()
    {
        string rootDir = "./wwwroot/";
        string tempDirectory = System.IO.Path.GetTempPath();
        string tempFileName = System.IO.Path.GetTempFileName();
        tempFileName = rootDir + doc_ID + ".txt";
        try
        {
            DeleteTempFiles(rootDir);
            string fileContent = dataFile.PagesToFileContent();
            if (fileContent.Length == 0) return;
            System.IO.File.WriteAllText(tempFileName, fileContent);
            JS.InvokeVoidAsync("downloadURI", new string[] { doc_ID + ".txt" });
        }
        catch (Exception ex)
        {
            AlertBtn(ex.Message, "Error");
        }
    }
    private void DeleteTempFiles(string rootDir)
    {
        DirectoryInfo folder = new DirectoryInfo(rootDir);
        if (folder.Exists) // else: Invalid folder!
        {
            System.IO.FileInfo[] files = folder.GetFiles("*.txt");

            foreach (System.IO.FileInfo file in files)
            {
                System.IO.File.Delete(file.FullName);
            }
        }
    }
    private void SaveRestoreDataState(bool saveFlag)
    {
        bool flag = isPageDisabled;
        switch (saveFlag)
        {
            case true:
                State.NISRecords = NISRecords;
                State.Pages = Pages;
                State.doc_ID = doc_ID;
                State.doc_Title = doc_Title;
                State.page_No = page_No;
                State.dataFile = dataFile;
                break;
            case false:
                NISRecords = State.NISRecords;
                Pages = State.Pages;
                doc_ID = State.doc_ID;
                doc_Title = State.doc_Title;
                page_No = State.page_No;
                if (State.screenID == 5)
                {
                    // this is to import data from file. set the first page # in Page Menu
                    Pages.Clear();
                    Pages.Add(new PageData { Text = page_No, Id = "id-0001" });
                }
                dataFile = State.dataFile;
                isPageDisabled = false;
                UpdateRecentlyUsedFileList();
                break;
        }
    }
    private void enableAdminstratorMenu()
    {
        //MenuData[0].Items[0].Hidden = //MenuData[0].Items[3].Hidden = //MenuData[0].Items[5].Hidden =
            //(userClass != "A" && userClass != "S");
    }
    private void enableServerUploadMenu()
    {
        // int n = MenuData[0].Items.Count;
        // if (n > 4) MenuData[0].Items[4].Disabled = NISRecords.Count == 0;
        // if (n > 3) MenuData[0].Items[3].Disabled = !fileUpload;
        foreach (var item in MenuData[0].Items)
        {
            if (item.Text == downloadAsTXT) item.Disabled = (NISRecords ==  null ||NISRecords.Count == 0);
            if (item.Text == downloadAsTXTHDR) item.Disabled = (NISRecords == null || NISRecords.Count == 0);
            if (item.Text == uploadToServer) item.Disabled = !fileUpload;
        }
    }
    private void enableSystemAdminMenu()
    {
        // (userClass == "S")
        MenuData[3].Hidden = (userClass != "S");
        foreach (var item in MenuData[4].Items)
        {
            if (item.Text == ExportHTML) item.Hidden = (userClass != "S");
        }
    }
}
<script type="text/javascript">
    /* https://stackoverflow.com/questions/54626186/how-to-download-file-with-javascript */
    function downloadURI(filename) {
        var link = document.createElement("a");
        link.download = filename;
        link.href = "./" + filename;
        link.click();
    }
    function gotoDhammaYaungchi(arg) {
        var link = document.createElement("a");
        link.href = "https://dhammayaungchi.net";
        link.target = "_blank";
        link.click();
    }
    /* https://www.syncfusion.com/forums/132797/is-it-possible-to-scroll-to-the-position-of-a-selected-element */
    function SfListBoxLastlItemToView(arg) {
        document.querySelector('[data-uid="' + args.Id + '"]').scrollIntoView();
    }

</script>
<style>
    @@font-face {
        font-family: 'em-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'Pyidaungsu';
        src: url(./css/fonts/Pyidaungsu-2.5.3_Regular.ttf;charset=utf-8) format('truetype');
        font-weight: normal;
        font-style: normal;
    }
    myfont {
        font: 'Pyidaungsu';
        font-size: 14px;
    }
    .e-custom-height {
        height: 80px;
    }
    .data-entry {
        border-width: 0.25px;
        background-color: #f2f2f2;
    }

    .column {
        float: left;
        padding: 9px;
        height: 530px; /* Should be removed. Only for demonstration */
    }

    .column-dialog {
        float: left;
        padding: 9px;
        height: 400px; /* Should be removed. Only for demonstration */
    }

    .left {
        width: 80px;
    }

    .right {
        width: 820px;
    }

    .left-dialog {
        width: 10%;
    }

    .right-dialog {
        width: 90%;
    }
    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    #listbox-control {
        width: 60px;
        height: 250px;
        /* margin: auto; */
    }
    /* Custom css for horizontal listbox */
    .e-horizontal-listbox .e-list-parent {
        display: inline-flex;
        align-items: center;
    }

    .e-horizontal-listbox {
        overflow-y: hidden;
        height: 100px;
    }

    .e-horizontal-listbox .e-list-parent .e-list-item {
        width: max-content;
        line-height: 100px;
        height: 100px;
    }

    .e-listbox-container .e-list-item {
        align-content: center;
        background-color: white;
        align-items: center;
    }

    .e-listbox-container .e-list-item:hover:not(.e-selected):not(.e-disabled) {
        background-color: #d8e3f0;
    }

    .e-listbox-container .e-list-item.e-selected {
        background-color: #6fa4e3;
    }

</style>
@* Button styles *@
<style>
    .parent {
        /* display: flex; */
        margin: 0px;
        margin-top: 20%;
    }

    .e-custom {
        background-color: #f7f0df;
        border-radius: 15;
        /* height: 40px; */
        /*width: 80px; */
    }
</style>
<style>
    .e-grid {
        line-height: 20px;
    }

    .e-grid .e-altrow {
        /* background-color: #f2f2f2; */
        /* background-color: #d8e1f2; */
        /* background-color: #f7f8fa; */
        background-color: #F3F2F1;
    }

    .e-grid .e-rowcell.e-selectionbackground {
        background-color: lightsteelblue !important;
    }

    .e-grid tr.e-row:hover .e-rowcell:not(.e-cellselectionbackground):not(.e-active):not(.e-updatedtd):not(.e-indentcell) {
        border-block-color: black;
        border-block-start-color: black;
        /* border-bottom-color: black; */
    }
</style>

@* sftextbox style *@
<style>
    .pali_text {
        color: dark brown !important;
    }

    .trans_text {
        color: dimgray !important;
    }

    .footer_text {
        color: #a07e28 !important;
    }
    .multiline{
        //margin-top: 60px;
        //width: 20%;
    }

</style>
@* Menu style
https://www.syncfusion.com/forums/173054/menu-bar-font-color-and-vertical-align-for-sub-items
*@
<style>
    .menu-control, .e-menu-container, .e-menu-container.e-menu-popup,
    .e-menu-container ul .e-menu-item, .e-menu-container .e-ul .e-menu-item {
        background-color: #ded8ca;
        font-size: 18px;
    }
</style>
<div>
    <SfDialog Width="400px" MinHeight="370px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsUserProfileVisible">
        <DialogTemplates>
            <Header> User Profile</Header>
            <Content>
                <div>
                    <span>You can update your user names.</span>
                </div>
                <br />
                <div class="form-row">
                    <label for="user_name" class="col-form-label">User Name in English</label>
                    <SfTextBox ID="user_name" Input="@UserProfileInputHandler" @bind-Value="@userName_E"></SfTextBox>
                </div>
                <br />
                <div class="form-row">
                    <label for="user_name" class="col-form-label">မြန်မာ အမည်</label>
                    <SfTextBox ID="user_name" Input="@UserProfileInputHandler" @bind-Value="@userName_M"></SfTextBox>
                </div>                
                <div>
                    <p style="color:brown">@UserProfileErrMsg</p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Ok" IsPrimary="true" OnClick="@ok_UserProfileClick" />
            <DialogButton Content="Cancel" OnClick="@cancel_UserProfileClick" />
        </DialogButtons>
    </SfDialog>
</div>
@code {
    bool IsUserProfileVisible = false;
    string userName_E = "", userName_M = "";
    string UserProfileErrMsg = "";

    private void UserProfileInputHandler(InputEventArgs args)
    {
        UserProfileErrMsg = String.Empty;
    }
    private void ok_UserProfileClick()
    {
        if (userName_E.Trim().Length == 0 || userName_M.Trim().Length == 0)
        {
            UserProfileErrMsg = "User name cannot be empty.";
        }
        else
        {
            if (State != null && State.dataFile != null)
            {
                // register
                State.email = email;
                State.userName = userName_E;
                State.userName_M = userName_M;
                State.dataFile.UpdateUserProfile(email, userName_E, userName_M);
                IsUserProfileVisible = false;
                AlertBtn("User profile updated.", "Success");
            }
        }
    }
    private void cancel_UserProfileClick()
    {
        IsUserProfileVisible = false;
    }
}
<div>
    <SfDialog Width="425px" MinHeight="360px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsImportInfoDialogVisible">
        <DialogEvents OnOpen="ImportInfoDialogOpen"></DialogEvents>
        <DialogTemplates>
            <Header> Import Data Details </Header>
            <Content>
                <label class="col-form-label" style="width:200px"><strong>Doc No. :</strong></label>
                <span>@doc_ID</span>
                <label class="col-form-label" style="width:200px"><strong>Doc Pages :</strong></label>
                <span>@doc_Pages</span>
                <label class="col-form-label" style="width:200px"><strong>Task :</strong></label>
                <span>@userTask</span>
                <label class="col-form-label" style="width:200px"><strong>Submitted pages on server :</strong></label>
                <span>@submittedPagesOnServer</span>
                <label class="col-form-label" style="width:200px"><strong>Pages in file :</strong></label>
                <span>@pagesInFile</span>
                <div hidden="@hidePageSubmitRange">
                    <label class="col-form-label" style="width:200px"><strong>Pages to submit to server :</strong></label>
                    <span>@pagesToSubmit</span>
                </div>
                <div hidden="@hideReviewPageSubmitRange">
                    <div style="width:200px" class="form-group column3" hidden="@hideReviewPageSubmitRange">
                        <label class="col-form-label" style="width:200px"><strong>Pages to submit to server :</strong></label>
                    </div>
                    <div style="width:50px" class="form-group column4" hidden="@hideReviewPageSubmitRange">
                        <SfNumericTextBox TValue="int?" ShowSpinButton="false" @bind-Value="@startValue" Max=@docEndPage Min=@docStartPage></SfNumericTextBox>
                    </div>
                    <div style="width:50px;margin-left:25px" class="form-group column5" hidden="@hideReviewPageSubmitRange">
                        <SfNumericTextBox TValue="int?" ShowSpinButton="false" @bind-Value="@endValue" Max=@docEndPage Min=@docStartPage></SfNumericTextBox>
                    </div>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Cancel" CssClass="e-custom-dial-button" OnClick="@okCancel_ImportInfoDialog" />
            <DialogButton Content="Ok" CssClass="e-custom-dial-button" IsPrimary="true" OnClick="@okClick_ImportInfoDialog" />
        </DialogButtons>
    </SfDialog>
</div>
@* DialogButton and other styles *@
<style>
    .e-custom-dial-button {
        background-color: #f7f0df;
        border-radius: 15;
        /* height: 40px; */
        width: 75px;
    }

    .column3 {
        float: left;
        padding: 0px;
        width: 200px;
        /* height: 530px; /* should be removed. only for demonstration */
    }

    .column4 {
        float: left;
        padding: 0px;
        width: 75px;
        /* height: 530px; /* should be removed. only for demonstration */
    }

    .column5 {
        float: left;
        padding: 0px;
        width: 75px;
        /* height: 530px; /* should be removed. only for demonstration */
    }
</style>
@code {
    bool IsImportInfoDialogVisible = false;
    string userTask = "";
    string submittedPagesOnServer = "", pagesToSubmit = "", doc_Pages = "", pagesInFile = "";
    const string _NoNewPagesToSubmit_ = "No new pages to submit.";
    int serverUploadStartPage = 0;
    int docStartPage = 0, docEndPage = 0;
    int? startValue = 0, endValue = 0;
    bool hidePageSubmitRange = false;
    bool hideReviewPageSubmitRange = true;

    private void okCancel_ImportInfoDialog()
    {
        IsImportInfoDialogVisible = false;
    }
    private void okClick_ImportInfoDialog()
    {
        IsImportInfoDialogVisible = false;
        if (pagesToSubmit != _NoNewPagesToSubmit_) UploadToServer();
    }
    // The following event is not really necessary. MinHeight in SfDialog satisfies the required height.
    private void ImportInfoDialogOpen(Syncfusion.Blazor.Popups.BeforeOpenEventArgs args)
    {
        // setting maximum height to the Dialog
        args.MaxHeight = "350px";
    }
}